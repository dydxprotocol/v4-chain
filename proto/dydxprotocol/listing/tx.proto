syntax = "proto3";
package dydxprotocol.listing;

import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "dydxprotocol/subaccounts/subaccount.proto";

option go_package = "github.com/dydxprotocol/v4-chain/protocol/x/listing/types";

// Msg defines the Msg service.
service Msg {
  // SetMarketsHardCap sets a hard cap on the number of markets listed
  rpc SetMarketsHardCap(MsgSetMarketsHardCap)
      returns (MsgSetMarketsHardCapResponse);

  // CreateMarketPermissionless creates a new market without going through x/gov
  rpc CreateMarketPermissionless(MsgCreateMarketPermissionless)
      returns (MsgCreateMarketPermissionlessResponse);
}

// MsgSetMarketsHardCap is used to set a hard cap on the number of markets
// listed
message MsgSetMarketsHardCap {
  // The address that controls the module (the gov module account).
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Hard cap for the total number of markets listed
  uint32 hard_cap_for_markets = 2;
}

// MsgSetMarketsHardCapResponse defines the MsgSetMarketsHardCap response
message MsgSetMarketsHardCapResponse {}

// MsgCreateMarketPermissionless is a message used to create new markets without
// // going through x/gov
message MsgCreateMarketPermissionless {
  option (cosmos.msg.v1.signer) = "subaccount_id";

  // The name of the `Perpetual` (e.g. `BTC-USD`).
  string ticker = 1;

  // The subaccount to deposit from.
  dydxprotocol.subaccounts.SubaccountId subaccount_id = 2;

  // Number of quote quantums to deposit.
  bytes quote_quantums = 3 [
    (gogoproto.customtype) =
        "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt",
    (gogoproto.nullable) = false
  ];
}

// MsgCreateMarketPermissionlessResponse defines the
// MsgCreateMarketPermissionless response
message MsgCreateMarketPermissionlessResponse {}
