syntax = "proto3";
package dydxprotocol.clob;

import "gogoproto/gogo.proto";

option go_package = "github.com/dydxprotocol/v4-chain/protocol/x/clob/types";

// Defines the block rate limits for CLOB specific operations.
message BlockRateLimitConfiguration {
  // How many short term order attempts (successful and failed) are allowed for
  // a subaccount per N blocks. Note that the rate limits are applied
  // in an AND fashion such that an order placement must pass all rate limit
  // configurations.
  //
  // Specifying 0 values disables this rate limit.
  repeated MaxPerNBlocksRateLimit max_short_term_orders_per_n_blocks = 1
      [ (gogoproto.nullable) = false ];

  // How many stateful order attempts (successful and failed) are allowed for a
  // subaccount per N blocks. Note that the rate limits are applied
  // in an AND fashion such that an order placement must pass all rate limit
  // configurations.
  //
  // Specifying 0 values disables this rate limit.
  repeated MaxPerNBlocksRateLimit max_stateful_orders_per_n_blocks = 2
      [ (gogoproto.nullable) = false ];

  // How many short term order cancellation attempts (successful and failed) are
  // allowed for a subaccount per N blocks. Note that the rate limits are
  // applied in an AND fashion such that an order cancellation must pass all
  // rate limit configurations.
  //
  // Specifying 0 values disables this rate limit.
  repeated MaxPerNBlocksRateLimit
      max_short_term_order_cancellations_per_n_blocks = 3
      [ (gogoproto.nullable) = false ];
}

// Defines a rate limit over a specific number of blocks.
message MaxPerNBlocksRateLimit {
  // How many blocks the rate limit is over.
  // Specifying 0 is invalid.
  uint32 num_blocks = 1;
  // What the limit is for `num_blocks`.
  // Specifying 0 is invalid.
  uint32 limit = 2;
}
