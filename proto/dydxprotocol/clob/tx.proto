syntax = "proto3";
package dydxprotocol.clob;

import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "dydxprotocol/clob/order.proto";
import "dydxprotocol/clob/order_removals.proto";
import "dydxprotocol/clob/matches.proto";
import "dydxprotocol/clob/clob_pair.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/dydxprotocol/v4-chain/protocol/x/clob/types";

// Msg defines the Msg service.
service Msg {
  // ProposedOperations is a temporary message used by block proposers
  // for matching orders as part of the ABCI++ workaround.
  rpc ProposedOperations(MsgProposedOperations)
      returns (MsgProposedOperationsResponse);
  // PlaceOrder allows accounts to place orders on the orderbook.
  rpc PlaceOrder(MsgPlaceOrder) returns (MsgPlaceOrderResponse);
  // CancelOrder allows accounts to cancel existing orders on the orderbook.
  rpc CancelOrder(MsgCancelOrder) returns (MsgCancelOrderResponse);
  // CreateClobPair creates a new clob pair.
  rpc CreateClobPair(MsgCreateClobPair) returns (MsgCreateClobPairResponse);
}

// MsgCreateClobPair is a message used by x/gov for creating a new clob pair.
message MsgCreateClobPair {
  option (cosmos.msg.v1.signer) = "authority";

  // The address that controls the module.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // `clob_pair` defines parameters for the new clob pair.
  ClobPair clob_pair = 2;
}

// MsgCreateClobPairResponse defines the CreateClobPair response type.
message MsgCreateClobPairResponse {}

// MsgProposedOperations is a message injected by block proposers to
// specify the operations that occurred in a block.
message MsgProposedOperations {
  // The list of operations proposed by the block proposer.
  repeated OperationRaw operations_queue = 1 [ (gogoproto.nullable) = false ];
}

// MsgProposedOperationsResponse is the response type of the message injected
// by block proposers to specify the operations that occurred in a block.
message MsgProposedOperationsResponse {}

// MsgPlaceOrder is a request type used for placing orders.
message MsgPlaceOrder { Order order = 1 [ (gogoproto.nullable) = false ]; }

// MsgPlaceOrderResponse is a response type used for placing orders.
message MsgPlaceOrderResponse {}

// MsgCancelOrder is a request type used for canceling orders.
message MsgCancelOrder {
  OrderId order_id = 1 [ (gogoproto.nullable) = false ];
  // Information about when the order cancellation expires.
  oneof good_til_oneof {
    // The last block this order cancellation can be executed at.
    // Used only for Short-Term orders and must be zero for stateful orders.
    uint32 good_til_block = 2;

    // good_til_block_time represents the unix timestamp (in seconds) at which a
    // stateful order cancellation will be considered expired. The
    // good_til_block_time is always evaluated against the previous block's
    // `BlockTime` instead of the block in which the order is committed.
    // This value must be zero for Short-Term orders.
    fixed32 good_til_block_time = 3;
  }
}

// MsgCancelOrderResponse is a response type used for canceling orders.
message MsgCancelOrderResponse {}

// OperationRaw represents an operation in the proposed operations.
// Note that the `order_placement` operation is a signed message.
message OperationRaw {
  // operationRaw represents an operation that occurred, which can be a match,
  // a signed order placement, or an order removal.
  oneof operation {
    ClobMatch match = 1;
    bytes short_term_order_placement = 2;
    OrderRemoval order_removal = 3;
  }
}
