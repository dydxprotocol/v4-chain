syntax = "proto3";
package dydxprotocol.indexer.protocol.v1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/dydxprotocol/v4-chain/protocol/indexer/protocol/v1/types";

// Initial copy of protos from dYdX chain application state protos for the
// subaccount module for use to send Indexer specific messages. Do not make any
// breaking changes to these protos, a new version should be created if a
// breaking change is needed.

// IndexerSubaccountId defines a unique identifier for a Subaccount.
message IndexerSubaccountId {
  // The address of the wallet that owns this subaccount.
  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // < 128 Since 128 should be enough to start and it fits within
  // 1 Byte (1 Bit needed to indicate that the first byte is the last).
  uint32 number = 2;
}

// IndexerPerpetualPosition are an account’s positions of a `Perpetual`.
// Therefore they hold any information needed to trade perpetuals.
message IndexerPerpetualPosition {
  // The `Id` of the `Perpetual`.
  uint32 perpetual_id = 1;
  // The size of the position in base quantums.
  bytes quantums = 2 [
    (gogoproto.customtype) =
        "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt",
    (gogoproto.nullable) = false
  ];
  // The funding_index of the `Perpetual` the last time this position was
  // settled.
  bytes funding_index = 3 [
    (gogoproto.customtype) =
        "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt",
    (gogoproto.nullable) = false
  ];
  // Amount of funding payment (in quote quantums).
  // Note: 1. this field is not cumulative.
  // 2. a positive value means funding payment was paid out and
  // a negative value means funding payment was received.
  bytes funding_payment = 4 [
    (gogoproto.customtype) =
        "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt",
    (gogoproto.nullable) = false
  ];
}

// IndexerAssetPosition define an account’s positions of an `Asset`.
// Therefore they hold any information needed to trade on Spot and Margin.
message IndexerAssetPosition {
  // The `Id` of the `Asset`.
  uint32 asset_id = 1;
  // The absolute size of the position in base quantums.
  bytes quantums = 2 [
    (gogoproto.customtype) =
        "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt",
    (gogoproto.nullable) = false
  ];
  // The `Index` (either `LongIndex` or `ShortIndex`) of the `Asset` the last
  // time this position was settled
  // TODO(DEC-582): pending margin trading being added.
  uint64 index = 3;
}
