syntax = "proto3";
package dydxprotocol.ratelimit;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "dydxprotocol/ratelimit/limit_params.proto";
import "dydxprotocol/ratelimit/capacity.proto";
import "dydxprotocol/ratelimit/pending_send_packet.proto";

option go_package = "github.com/dydxprotocol/v4-chain/protocol/x/ratelimit/types";

// Query defines the gRPC querier service.
service Query {
  // List all limit params.
  rpc ListLimitParams(ListLimitParamsRequest)
      returns (ListLimitParamsResponse) {
    option (google.api.http).get =
        "/dydxprotocol/v4/ratelimit/list_limit_params";
  }

  // Query capacity by denom.
  rpc CapacityByDenom(QueryCapacityByDenomRequest)
      returns (QueryCapacityByDenomResponse) {
    option (google.api.http).get =
        "/dydxprotocol/v4/ratelimit/capacity_by_denom";
  }
  // Get all pending send packets
  rpc AllPendingSendPackets(QueryAllPendingSendPacketsRequest)
      returns (QueryAllPendingSendPacketsResponse) {
    option (google.api.http).get =
        "/dydxprotocol/v4/ratelimit/get_all_pending_send_packet";
  }
}

// ListLimitParamsRequest is a request type of the ListLimitParams RPC method.
message ListLimitParamsRequest {}

// ListLimitParamsResponse is a response type of the ListLimitParams RPC method.
message ListLimitParamsResponse {
  repeated LimitParams limit_params_list = 1 [ (gogoproto.nullable) = false ];
}

// QueryCapacityByDenomRequest is a request type for the CapacityByDenom RPC
// method.
message QueryCapacityByDenomRequest { string denom = 1; }

// QueryCapacityByDenomResponse is a response type of the CapacityByDenom RPC
// method.
message QueryCapacityByDenomResponse {
  repeated LimiterCapacity limiter_capacity_list = 1
      [ (gogoproto.nullable) = false ];
}

// QueryAllPendingSendPacketsRequest is a request type for the
// AllPendingSendPackets RPC
message QueryAllPendingSendPacketsRequest {}

// QueryAllPendingSendPacketsResponse is a response type of the
// AllPendingSendPackets RPC
message QueryAllPendingSendPacketsResponse {
  repeated PendingSendPacket pending_send_packets = 1
      [ (gogoproto.nullable) = false ];
}