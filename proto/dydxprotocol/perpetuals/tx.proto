syntax = "proto3";
package dydxprotocol.perpetuals;

import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "dydxprotocol/perpetuals/params.proto";
import "dydxprotocol/perpetuals/perpetual.proto";

option go_package = "github.com/dydxprotocol/v4-chain/protocol/x/perpetuals/types";

// Msg defines the Msg service.
service Msg {
  // AddPremiumVotes add new samples of the funding premiums to the
  // application.
  rpc AddPremiumVotes(MsgAddPremiumVotes) returns (MsgAddPremiumVotesResponse);
  // CreatePerpetual creates a new perpetual object.
  rpc CreatePerpetual(MsgCreatePerpetual) returns (MsgCreatePerpetualResponse);
  // SetLiquidityTier creates an liquidity tier if the ID doesn't exist, and
  // updates the existing liquidity tier otherwise.
  rpc SetLiquidityTier(MsgSetLiquidityTier)
      returns (MsgSetLiquidityTierResponse);
  // UpdatePerpetualParams updates the parameters of a perpetual market.
  rpc UpdatePerpetualParams(MsgUpdatePerpetualParams)
      returns (MsgUpdatePerpetualParamsResponse);
  // UpdateParams updates the parameters of perpetuals module.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreatePerpetual is a message used by x/gov to create a new perpetual.
message MsgCreatePerpetual {
  option (cosmos.msg.v1.signer) = "authority";

  // The address that controls the module.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // `params` defines parameters for the new perpetual market.
  PerpetualParams params = 2 [ (gogoproto.nullable) = false ];
}

// MsgCreatePerpetualResponse defines the CreatePerpetual
// response type.
message MsgCreatePerpetualResponse {}

// MsgSetLiquidityTier is a message used by x/gov to create or update a
// liquidity tier.
message MsgSetLiquidityTier {
  option (cosmos.msg.v1.signer) = "authority";

  // The address that controls the module.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The liquidity tier to create or update.
  LiquidityTier liquidity_tier = 2 [ (gogoproto.nullable) = false ];
}

// MsgSetLiquidityTierResponse defines the SetLiquidityTier response type.
message MsgSetLiquidityTierResponse {}

// MsgUpdatePerpetualParams is a message used by x/gov to update the parameters
// of a perpetual.
message MsgUpdatePerpetualParams {
  // Authority is the address that controls the module.
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The perpetual to update. Each field must be set.
  PerpetualParams perpetual_params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdatePerpetualParamsResponse defines the UpdatePerpetualParams
// response type.
message MsgUpdatePerpetualParamsResponse {}

// FundingPremium represents a funding premium value for a perpetual
// market. Can be used to represent a premium vote or a premium sample.
message FundingPremium {
  // The id of the perpetual market.
  uint32 perpetual_id = 1;
  // The sampled premium rate. In parts-per-million.
  int32 premium_ppm = 2;
}

// MsgAddPremiumVotes is a request type for the AddPremiumVotes method.
message MsgAddPremiumVotes {
  repeated FundingPremium votes = 1 [ (gogoproto.nullable) = false ];
}

// MsgAddPremiumVotesResponse defines the AddPremiumVotes
// response type.
message MsgAddPremiumVotesResponse {}

// MsgUpdateParams is a message used by x/gov to update the parameters of the
// perpetuals module.
message MsgUpdateParams {
  // Authority is the address that controls the module.
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The parameters to update. Each field must be set.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the UpdateParams response type.
message MsgUpdateParamsResponse {}
