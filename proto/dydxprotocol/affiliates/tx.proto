syntax = "proto3";
package dydxprotocol.affiliates;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "dydxprotocol/affiliates/affiliates.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/dydxprotocol/v4-chain/protocol/x/affiliates/types";

// Msg defines the Msg service.
service Msg {
  // RegisterAffiliate registers a referee-affiliate relationship
  rpc RegisterAffiliate(MsgRegisterAffiliate)
      returns (MsgRegisterAffiliateResponse);
  // UpdateAffiliateTiers updates affiliate tiers
  rpc UpdateAffiliateTiers(MsgUpdateAffiliateTiers)
      returns (MsgUpdateAffiliateTiersResponse);
  // UpdateAffiliateWhitelist updates affiliate whitelist
  rpc UpdateAffiliateWhitelist(MsgUpdateAffiliateWhitelist)
      returns (MsgUpdateAffiliateWhitelistResponse);

  rpc UpdateAffiliateProgramParameters(
      MsgUpdateAffiliateProgramParametersRequest)
      returns (MsgUpdateAffiliateProgramParametersResponse);
}

// Message to register a referee-affiliate relationship
message MsgRegisterAffiliate {
  option (cosmos.msg.v1.signer) = "referee";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  // Address of the referee
  string referee = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Address of the affiliate
  string affiliate = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// Response to MsgRegisterAffiliate
message MsgRegisterAffiliateResponse {}

// Message to update affiliate tiers
message MsgUpdateAffiliateTiers {
  option (cosmos.msg.v1.signer) = "authority";
  // Authority sending this message. Will be sent by gov
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Updated affiliate tiers information
  AffiliateTiers tiers = 2 [ (gogoproto.nullable) = false ];
}

// Response to MsgUpdateAffiliateTiers
message MsgUpdateAffiliateTiersResponse {}

// Message to update affiliate whitelist
message MsgUpdateAffiliateWhitelist {
  option (cosmos.msg.v1.signer) = "authority";
  // Authority sending this message. Will be sent by gov
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Updated affiliate whitelist information
  AffiliateWhitelist whitelist = 2 [ (gogoproto.nullable) = false ];
}

// Response to MsgUpdateAffiliateWhitelist
message MsgUpdateAffiliateWhitelistResponse {}

// AffiliateWhitelist defines the affiliate whitelist.
message AffiliateOverrides {
  // List of unique whitelisted addresses.
  // These are automatically put at the maximum affiliate tier
  repeated string addresses = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// Message to update affiliate program parameters
message MsgUpdateAffiliateProgramParametersRequest {
  option (cosmos.msg.v1.signer) = "authority";
  // Authority sending this message. Will be sent by gov
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Updated affiliate program parameters information
  AffiliateTiers tiers = 2;
  // Maximum commission per referred user in a 30d rolling window in revenue
  uint32 maximum_30d_commission_per_referred = 3 [(gogoproto.nullable) = true];
  // Referee minimum fee tier index
  uint32 referee_minimum_fee_tier_idx = 4 [(gogoproto.nullable) = true];
  // Maximum attributable revenue per affiliate in a 30d rolling window in
  // revenue
  uint32 maximum_30d_attributable_revenue_per_affiliate = 5 [(gogoproto.nullable) = true];
  // Affiliate whitelist
  AffiliateOverrides affiliate_overrides = 6;
}

// Response to MsgUpdateAffiliateProgramParameters
message MsgUpdateAffiliateProgramParametersResponse {}