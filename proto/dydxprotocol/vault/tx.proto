syntax = "proto3";
package dydxprotocol.vault;

import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "dydxprotocol/subaccounts/subaccount.proto";
import "dydxprotocol/vault/params.proto";
import "dydxprotocol/vault/vault.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/dydxprotocol/v4-chain/protocol/x/vault/types";

// Msg defines the Msg service.
service Msg {
  // DepositToVault deposits funds into a vault.
  rpc DepositToVault(MsgDepositToVault) returns (MsgDepositToVaultResponse);

  // WithdrawFromVault attempts to withdraw funds from a vault.
  rpc WithdrawFromVault(MsgWithdrawFromVault)
      returns (MsgWithdrawFromVaultResponse);

  // UpdateParams updates the Params in state.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgDepositToVault deposits the specified asset from the subaccount to the
// vault.
message MsgDepositToVault {
  // This annotation enforces that the tx signer is the owner specified in
  // subaccount_id. Therefore, this enforces that only the owner of the
  // subaccount can deposit into the vault using that subaccount.
  option (cosmos.msg.v1.signer) = "subaccount_id";

  // The vault to deposit into.
  VaultId vault_id = 1;

  // The subaccount to deposit from.
  dydxprotocol.subaccounts.SubaccountId subaccount_id = 2;

  // Number of quote quantums to deposit.
  bytes quote_quantums = 3 [
    (gogoproto.customtype) =
        "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt",
    (gogoproto.nullable) = false
  ];
}

// MsgDepositToVaultResponse is the Msg/DepositToVault response type.
message MsgDepositToVaultResponse {}

// MsgWithdrawFromVault attempts to withdraw the specified target amount of
// asset from the vault to the subaccount.
message MsgWithdrawFromVault {
  // This annotation enforces that the tx signer is the owner specified in
  // subaccount_id. Therefore, this enforces that only the owner of the
  // subaccount can withdraw from the vault equity allocated to the subaccount.
  option (cosmos.msg.v1.signer) = "subaccount_id";

  // The vault to withdraw from.
  VaultId vault_id = 1;

  // The subaccount to withdraw to.
  // The subaccount must own shares in the vault.
  dydxprotocol.subaccounts.SubaccountId subaccount_id = 2;

  // The number of shares to redeem as quote quantums and withdraw.
  // If the specified number exceeds the number of shares owned by the
  // subaccount, then all the shares owned by the subaccount are redeemed and
  // withdrawn.
  NumShares shares = 3;
}

// MsgWithdrawFromVaultResponse is the Msg/WithdrawFromVault response type.
message MsgWithdrawFromVaultResponse {
  // Number of owner shares that have been redeemed as part of the withdrawal.
  NumShares redeemed_shares = 1;

  // Amount of equity (in quote quantums) that has been withdrawn.
  bytes withdrawn_quote_quantums = 2 [
    (gogoproto.customtype) =
        "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt",
    (gogoproto.nullable) = false
  ];

  // Number of owner shares remaining after the withdrawal.
  NumShares remaining_shares = 3;

  // Number of total vault shares after the withdrawal.
  NumShares total_vault_shares = 4;

  // Vault equity (in quote quantums) after the withdrawal.
  bytes total_vault_equity = 5 [
    (gogoproto.customtype) =
        "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt",
    (gogoproto.nullable) = false
  ];
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  // Authority is the address that controls the module.
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The parameters to update. Each field must be set.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse is the Msg/UpdateParams response type.
message MsgUpdateParamsResponse {}
