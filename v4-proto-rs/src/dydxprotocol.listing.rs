// This file is @generated by prost-build.
/// ListingVaultDepositParams represents the params for PML megavault deposits
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListingVaultDepositParams {
    /// Amount that will be deposited into the new market vault exclusively
    #[prost(bytes = "vec", tag = "1")]
    pub new_vault_deposit_amount: ::prost::alloc::vec::Vec<u8>,
    /// Amount deposited into the main vault exclusively. This amount does not
    /// include the amount deposited into the new vault.
    #[prost(bytes = "vec", tag = "2")]
    pub main_vault_deposit_amount: ::prost::alloc::vec::Vec<u8>,
    /// Lockup period for this deposit
    #[prost(uint32, tag = "3")]
    pub num_blocks_to_lock_shares: u32,
}
impl ::prost::Name for ListingVaultDepositParams {
    const NAME: &'static str = "ListingVaultDepositParams";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.ListingVaultDepositParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.ListingVaultDepositParams".into()
    }
}
/// GenesisState defines `x/listing`'s genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// hard_cap_for_markets is the hard cap for the number of markets that can be
    /// listed
    #[prost(uint32, tag = "1")]
    pub hard_cap_for_markets: u32,
    /// listing_vault_deposit_params is the params for PML megavault deposits
    #[prost(message, optional, tag = "2")]
    pub listing_vault_deposit_params: ::core::option::Option<ListingVaultDepositParams>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.GenesisState".into()
    }
}
/// Queries for the hard cap on listed markets
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryMarketsHardCap {}
impl ::prost::Name for QueryMarketsHardCap {
    const NAME: &'static str = "QueryMarketsHardCap";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.QueryMarketsHardCap".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.QueryMarketsHardCap".into()
    }
}
/// Response type indicating the hard cap on listed markets
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryMarketsHardCapResponse {
    #[prost(uint32, tag = "1")]
    pub hard_cap: u32,
}
impl ::prost::Name for QueryMarketsHardCapResponse {
    const NAME: &'static str = "QueryMarketsHardCapResponse";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.QueryMarketsHardCapResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.QueryMarketsHardCapResponse".into()
    }
}
/// Queries the listing vault deposit params
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryListingVaultDepositParams {}
impl ::prost::Name for QueryListingVaultDepositParams {
    const NAME: &'static str = "QueryListingVaultDepositParams";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.QueryListingVaultDepositParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.QueryListingVaultDepositParams".into()
    }
}
/// Response type for QueryListingVaultDepositParams
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryListingVaultDepositParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<ListingVaultDepositParams>,
}
impl ::prost::Name for QueryListingVaultDepositParamsResponse {
    const NAME: &'static str = "QueryListingVaultDepositParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.QueryListingVaultDepositParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.QueryListingVaultDepositParamsResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "grpc-transport")]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Queries for the hard cap number of listed markets
        pub async fn markets_hard_cap(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryMarketsHardCap>,
        ) -> std::result::Result<
            tonic::Response<super::QueryMarketsHardCapResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.listing.Query/MarketsHardCap",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.listing.Query", "MarketsHardCap"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries the listing vault deposit params
        pub async fn listing_vault_deposit_params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryListingVaultDepositParams>,
        ) -> std::result::Result<
            tonic::Response<super::QueryListingVaultDepositParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.listing.Query/ListingVaultDepositParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.listing.Query",
                        "ListingVaultDepositParams",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// MsgSetMarketsHardCap is used to set a hard cap on the number of markets
/// listed
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetMarketsHardCap {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Hard cap for the total number of markets listed
    #[prost(uint32, tag = "2")]
    pub hard_cap_for_markets: u32,
}
impl ::prost::Name for MsgSetMarketsHardCap {
    const NAME: &'static str = "MsgSetMarketsHardCap";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.MsgSetMarketsHardCap".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.MsgSetMarketsHardCap".into()
    }
}
/// MsgSetMarketsHardCapResponse defines the MsgSetMarketsHardCap response
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetMarketsHardCapResponse {}
impl ::prost::Name for MsgSetMarketsHardCapResponse {
    const NAME: &'static str = "MsgSetMarketsHardCapResponse";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.MsgSetMarketsHardCapResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.MsgSetMarketsHardCapResponse".into()
    }
}
/// MsgCreateMarketPermissionless is a message used to create new markets without
/// going through x/gov
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateMarketPermissionless {
    /// The name of the `Perpetual` (e.g. `BTC-USD`).
    #[prost(string, tag = "1")]
    pub ticker: ::prost::alloc::string::String,
    /// The subaccount to deposit from.
    #[prost(message, optional, tag = "2")]
    pub subaccount_id: ::core::option::Option<super::subaccounts::SubaccountId>,
}
impl ::prost::Name for MsgCreateMarketPermissionless {
    const NAME: &'static str = "MsgCreateMarketPermissionless";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.MsgCreateMarketPermissionless".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.MsgCreateMarketPermissionless".into()
    }
}
/// MsgCreateMarketPermissionlessResponse defines the
/// MsgCreateMarketPermissionless response
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgCreateMarketPermissionlessResponse {}
impl ::prost::Name for MsgCreateMarketPermissionlessResponse {
    const NAME: &'static str = "MsgCreateMarketPermissionlessResponse";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.MsgCreateMarketPermissionlessResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.MsgCreateMarketPermissionlessResponse".into()
    }
}
/// MsgSetListingVaultDepositParams is a message used to set PML megavault
/// deposit params
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetListingVaultDepositParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Params which define the vault deposit for market listing
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<ListingVaultDepositParams>,
}
impl ::prost::Name for MsgSetListingVaultDepositParams {
    const NAME: &'static str = "MsgSetListingVaultDepositParams";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.MsgSetListingVaultDepositParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.MsgSetListingVaultDepositParams".into()
    }
}
/// MsgSetListingVaultDepositParamsResponse defines the
/// MsgSetListingVaultDepositParams response
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetListingVaultDepositParamsResponse {}
impl ::prost::Name for MsgSetListingVaultDepositParamsResponse {
    const NAME: &'static str = "MsgSetListingVaultDepositParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.MsgSetListingVaultDepositParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.MsgSetListingVaultDepositParamsResponse".into()
    }
}
/// MsgUpgradeIsolatedPerpetualToCross is used to upgrade a market from
/// isolated margin to cross margin.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpgradeIsolatedPerpetualToCross {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// ID of the perpetual to be upgraded to CROSS
    #[prost(uint32, tag = "2")]
    pub perpetual_id: u32,
}
impl ::prost::Name for MsgUpgradeIsolatedPerpetualToCross {
    const NAME: &'static str = "MsgUpgradeIsolatedPerpetualToCross";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.MsgUpgradeIsolatedPerpetualToCross".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.MsgUpgradeIsolatedPerpetualToCross".into()
    }
}
/// MsgUpgradeIsolatedPerpetualToCrossResponse defines the
/// UpgradeIsolatedPerpetualToCross response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpgradeIsolatedPerpetualToCrossResponse {}
impl ::prost::Name for MsgUpgradeIsolatedPerpetualToCrossResponse {
    const NAME: &'static str = "MsgUpgradeIsolatedPerpetualToCrossResponse";
    const PACKAGE: &'static str = "dydxprotocol.listing";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.listing.MsgUpgradeIsolatedPerpetualToCrossResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.listing.MsgUpgradeIsolatedPerpetualToCrossResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "grpc-transport")]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SetMarketsHardCap sets a hard cap on the number of markets listed
        pub async fn set_markets_hard_cap(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSetMarketsHardCap>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSetMarketsHardCapResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.listing.Msg/SetMarketsHardCap",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.listing.Msg", "SetMarketsHardCap"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CreateMarketPermissionless creates a new market without going through x/gov
        pub async fn create_market_permissionless(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCreateMarketPermissionless>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCreateMarketPermissionlessResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.listing.Msg/CreateMarketPermissionless",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.listing.Msg",
                        "CreateMarketPermissionless",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SetListingVaultDepositParams sets PML megavault deposit params
        pub async fn set_listing_vault_deposit_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSetListingVaultDepositParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSetListingVaultDepositParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.listing.Msg/SetListingVaultDepositParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.listing.Msg",
                        "SetListingVaultDepositParams",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpgradeIsolatedPerpetualToCross upgrades a perpetual from isolated to cross
        /// margin
        pub async fn upgrade_isolated_perpetual_to_cross(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpgradeIsolatedPerpetualToCross>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpgradeIsolatedPerpetualToCrossResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.listing.Msg/UpgradeIsolatedPerpetualToCross",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.listing.Msg",
                        "UpgradeIsolatedPerpetualToCross",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
