// This file is @generated by prost-build.
/// ConfigRequest defines the request structure for the Config gRPC query.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ConfigRequest {}
impl ::prost::Name for ConfigRequest {
    const NAME: &'static str = "ConfigRequest";
    const PACKAGE: &'static str = "cosmos.base.node.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.base.node.v1beta1.ConfigRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.base.node.v1beta1.ConfigRequest".into()
    }
}
/// ConfigResponse defines the response structure for the Config gRPC query.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigResponse {
    #[prost(string, tag = "1")]
    pub minimum_gas_price: ::prost::alloc::string::String,
    /// pruning settings
    #[prost(string, tag = "2")]
    pub pruning_keep_recent: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub pruning_interval: ::prost::alloc::string::String,
}
impl ::prost::Name for ConfigResponse {
    const NAME: &'static str = "ConfigResponse";
    const PACKAGE: &'static str = "cosmos.base.node.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.base.node.v1beta1.ConfigResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.base.node.v1beta1.ConfigResponse".into()
    }
}
/// StateRequest defines the request structure for the status of a node.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StatusRequest {}
impl ::prost::Name for StatusRequest {
    const NAME: &'static str = "StatusRequest";
    const PACKAGE: &'static str = "cosmos.base.node.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.base.node.v1beta1.StatusRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.base.node.v1beta1.StatusRequest".into()
    }
}
/// StateResponse defines the response structure for the status of a node.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusResponse {
    /// earliest block height available in the store
    #[prost(uint64, tag = "1")]
    pub earliest_store_height: u64,
    /// current block height
    #[prost(uint64, tag = "2")]
    pub height: u64,
    /// block height timestamp
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// app hash of the current block
    #[prost(bytes = "vec", tag = "4")]
    pub app_hash: ::prost::alloc::vec::Vec<u8>,
    /// validator hash provided by the consensus header
    #[prost(bytes = "vec", tag = "5")]
    pub validator_hash: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for StatusResponse {
    const NAME: &'static str = "StatusResponse";
    const PACKAGE: &'static str = "cosmos.base.node.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.base.node.v1beta1.StatusResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.base.node.v1beta1.StatusResponse".into()
    }
}
/// Generated client implementations.
pub mod service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service defines the gRPC querier service for node related queries.
    #[derive(Debug, Clone)]
    pub struct ServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "grpc-transport")]
    impl ServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Config queries for the operator configuration.
        pub async fn config(
            &mut self,
            request: impl tonic::IntoRequest<super::ConfigRequest>,
        ) -> std::result::Result<tonic::Response<super::ConfigResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.base.node.v1beta1.Service/Config",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.base.node.v1beta1.Service", "Config"));
            self.inner.unary(req, path, codec).await
        }
        /// Status queries for the node status.
        pub async fn status(
            &mut self,
            request: impl tonic::IntoRequest<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.base.node.v1beta1.Service/Status",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.base.node.v1beta1.Service", "Status"));
            self.inner.unary(req, path, codec).await
        }
    }
}
