// This file is @generated by prost-build.
/// VaultId uniquely identifies a vault by its type and number.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VaultId {
    /// Type of the vault.
    #[prost(enumeration = "VaultType", tag = "1")]
    pub r#type: i32,
    /// Unique ID of the vault within above type.
    #[prost(uint32, tag = "2")]
    pub number: u32,
}
impl ::prost::Name for VaultId {
    const NAME: &'static str = "VaultId";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.VaultId".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.VaultId".into()
    }
}
/// VaultType represents different types of vaults.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VaultType {
    /// Default value, invalid and unused.
    Unspecified = 0,
    /// Vault is associated with a CLOB pair.
    Clob = 1,
}
impl VaultType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "VAULT_TYPE_UNSPECIFIED",
            Self::Clob => "VAULT_TYPE_CLOB",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VAULT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "VAULT_TYPE_CLOB" => Some(Self::Clob),
            _ => None,
        }
    }
}
/// VaultStatus represents the status of a vault.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VaultStatus {
    /// Default value, invalid and unused.
    Unspecified = 0,
    /// Don’t place orders. Does not count toward global vault balances.
    /// A vault can only be set to this status if its equity is non-positive.
    Deactivated = 1,
    /// Don’t place orders. Does count towards global vault balances.
    StandBy = 2,
    /// Places orders on both sides of the book.
    Quoting = 3,
    /// Only place orders that close the position.
    CloseOnly = 4,
}
impl VaultStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "VAULT_STATUS_UNSPECIFIED",
            Self::Deactivated => "VAULT_STATUS_DEACTIVATED",
            Self::StandBy => "VAULT_STATUS_STAND_BY",
            Self::Quoting => "VAULT_STATUS_QUOTING",
            Self::CloseOnly => "VAULT_STATUS_CLOSE_ONLY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VAULT_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "VAULT_STATUS_DEACTIVATED" => Some(Self::Deactivated),
            "VAULT_STATUS_STAND_BY" => Some(Self::StandBy),
            "VAULT_STATUS_QUOTING" => Some(Self::Quoting),
            "VAULT_STATUS_CLOSE_ONLY" => Some(Self::CloseOnly),
            _ => None,
        }
    }
}
/// QuotingParams stores vault quoting parameters.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotingParams {
    /// The number of layers of orders a vault places. For example if
    /// `layers=2`, a vault places 2 asks and 2 bids.
    #[prost(uint32, tag = "1")]
    pub layers: u32,
    /// The minimum base spread when a vault quotes around reservation price.
    #[prost(uint32, tag = "2")]
    pub spread_min_ppm: u32,
    /// The buffer amount to add to min_price_change_ppm to arrive at `spread`
    /// according to formula:
    /// `spread = max(spread_min_ppm, min_price_change_ppm + spread_buffer_ppm)`.
    #[prost(uint32, tag = "3")]
    pub spread_buffer_ppm: u32,
    /// The factor that determines how aggressive a vault skews its orders.
    #[prost(uint32, tag = "4")]
    pub skew_factor_ppm: u32,
    /// The percentage of vault equity that each order is sized at.
    #[prost(uint32, tag = "5")]
    pub order_size_pct_ppm: u32,
    /// The duration that a vault's orders are valid for.
    #[prost(uint32, tag = "6")]
    pub order_expiration_seconds: u32,
    /// The number of quote quantums in quote asset that a vault with no perpetual
    /// positions must have to activate, i.e. if a vault has no perpetual positions
    /// and has strictly less than this amount of quote asset, it will not
    /// activate.
    #[prost(bytes = "vec", tag = "7")]
    pub activation_threshold_quote_quantums: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for QuotingParams {
    const NAME: &'static str = "QuotingParams";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QuotingParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QuotingParams".into()
    }
}
/// VaultParams stores vault parameters.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VaultParams {
    /// Status of the vault.
    #[prost(enumeration = "VaultStatus", tag = "1")]
    pub status: i32,
    /// Quoting parameters of the vault.
    #[prost(message, optional, tag = "2")]
    pub quoting_params: ::core::option::Option<QuotingParams>,
}
impl ::prost::Name for VaultParams {
    const NAME: &'static str = "VaultParams";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.VaultParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.VaultParams".into()
    }
}
/// OperatorParams stores parameters regarding megavault operator.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperatorParams {
    /// Address of the operator.
    #[prost(string, tag = "1")]
    pub operator: ::prost::alloc::string::String,
    /// Metadata of the operator.
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<OperatorMetadata>,
}
impl ::prost::Name for OperatorParams {
    const NAME: &'static str = "OperatorParams";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.OperatorParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.OperatorParams".into()
    }
}
/// OperatorMetadata stores metadata regarding megavault operator.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperatorMetadata {
    /// Name of the operator.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Description of the operator.
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
}
impl ::prost::Name for OperatorMetadata {
    const NAME: &'static str = "OperatorMetadata";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.OperatorMetadata".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.OperatorMetadata".into()
    }
}
/// Deprecated: Params stores `x/vault` parameters.
/// Deprecated since v6.x as is replaced by QuotingParams.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// The number of layers of orders a vault places. For example if
    /// `layers=2`, a vault places 2 asks and 2 bids.
    #[prost(uint32, tag = "1")]
    pub layers: u32,
    /// The minimum base spread when a vault quotes around reservation price.
    #[prost(uint32, tag = "2")]
    pub spread_min_ppm: u32,
    /// The buffer amount to add to min_price_change_ppm to arrive at `spread`
    /// according to formula:
    /// `spread = max(spread_min_ppm, min_price_change_ppm + spread_buffer_ppm)`.
    #[prost(uint32, tag = "3")]
    pub spread_buffer_ppm: u32,
    /// The factor that determines how aggressive a vault skews its orders.
    #[prost(uint32, tag = "4")]
    pub skew_factor_ppm: u32,
    /// The percentage of vault equity that each order is sized at.
    #[prost(uint32, tag = "5")]
    pub order_size_pct_ppm: u32,
    /// The duration that a vault's orders are valid for.
    #[prost(uint32, tag = "6")]
    pub order_expiration_seconds: u32,
    /// The number of quote quantums in quote asset that a vault with no perpetual
    /// positions must have to activate, i.e. if a vault has no perpetual positions
    /// and has strictly less than this amount of quote asset, it will not
    /// activate.
    #[prost(bytes = "vec", tag = "7")]
    pub activation_threshold_quote_quantums: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.Params".into()
    }
}
/// NumShares represents the number of shares.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumShares {
    /// Number of shares.
    #[prost(bytes = "vec", tag = "2")]
    pub num_shares: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for NumShares {
    const NAME: &'static str = "NumShares";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.NumShares".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.NumShares".into()
    }
}
/// OwnerShare is a type for owner shares.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OwnerShare {
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub shares: ::core::option::Option<NumShares>,
}
impl ::prost::Name for OwnerShare {
    const NAME: &'static str = "OwnerShare";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.OwnerShare".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.OwnerShare".into()
    }
}
/// OwnerShareUnlocks stores share unlocks for an owner.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OwnerShareUnlocks {
    /// Address of the owner of below shares.
    #[prost(string, tag = "1")]
    pub owner_address: ::prost::alloc::string::String,
    /// All share unlocks.
    #[prost(message, repeated, tag = "2")]
    pub share_unlocks: ::prost::alloc::vec::Vec<ShareUnlock>,
}
impl ::prost::Name for OwnerShareUnlocks {
    const NAME: &'static str = "OwnerShareUnlocks";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.OwnerShareUnlocks".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.OwnerShareUnlocks".into()
    }
}
/// ShareUnlock stores a single instance of `shares` number of shares
/// unlocking at block height `unlock_block_height`.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShareUnlock {
    /// Number of shares to unlock.
    #[prost(message, optional, tag = "1")]
    pub shares: ::core::option::Option<NumShares>,
    /// Block height at which above shares unlock.
    #[prost(uint32, tag = "2")]
    pub unlock_block_height: u32,
}
impl ::prost::Name for ShareUnlock {
    const NAME: &'static str = "ShareUnlock";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.ShareUnlock".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.ShareUnlock".into()
    }
}
/// GenesisState defines `x/vault`'s genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// The total number of shares, including any locked ones.
    #[prost(message, optional, tag = "1")]
    pub total_shares: ::core::option::Option<NumShares>,
    /// The shares of each owner, including any locked ones.
    #[prost(message, repeated, tag = "2")]
    pub owner_shares: ::prost::alloc::vec::Vec<OwnerShare>,
    /// The vaults.
    #[prost(message, repeated, tag = "3")]
    pub vaults: ::prost::alloc::vec::Vec<Vault>,
    /// The default quoting parameters for all vaults.
    #[prost(message, optional, tag = "4")]
    pub default_quoting_params: ::core::option::Option<QuotingParams>,
    /// All owner share unlocks.
    #[prost(message, repeated, tag = "5")]
    pub all_owner_share_unlocks: ::prost::alloc::vec::Vec<OwnerShareUnlocks>,
    /// The parameters regarding megavault operator.
    #[prost(message, optional, tag = "6")]
    pub operator_params: ::core::option::Option<OperatorParams>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.GenesisState".into()
    }
}
/// Vault defines the state of a vault.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Vault {
    /// The ID of the vault.
    #[prost(message, optional, tag = "1")]
    pub vault_id: ::core::option::Option<VaultId>,
    /// The parameters of the vault.
    #[prost(message, optional, tag = "2")]
    pub vault_params: ::core::option::Option<VaultParams>,
    /// The client IDs of the most recently placed orders of the vault.
    #[prost(uint32, repeated, tag = "3")]
    pub most_recent_client_ids: ::prost::alloc::vec::Vec<u32>,
}
impl ::prost::Name for Vault {
    const NAME: &'static str = "Vault";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.Vault".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.Vault".into()
    }
}
/// GenesisStateV6 defines `x/vault`'s genesis state in v6.x.
/// Deprecated since v7.x in favor of GenesisState.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisStateV6 {
    /// The vaults.
    #[prost(message, repeated, tag = "2")]
    pub vaults: ::prost::alloc::vec::Vec<Vault>,
    /// The default quoting parameters for all vaults.
    #[prost(message, optional, tag = "3")]
    pub default_quoting_params: ::core::option::Option<QuotingParams>,
}
impl ::prost::Name for GenesisStateV6 {
    const NAME: &'static str = "GenesisStateV6";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.GenesisStateV6".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.GenesisStateV6".into()
    }
}
/// VaultV6 defines the state of a vault.
/// Deprecated since v7.x in favor of Vault.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VaultV6 {
    /// The ID of the vault.
    #[prost(message, optional, tag = "1")]
    pub vault_id: ::core::option::Option<VaultId>,
    /// The total number of shares in the vault.
    #[prost(message, optional, tag = "2")]
    pub total_shares: ::core::option::Option<NumShares>,
    /// The shares of each owner in the vault.
    #[prost(message, repeated, tag = "3")]
    pub owner_shares: ::prost::alloc::vec::Vec<OwnerShare>,
    /// The parameters of the vault.
    #[prost(message, optional, tag = "4")]
    pub vault_params: ::core::option::Option<VaultParams>,
    /// The client IDs of the most recently placed orders of the vault.
    #[prost(uint32, repeated, tag = "5")]
    pub most_recent_client_ids: ::prost::alloc::vec::Vec<u32>,
}
impl ::prost::Name for VaultV6 {
    const NAME: &'static str = "VaultV6";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.VaultV6".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.VaultV6".into()
    }
}
/// QueryParamsRequest is a request type for the Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is a response type for the Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub default_quoting_params: ::core::option::Option<QuotingParams>,
    #[prost(message, optional, tag = "2")]
    pub operator_params: ::core::option::Option<OperatorParams>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryParamsResponse".into()
    }
}
/// QueryVaultRequest is a request type for the Vault RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryVaultRequest {
    #[prost(enumeration = "VaultType", tag = "1")]
    pub r#type: i32,
    #[prost(uint32, tag = "2")]
    pub number: u32,
}
impl ::prost::Name for QueryVaultRequest {
    const NAME: &'static str = "QueryVaultRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryVaultRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryVaultRequest".into()
    }
}
/// QueryVaultResponse is a response type for the Vault RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVaultResponse {
    #[prost(message, optional, tag = "1")]
    pub vault_id: ::core::option::Option<VaultId>,
    #[prost(message, optional, tag = "2")]
    pub subaccount_id: ::core::option::Option<super::subaccounts::SubaccountId>,
    #[prost(bytes = "vec", tag = "3")]
    pub equity: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub inventory: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "5")]
    pub vault_params: ::core::option::Option<VaultParams>,
    #[prost(uint32, repeated, tag = "6")]
    pub most_recent_client_ids: ::prost::alloc::vec::Vec<u32>,
}
impl ::prost::Name for QueryVaultResponse {
    const NAME: &'static str = "QueryVaultResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryVaultResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryVaultResponse".into()
    }
}
/// QueryAllVaultsRequest is a request type for the AllVaults RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllVaultsRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryAllVaultsRequest {
    const NAME: &'static str = "QueryAllVaultsRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryAllVaultsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryAllVaultsRequest".into()
    }
}
/// QueryAllVaultsResponse is a response type for the AllVaults RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllVaultsResponse {
    #[prost(message, repeated, tag = "1")]
    pub vaults: ::prost::alloc::vec::Vec<QueryVaultResponse>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryAllVaultsResponse {
    const NAME: &'static str = "QueryAllVaultsResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryAllVaultsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryAllVaultsResponse".into()
    }
}
/// QueryMegavaultTotalSharesRequest is a request type for the
/// MegavaultTotalShares RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryMegavaultTotalSharesRequest {}
impl ::prost::Name for QueryMegavaultTotalSharesRequest {
    const NAME: &'static str = "QueryMegavaultTotalSharesRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryMegavaultTotalSharesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryMegavaultTotalSharesRequest".into()
    }
}
/// QueryMegavaultTotalSharesResponse is a response type for the
/// MegavaultTotalShares RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryMegavaultTotalSharesResponse {
    #[prost(message, optional, tag = "1")]
    pub total_shares: ::core::option::Option<NumShares>,
}
impl ::prost::Name for QueryMegavaultTotalSharesResponse {
    const NAME: &'static str = "QueryMegavaultTotalSharesResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryMegavaultTotalSharesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryMegavaultTotalSharesResponse".into()
    }
}
/// QueryMegavaultOwnerSharesRequest is a request type for the
/// MegavaultOwnerShares RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryMegavaultOwnerSharesRequest {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryMegavaultOwnerSharesRequest {
    const NAME: &'static str = "QueryMegavaultOwnerSharesRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryMegavaultOwnerSharesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryMegavaultOwnerSharesRequest".into()
    }
}
/// QueryMegavaultOwnerSharesResponse is a response type for the
/// MegavaultOwnerShares RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryMegavaultOwnerSharesResponse {
    /// Owner address.
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// Total number of shares that belong to the owner.
    #[prost(message, optional, tag = "2")]
    pub shares: ::core::option::Option<NumShares>,
    /// All share unlocks.
    #[prost(message, repeated, tag = "3")]
    pub share_unlocks: ::prost::alloc::vec::Vec<ShareUnlock>,
    /// Owner equity in megavault (in quote quantums).
    #[prost(bytes = "vec", tag = "4")]
    pub equity: ::prost::alloc::vec::Vec<u8>,
    /// Equity that owner can withdraw in quote quantums (as one cannot
    /// withdraw locked shares).
    #[prost(bytes = "vec", tag = "5")]
    pub withdrawable_equity: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for QueryMegavaultOwnerSharesResponse {
    const NAME: &'static str = "QueryMegavaultOwnerSharesResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryMegavaultOwnerSharesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryMegavaultOwnerSharesResponse".into()
    }
}
/// QueryMegavaultAllOwnerSharesRequest is a request type for the
/// MegavaultAllOwnerShares RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryMegavaultAllOwnerSharesRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryMegavaultAllOwnerSharesRequest {
    const NAME: &'static str = "QueryMegavaultAllOwnerSharesRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryMegavaultAllOwnerSharesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryMegavaultAllOwnerSharesRequest".into()
    }
}
/// QueryMegavaultAllOwnerSharesResponse is a response type for the
/// MegavaultAllOwnerShares RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryMegavaultAllOwnerSharesResponse {
    #[prost(message, repeated, tag = "1")]
    pub owner_shares: ::prost::alloc::vec::Vec<OwnerShare>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryMegavaultAllOwnerSharesResponse {
    const NAME: &'static str = "QueryMegavaultAllOwnerSharesResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryMegavaultAllOwnerSharesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryMegavaultAllOwnerSharesResponse".into()
    }
}
/// QueryVaultParamsRequest is a request for the VaultParams RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryVaultParamsRequest {
    #[prost(enumeration = "VaultType", tag = "1")]
    pub r#type: i32,
    #[prost(uint32, tag = "2")]
    pub number: u32,
}
impl ::prost::Name for QueryVaultParamsRequest {
    const NAME: &'static str = "QueryVaultParamsRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryVaultParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryVaultParamsRequest".into()
    }
}
/// QueryVaultParamsResponse is a response for the VaultParams RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVaultParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub vault_id: ::core::option::Option<VaultId>,
    #[prost(message, optional, tag = "2")]
    pub vault_params: ::core::option::Option<VaultParams>,
}
impl ::prost::Name for QueryVaultParamsResponse {
    const NAME: &'static str = "QueryVaultParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryVaultParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryVaultParamsResponse".into()
    }
}
/// QueryMegavaultWithdrawalInfoRequest is a request type for the
/// MegavaultWithdrawalInfo RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryMegavaultWithdrawalInfoRequest {
    /// Number of shares to withdraw.
    #[prost(message, optional, tag = "1")]
    pub shares_to_withdraw: ::core::option::Option<NumShares>,
}
impl ::prost::Name for QueryMegavaultWithdrawalInfoRequest {
    const NAME: &'static str = "QueryMegavaultWithdrawalInfoRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryMegavaultWithdrawalInfoRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryMegavaultWithdrawalInfoRequest".into()
    }
}
/// QueryMegavaultWithdrawalInfoResponse is a response type for the
/// MegavaultWithdrawalInfo RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryMegavaultWithdrawalInfoResponse {
    /// Number of shares to withdraw.
    #[prost(message, optional, tag = "1")]
    pub shares_to_withdraw: ::core::option::Option<NumShares>,
    /// Number of quote quantums above `shares` are expected to redeem.
    /// Withdrawl slippage can be calculated by comparing
    /// `expected_quote_quantums` with
    /// `megavault_equity * shares_to_withdraw / total_shares`
    #[prost(bytes = "vec", tag = "2")]
    pub expected_quote_quantums: ::prost::alloc::vec::Vec<u8>,
    /// Equity of megavault (in quote quantums).
    #[prost(bytes = "vec", tag = "3")]
    pub megavault_equity: ::prost::alloc::vec::Vec<u8>,
    /// Total shares in megavault.
    #[prost(message, optional, tag = "4")]
    pub total_shares: ::core::option::Option<NumShares>,
}
impl ::prost::Name for QueryMegavaultWithdrawalInfoResponse {
    const NAME: &'static str = "QueryMegavaultWithdrawalInfoResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryMegavaultWithdrawalInfoResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryMegavaultWithdrawalInfoResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "grpc-transport")]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Queries the Params.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries a Vault by type and number.
        pub async fn vault(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryVaultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryVaultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/Vault",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Query", "Vault"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries all vaults.
        pub async fn all_vaults(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllVaultsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllVaultsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/AllVaults",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Query", "AllVaults"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries total shares of megavault.
        pub async fn megavault_total_shares(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryMegavaultTotalSharesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryMegavaultTotalSharesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/MegavaultTotalShares",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.vault.Query", "MegavaultTotalShares"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries owner shares of megavault.
        pub async fn megavault_owner_shares(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryMegavaultOwnerSharesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryMegavaultOwnerSharesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/MegavaultOwnerShares",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.vault.Query", "MegavaultOwnerShares"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries all owner shares of megavault.
        pub async fn megavault_all_owner_shares(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryMegavaultAllOwnerSharesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryMegavaultAllOwnerSharesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/MegavaultAllOwnerShares",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.vault.Query",
                        "MegavaultAllOwnerShares",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries vault params of a vault.
        pub async fn vault_params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryVaultParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryVaultParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/VaultParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Query", "VaultParams"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries withdrawal info for megavault.
        pub async fn megavault_withdrawal_info(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryMegavaultWithdrawalInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryMegavaultWithdrawalInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/MegavaultWithdrawalInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.vault.Query",
                        "MegavaultWithdrawalInfo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// MsgDepositToMegavault deposits the specified asset from the subaccount to
/// megavault.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDepositToMegavault {
    /// The subaccount to deposit from.
    #[prost(message, optional, tag = "1")]
    pub subaccount_id: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// Number of quote quantums to deposit.
    #[prost(bytes = "vec", tag = "2")]
    pub quote_quantums: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for MsgDepositToMegavault {
    const NAME: &'static str = "MsgDepositToMegavault";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgDepositToMegavault".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgDepositToMegavault".into()
    }
}
/// MsgDepositToMegavaultResponse is the Msg/DepositToMegavault response type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDepositToMegavaultResponse {
    /// The number of shares minted from the deposit.
    #[prost(message, optional, tag = "1")]
    pub minted_shares: ::core::option::Option<NumShares>,
}
impl ::prost::Name for MsgDepositToMegavaultResponse {
    const NAME: &'static str = "MsgDepositToMegavaultResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgDepositToMegavaultResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgDepositToMegavaultResponse".into()
    }
}
/// MsgWithdrawFromMegavault withdraws the specified shares from megavault to
/// a subaccount.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawFromMegavault {
    /// The subaccount to withdraw to.
    #[prost(message, optional, tag = "1")]
    pub subaccount_id: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// Number of shares to withdraw.
    #[prost(message, optional, tag = "2")]
    pub shares: ::core::option::Option<NumShares>,
    /// The minimum number of quote quantums above shares should redeem, i.e.
    /// transaction fails if above shares redeem less than min_quote_quantums.
    #[prost(bytes = "vec", tag = "3")]
    pub min_quote_quantums: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for MsgWithdrawFromMegavault {
    const NAME: &'static str = "MsgWithdrawFromMegavault";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgWithdrawFromMegavault".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgWithdrawFromMegavault".into()
    }
}
/// MsgWithdrawFromMegavaultResponse is the Msg/WithdrawFromMegavault response
/// type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawFromMegavaultResponse {
    /// The number of quote quantums redeemed from the withdrawal.
    #[prost(bytes = "vec", tag = "1")]
    pub quote_quantums: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for MsgWithdrawFromMegavaultResponse {
    const NAME: &'static str = "MsgWithdrawFromMegavaultResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgWithdrawFromMegavaultResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgWithdrawFromMegavaultResponse".into()
    }
}
/// MsgUpdateDefaultQuotingParams is the Msg/UpdateDefaultQuotingParams request
/// type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateDefaultQuotingParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The quoting parameters to update to. Every field must be set.
    #[prost(message, optional, tag = "2")]
    pub default_quoting_params: ::core::option::Option<QuotingParams>,
}
impl ::prost::Name for MsgUpdateDefaultQuotingParams {
    const NAME: &'static str = "MsgUpdateDefaultQuotingParams";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgUpdateDefaultQuotingParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgUpdateDefaultQuotingParams".into()
    }
}
/// MsgUpdateDefaultQuotingParamsResponse is the Msg/UpdateDefaultQuotingParams
/// response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateDefaultQuotingParamsResponse {}
impl ::prost::Name for MsgUpdateDefaultQuotingParamsResponse {
    const NAME: &'static str = "MsgUpdateDefaultQuotingParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgUpdateDefaultQuotingParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgUpdateDefaultQuotingParamsResponse".into()
    }
}
/// MsgSetVaultParams is the Msg/SetVaultParams request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetVaultParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The vault to set params of.
    #[prost(message, optional, tag = "2")]
    pub vault_id: ::core::option::Option<VaultId>,
    /// The parameters to set.
    #[prost(message, optional, tag = "3")]
    pub vault_params: ::core::option::Option<VaultParams>,
}
impl ::prost::Name for MsgSetVaultParams {
    const NAME: &'static str = "MsgSetVaultParams";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgSetVaultParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgSetVaultParams".into()
    }
}
/// MsgSetVaultParamsResponse is the Msg/SetVaultParams response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetVaultParamsResponse {}
impl ::prost::Name for MsgSetVaultParamsResponse {
    const NAME: &'static str = "MsgSetVaultParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgSetVaultParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgSetVaultParamsResponse".into()
    }
}
/// MsgUnlockShares is the Msg/UnlockShares request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUnlockShares {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Address of the owner to unlock shares of.
    #[prost(string, tag = "2")]
    pub owner_address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgUnlockShares {
    const NAME: &'static str = "MsgUnlockShares";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgUnlockShares".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgUnlockShares".into()
    }
}
/// MsgUnlockSharesResponse is the Msg/UnlockShares response type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUnlockSharesResponse {
    /// The number of shares unlocked.
    #[prost(message, optional, tag = "1")]
    pub unlocked_shares: ::core::option::Option<NumShares>,
}
impl ::prost::Name for MsgUnlockSharesResponse {
    const NAME: &'static str = "MsgUnlockSharesResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgUnlockSharesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgUnlockSharesResponse".into()
    }
}
/// MsgUpdateOperatorParams is the Msg/UpdateOperatorParams request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateOperatorParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Operator parameters to set.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<OperatorParams>,
}
impl ::prost::Name for MsgUpdateOperatorParams {
    const NAME: &'static str = "MsgUpdateOperatorParams";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgUpdateOperatorParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgUpdateOperatorParams".into()
    }
}
/// MsgUpdateVaultParamsResponse is the Msg/UpdateOperatorParams response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateOperatorParamsResponse {}
impl ::prost::Name for MsgUpdateOperatorParamsResponse {
    const NAME: &'static str = "MsgUpdateOperatorParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgUpdateOperatorParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgUpdateOperatorParamsResponse".into()
    }
}
/// MsgAllocateToVault is the Msg/AllocateToVault request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAllocateToVault {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The vault to allocate to.
    #[prost(message, optional, tag = "2")]
    pub vault_id: ::core::option::Option<VaultId>,
    /// Number of quote quantums to allocate.
    #[prost(bytes = "vec", tag = "3")]
    pub quote_quantums: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for MsgAllocateToVault {
    const NAME: &'static str = "MsgAllocateToVault";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgAllocateToVault".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgAllocateToVault".into()
    }
}
/// MsgAllocateToVaultResponse is the Msg/AllocateToVault response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgAllocateToVaultResponse {}
impl ::prost::Name for MsgAllocateToVaultResponse {
    const NAME: &'static str = "MsgAllocateToVaultResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgAllocateToVaultResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgAllocateToVaultResponse".into()
    }
}
/// MsgRetrieveFromVault is the Msg/RetrieveFromVault request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRetrieveFromVault {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The vault to retrieve from.
    #[prost(message, optional, tag = "2")]
    pub vault_id: ::core::option::Option<VaultId>,
    /// Number of quote quantums to retrieve.
    #[prost(bytes = "vec", tag = "3")]
    pub quote_quantums: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for MsgRetrieveFromVault {
    const NAME: &'static str = "MsgRetrieveFromVault";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgRetrieveFromVault".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgRetrieveFromVault".into()
    }
}
/// MsgRetrieveFromVaultResponse is the Msg/RetrieveFromVault response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgRetrieveFromVaultResponse {}
impl ::prost::Name for MsgRetrieveFromVaultResponse {
    const NAME: &'static str = "MsgRetrieveFromVaultResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgRetrieveFromVaultResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgRetrieveFromVaultResponse".into()
    }
}
/// MsgUpdateParams is the Msg/UpdateParams request type.
/// Deprecated since v6.x as is replaced by MsgUpdateDefaultQuotingParams.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The parameters to update. Each field must be set.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgUpdateParams".into()
    }
}
/// MsgSetVaultQuotingParams is the Msg/SetVaultQuotingParams request type.
/// Deprecated since v6.x as is replaced by MsgSetVaultParams.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetVaultQuotingParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The vault to set quoting params of.
    #[prost(message, optional, tag = "2")]
    pub vault_id: ::core::option::Option<VaultId>,
    /// The quoting parameters to set. Each field must be set.
    #[prost(message, optional, tag = "3")]
    pub quoting_params: ::core::option::Option<QuotingParams>,
}
impl ::prost::Name for MsgSetVaultQuotingParams {
    const NAME: &'static str = "MsgSetVaultQuotingParams";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgSetVaultQuotingParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgSetVaultQuotingParams".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "grpc-transport")]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// DepositToMegavault deposits funds into megavault.
        pub async fn deposit_to_megavault(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgDepositToMegavault>,
        ) -> std::result::Result<
            tonic::Response<super::MsgDepositToMegavaultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Msg/DepositToMegavault",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Msg", "DepositToMegavault"));
            self.inner.unary(req, path, codec).await
        }
        /// WithdrawFromMegavault withdraws shares from megavault.
        pub async fn withdraw_from_megavault(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgWithdrawFromMegavault>,
        ) -> std::result::Result<
            tonic::Response<super::MsgWithdrawFromMegavaultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Msg/WithdrawFromMegavault",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.vault.Msg", "WithdrawFromMegavault"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateDefaultQuotingParams updates the default quoting params in state.
        pub async fn update_default_quoting_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateDefaultQuotingParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateDefaultQuotingParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Msg/UpdateDefaultQuotingParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.vault.Msg",
                        "UpdateDefaultQuotingParams",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateOperatorParams sets the parameters regarding megavault operator.
        pub async fn update_operator_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateOperatorParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateOperatorParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Msg/UpdateOperatorParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.vault.Msg", "UpdateOperatorParams"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SetVaultParams sets the parameters of a specific vault.
        pub async fn set_vault_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSetVaultParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSetVaultParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Msg/SetVaultParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Msg", "SetVaultParams"));
            self.inner.unary(req, path, codec).await
        }
        /// UnlockShares unlocks an owner's shares that are due to unlock by the block
        /// height that this transaction is included in.
        pub async fn unlock_shares(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUnlockShares>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUnlockSharesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Msg/UnlockShares",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Msg", "UnlockShares"));
            self.inner.unary(req, path, codec).await
        }
        /// AllocateToVault allocates funds from main vault to a vault.
        pub async fn allocate_to_vault(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgAllocateToVault>,
        ) -> std::result::Result<
            tonic::Response<super::MsgAllocateToVaultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Msg/AllocateToVault",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Msg", "AllocateToVault"));
            self.inner.unary(req, path, codec).await
        }
        /// RetrieveFromVault retrieves funds from a vault to main vault.
        pub async fn retrieve_from_vault(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgRetrieveFromVault>,
        ) -> std::result::Result<
            tonic::Response<super::MsgRetrieveFromVaultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Msg/RetrieveFromVault",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Msg", "RetrieveFromVault"));
            self.inner.unary(req, path, codec).await
        }
    }
}
