// This file is @generated by prost-build.
/// Params stores `x/vault` parameters.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// The number of layers of orders a vault places. For example if
    /// `layers=2`, a vault places 2 asks and 2 bids.
    #[prost(uint32, tag = "1")]
    pub layers: u32,
    /// The minimum base spread when a vault quotes around reservation price.
    #[prost(uint32, tag = "2")]
    pub spread_min_ppm: u32,
    /// The buffer amount to add to min_price_change_ppm to arrive at `spread`
    /// according to formula:
    /// `spread = max(spread_min_ppm, min_price_change_ppm + spread_buffer_ppm)`.
    #[prost(uint32, tag = "3")]
    pub spread_buffer_ppm: u32,
    /// The factor that determines how aggressive a vault skews its orders.
    #[prost(uint32, tag = "4")]
    pub skew_factor_ppm: u32,
    /// The percentage of vault equity that each order is sized at.
    #[prost(uint32, tag = "5")]
    pub order_size_pct_ppm: u32,
    /// The duration that a vault's orders are valid for.
    #[prost(uint32, tag = "6")]
    pub order_expiration_seconds: u32,
    /// The number of quote quantums in quote asset that a vault with no perpetual
    /// positions must have to activate, i.e. if a vault has no perpetual positions
    /// and has strictly less than this amount of quote asset, it will not
    /// activate.
    #[prost(bytes = "vec", tag = "7")]
    pub activation_threshold_quote_quantums: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.Params".into()
    }
}
/// GenesisState defines `x/vault`'s genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// The parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.GenesisState".into()
    }
}
/// VaultId uniquely identifies a vault by its type and number.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VaultId {
    /// Type of the vault.
    #[prost(enumeration = "VaultType", tag = "1")]
    pub r#type: i32,
    /// Unique ID of the vault within above type.
    #[prost(uint32, tag = "2")]
    pub number: u32,
}
impl ::prost::Name for VaultId {
    const NAME: &'static str = "VaultId";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.VaultId".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.VaultId".into()
    }
}
/// NumShares represents the number of shares in a vault.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumShares {
    /// Number of shares.
    #[prost(bytes = "vec", tag = "2")]
    pub num_shares: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for NumShares {
    const NAME: &'static str = "NumShares";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.NumShares".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.NumShares".into()
    }
}
/// VaultType represents different types of vaults.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VaultType {
    /// Default value, invalid and unused.
    Unspecified = 0,
    /// Vault is associated with a CLOB pair.
    Clob = 1,
}
impl VaultType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            VaultType::Unspecified => "VAULT_TYPE_UNSPECIFIED",
            VaultType::Clob => "VAULT_TYPE_CLOB",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VAULT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "VAULT_TYPE_CLOB" => Some(Self::Clob),
            _ => None,
        }
    }
}
/// QueryParamsRequest is a request type for the Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is a response type for the Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryParamsResponse".into()
    }
}
/// QueryVaultRequest is a request type for the Vault RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVaultRequest {
    #[prost(enumeration = "VaultType", tag = "1")]
    pub r#type: i32,
    #[prost(uint32, tag = "2")]
    pub number: u32,
}
impl ::prost::Name for QueryVaultRequest {
    const NAME: &'static str = "QueryVaultRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryVaultRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryVaultRequest".into()
    }
}
/// QueryVaultResponse is a response type for the Vault RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVaultResponse {
    #[prost(message, optional, tag = "1")]
    pub vault_id: ::core::option::Option<VaultId>,
    #[prost(message, optional, tag = "2")]
    pub subaccount_id: ::core::option::Option<super::subaccounts::SubaccountId>,
    #[prost(uint64, tag = "3")]
    pub equity: u64,
    #[prost(uint64, tag = "4")]
    pub inventory: u64,
    #[prost(uint64, tag = "5")]
    pub total_shares: u64,
}
impl ::prost::Name for QueryVaultResponse {
    const NAME: &'static str = "QueryVaultResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryVaultResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryVaultResponse".into()
    }
}
/// QueryAllVaultsRequest is a request type for the AllVaults RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllVaultsRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryAllVaultsRequest {
    const NAME: &'static str = "QueryAllVaultsRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryAllVaultsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryAllVaultsRequest".into()
    }
}
/// QueryAllVaultsResponse is a response type for the AllVaults RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllVaultsResponse {
    #[prost(message, repeated, tag = "1")]
    pub vaults: ::prost::alloc::vec::Vec<QueryVaultResponse>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryAllVaultsResponse {
    const NAME: &'static str = "QueryAllVaultsResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryAllVaultsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryAllVaultsResponse".into()
    }
}
/// QueryOwnerSharesRequest is a request type for the OwnerShares RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOwnerSharesRequest {
    #[prost(enumeration = "VaultType", tag = "1")]
    pub r#type: i32,
    #[prost(uint32, tag = "2")]
    pub number: u32,
    #[prost(message, optional, tag = "3")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryOwnerSharesRequest {
    const NAME: &'static str = "QueryOwnerSharesRequest";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryOwnerSharesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryOwnerSharesRequest".into()
    }
}
/// OwnerShare is a type for owner shares in a vault.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OwnerShare {
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub shares: ::core::option::Option<NumShares>,
}
impl ::prost::Name for OwnerShare {
    const NAME: &'static str = "OwnerShare";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.OwnerShare".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.OwnerShare".into()
    }
}
/// QueryOwnerSharesResponse is a response type for the OwnerShares RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOwnerSharesResponse {
    #[prost(message, repeated, tag = "1")]
    pub owner_shares: ::prost::alloc::vec::Vec<OwnerShare>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryOwnerSharesResponse {
    const NAME: &'static str = "QueryOwnerSharesResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.QueryOwnerSharesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.QueryOwnerSharesResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Queries the Params.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries a Vault by type and number.
        pub async fn vault(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryVaultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryVaultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/Vault",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Query", "Vault"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries all vaults.
        pub async fn all_vaults(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllVaultsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllVaultsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/AllVaults",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Query", "AllVaults"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries owner shares of a vault.
        pub async fn owner_shares(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryOwnerSharesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryOwnerSharesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Query/OwnerShares",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Query", "OwnerShares"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// MsgDepositToVault is the Msg/DepositToVault request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDepositToVault {
    /// The vault to deposit into.
    #[prost(message, optional, tag = "1")]
    pub vault_id: ::core::option::Option<VaultId>,
    /// The subaccount to deposit from.
    #[prost(message, optional, tag = "2")]
    pub subaccount_id: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// Number of quote quantums to deposit.
    #[prost(bytes = "vec", tag = "3")]
    pub quote_quantums: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for MsgDepositToVault {
    const NAME: &'static str = "MsgDepositToVault";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgDepositToVault".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgDepositToVault".into()
    }
}
/// MsgDepositToVaultResponse is the Msg/DepositToVault response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDepositToVaultResponse {}
impl ::prost::Name for MsgDepositToVaultResponse {
    const NAME: &'static str = "MsgDepositToVaultResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgDepositToVaultResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgDepositToVaultResponse".into()
    }
}
/// MsgUpdateParams is the Msg/UpdateParams request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The parameters to update. Each field must be set.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgUpdateParams".into()
    }
}
/// MsgUpdateParamsResponse is the Msg/UpdateParams response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.vault";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vault.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vault.MsgUpdateParamsResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// DepositToVault deposits funds into a vault.
        pub async fn deposit_to_vault(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgDepositToVault>,
        ) -> std::result::Result<
            tonic::Response<super::MsgDepositToVaultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Msg/DepositToVault",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Msg", "DepositToVault"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateParams updates the Params in state.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vault.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vault.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
    }
}
