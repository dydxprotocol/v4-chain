// This file is @generated by prost-build.
/// MarketMappeRevenueShareParams represents params for the above message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarketMapperRevenueShareParams {
    /// The address which will receive the revenue share payouts
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// The fraction of the fees which will go to the above mentioned address.
    /// In parts-per-million
    #[prost(uint32, tag = "2")]
    pub revenue_share_ppm: u32,
    /// This parameter defines how many days post market initiation will the
    /// revenue share be applied for. After valid_days from market initiation
    /// the revenue share goes down to 0
    #[prost(uint32, tag = "3")]
    pub valid_days: u32,
}
impl ::prost::Name for MarketMapperRevenueShareParams {
    const NAME: &'static str = "MarketMapperRevenueShareParams";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.MarketMapperRevenueShareParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.MarketMapperRevenueShareParams".into()
    }
}
/// GenesisState defines `x/revshare`'s genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<MarketMapperRevenueShareParams>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.GenesisState".into()
    }
}
/// MarketMapperRevShareDetails specifies any details associated with the market
/// mapper revenue share
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarketMapperRevShareDetails {
    /// Unix timestamp recorded when the market revenue share expires
    #[prost(uint64, tag = "1")]
    pub expiration_ts: u64,
}
impl ::prost::Name for MarketMapperRevShareDetails {
    const NAME: &'static str = "MarketMapperRevShareDetails";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.MarketMapperRevShareDetails".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.MarketMapperRevShareDetails".into()
    }
}
/// UnconditionalRevShareConfig stores recipients that
/// receive a share of net revenue unconditionally.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnconditionalRevShareConfig {
    /// Configs for each recipient.
    #[prost(message, repeated, tag = "1")]
    pub configs: ::prost::alloc::vec::Vec<
        unconditional_rev_share_config::RecipientConfig,
    >,
}
/// Nested message and enum types in `UnconditionalRevShareConfig`.
pub mod unconditional_rev_share_config {
    /// Describes the config of a recipient
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RecipientConfig {
        /// Address of the recepient.
        #[prost(string, tag = "1")]
        pub address: ::prost::alloc::string::String,
        /// Percentage of net revenue to share with recipient, in parts-per-million.
        #[prost(uint32, tag = "2")]
        pub share_ppm: u32,
    }
    impl ::prost::Name for RecipientConfig {
        const NAME: &'static str = "RecipientConfig";
        const PACKAGE: &'static str = "dydxprotocol.revshare";
        fn full_name() -> ::prost::alloc::string::String {
            "dydxprotocol.revshare.UnconditionalRevShareConfig.RecipientConfig".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/dydxprotocol.revshare.UnconditionalRevShareConfig.RecipientConfig".into()
        }
    }
}
impl ::prost::Name for UnconditionalRevShareConfig {
    const NAME: &'static str = "UnconditionalRevShareConfig";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.UnconditionalRevShareConfig".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.UnconditionalRevShareConfig".into()
    }
}
/// Message to set the order router revenue share
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderRouterRevShare {
    /// The address of the order router.
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// The share of the revenue to be paid to the order router.
    #[prost(uint32, tag = "2")]
    pub share_ppm: u32,
}
impl ::prost::Name for OrderRouterRevShare {
    const NAME: &'static str = "OrderRouterRevShare";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.OrderRouterRevShare".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.OrderRouterRevShare".into()
    }
}
/// Queries for the default market mapper revenue share params
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryMarketMapperRevenueShareParams {}
impl ::prost::Name for QueryMarketMapperRevenueShareParams {
    const NAME: &'static str = "QueryMarketMapperRevenueShareParams";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.QueryMarketMapperRevenueShareParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.QueryMarketMapperRevenueShareParams".into()
    }
}
/// Response type for QueryMarketMapperRevenueShareParams
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryMarketMapperRevenueShareParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<MarketMapperRevenueShareParams>,
}
impl ::prost::Name for QueryMarketMapperRevenueShareParamsResponse {
    const NAME: &'static str = "QueryMarketMapperRevenueShareParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.QueryMarketMapperRevenueShareParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.QueryMarketMapperRevenueShareParamsResponse".into()
    }
}
/// Queries market mapper revenue share details for a specific market
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryMarketMapperRevShareDetails {
    #[prost(uint32, tag = "1")]
    pub market_id: u32,
}
impl ::prost::Name for QueryMarketMapperRevShareDetails {
    const NAME: &'static str = "QueryMarketMapperRevShareDetails";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.QueryMarketMapperRevShareDetails".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.QueryMarketMapperRevShareDetails".into()
    }
}
/// Response type for QueryMarketMapperRevShareDetails
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryMarketMapperRevShareDetailsResponse {
    #[prost(message, optional, tag = "1")]
    pub details: ::core::option::Option<MarketMapperRevShareDetails>,
}
impl ::prost::Name for QueryMarketMapperRevShareDetailsResponse {
    const NAME: &'static str = "QueryMarketMapperRevShareDetailsResponse";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.QueryMarketMapperRevShareDetailsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.QueryMarketMapperRevShareDetailsResponse".into()
    }
}
/// Queries unconditional revenue share details
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryUnconditionalRevShareConfig {}
impl ::prost::Name for QueryUnconditionalRevShareConfig {
    const NAME: &'static str = "QueryUnconditionalRevShareConfig";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.QueryUnconditionalRevShareConfig".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.QueryUnconditionalRevShareConfig".into()
    }
}
/// Response type for QueryUnconditionalRevShareConfig
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryUnconditionalRevShareConfigResponse {
    #[prost(message, optional, tag = "1")]
    pub config: ::core::option::Option<UnconditionalRevShareConfig>,
}
impl ::prost::Name for QueryUnconditionalRevShareConfigResponse {
    const NAME: &'static str = "QueryUnconditionalRevShareConfigResponse";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.QueryUnconditionalRevShareConfigResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.QueryUnconditionalRevShareConfigResponse".into()
    }
}
/// Queries order router rev shares
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOrderRouterRevShare {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryOrderRouterRevShare {
    const NAME: &'static str = "QueryOrderRouterRevShare";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.QueryOrderRouterRevShare".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.QueryOrderRouterRevShare".into()
    }
}
/// Response type for QueryOrderRouterRevShare
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOrderRouterRevShareResponse {
    #[prost(message, optional, tag = "1")]
    pub order_router_rev_share: ::core::option::Option<OrderRouterRevShare>,
}
impl ::prost::Name for QueryOrderRouterRevShareResponse {
    const NAME: &'static str = "QueryOrderRouterRevShareResponse";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.QueryOrderRouterRevShareResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.QueryOrderRouterRevShareResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "grpc-transport")]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// MarketMapperRevenueShareParams queries the revenue share params for the
        /// market mapper
        pub async fn market_mapper_revenue_share_params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryMarketMapperRevenueShareParams>,
        ) -> std::result::Result<
            tonic::Response<super::QueryMarketMapperRevenueShareParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.revshare.Query/MarketMapperRevenueShareParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.revshare.Query",
                        "MarketMapperRevenueShareParams",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries market mapper revenue share details for a specific market
        pub async fn market_mapper_rev_share_details(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryMarketMapperRevShareDetails>,
        ) -> std::result::Result<
            tonic::Response<super::QueryMarketMapperRevShareDetailsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.revshare.Query/MarketMapperRevShareDetails",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.revshare.Query",
                        "MarketMapperRevShareDetails",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries unconditional revenue share config
        pub async fn unconditional_rev_share_config(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryUnconditionalRevShareConfig>,
        ) -> std::result::Result<
            tonic::Response<super::QueryUnconditionalRevShareConfigResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.revshare.Query/UnconditionalRevShareConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.revshare.Query",
                        "UnconditionalRevShareConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries order router rev share
        pub async fn order_router_rev_share(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryOrderRouterRevShare>,
        ) -> std::result::Result<
            tonic::Response<super::QueryOrderRouterRevShareResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.revshare.Query/OrderRouterRevShare",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.revshare.Query", "OrderRouterRevShare"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Message to set the market mapper revenue share
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetMarketMapperRevenueShare {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Parameters for the revenue share
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<MarketMapperRevenueShareParams>,
}
impl ::prost::Name for MsgSetMarketMapperRevenueShare {
    const NAME: &'static str = "MsgSetMarketMapperRevenueShare";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.MsgSetMarketMapperRevenueShare".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.MsgSetMarketMapperRevenueShare".into()
    }
}
/// Response to a MsgSetMarketMapperRevenueShare
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetMarketMapperRevenueShareResponse {}
impl ::prost::Name for MsgSetMarketMapperRevenueShareResponse {
    const NAME: &'static str = "MsgSetMarketMapperRevenueShareResponse";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.MsgSetMarketMapperRevenueShareResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.MsgSetMarketMapperRevenueShareResponse".into()
    }
}
/// Msg to set market mapper revenue share details (e.g. expiration timestamp)
/// for a specific market. To be used as an override for existing revenue share
/// settings set by the MsgSetMarketMapperRevenueShare msg
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetMarketMapperRevShareDetailsForMarket {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The market ID for which to set the revenue share details
    #[prost(uint32, tag = "2")]
    pub market_id: u32,
    /// Parameters for the revenue share details
    #[prost(message, optional, tag = "3")]
    pub params: ::core::option::Option<MarketMapperRevShareDetails>,
}
impl ::prost::Name for MsgSetMarketMapperRevShareDetailsForMarket {
    const NAME: &'static str = "MsgSetMarketMapperRevShareDetailsForMarket";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.MsgSetMarketMapperRevShareDetailsForMarket".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.MsgSetMarketMapperRevShareDetailsForMarket".into()
    }
}
/// Response to a MsgSetMarketMapperRevShareDetailsForMarket
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetMarketMapperRevShareDetailsForMarketResponse {}
impl ::prost::Name for MsgSetMarketMapperRevShareDetailsForMarketResponse {
    const NAME: &'static str = "MsgSetMarketMapperRevShareDetailsForMarketResponse";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.MsgSetMarketMapperRevShareDetailsForMarketResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.MsgSetMarketMapperRevShareDetailsForMarketResponse"
            .into()
    }
}
/// Message to update the unconditional revenue share config.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateUnconditionalRevShareConfig {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The config to update.
    #[prost(message, optional, tag = "2")]
    pub config: ::core::option::Option<UnconditionalRevShareConfig>,
}
impl ::prost::Name for MsgUpdateUnconditionalRevShareConfig {
    const NAME: &'static str = "MsgUpdateUnconditionalRevShareConfig";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.MsgUpdateUnconditionalRevShareConfig".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.MsgUpdateUnconditionalRevShareConfig".into()
    }
}
/// Response to MsgUpdateUnconditionalRevShareConfig
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateUnconditionalRevShareConfigResponse {}
impl ::prost::Name for MsgUpdateUnconditionalRevShareConfigResponse {
    const NAME: &'static str = "MsgUpdateUnconditionalRevShareConfigResponse";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.MsgUpdateUnconditionalRevShareConfigResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.MsgUpdateUnconditionalRevShareConfigResponse".into()
    }
}
/// Governance message to create or update the order router revenue share
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetOrderRouterRevShare {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The order router rev share to create or update.
    #[prost(message, optional, tag = "2")]
    pub order_router_rev_share: ::core::option::Option<OrderRouterRevShare>,
}
impl ::prost::Name for MsgSetOrderRouterRevShare {
    const NAME: &'static str = "MsgSetOrderRouterRevShare";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.MsgSetOrderRouterRevShare".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.MsgSetOrderRouterRevShare".into()
    }
}
/// Response to MsgSetOrderRouterRevShare
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetOrderRouterRevShareResponse {}
impl ::prost::Name for MsgSetOrderRouterRevShareResponse {
    const NAME: &'static str = "MsgSetOrderRouterRevShareResponse";
    const PACKAGE: &'static str = "dydxprotocol.revshare";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.revshare.MsgSetOrderRouterRevShareResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.revshare.MsgSetOrderRouterRevShareResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "grpc-transport")]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SetMarketMapperRevenueShare sets the revenue share for a market
        /// mapper.
        pub async fn set_market_mapper_revenue_share(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSetMarketMapperRevenueShare>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSetMarketMapperRevenueShareResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.revshare.Msg/SetMarketMapperRevenueShare",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.revshare.Msg",
                        "SetMarketMapperRevenueShare",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SetMarketMapperRevenueShareDetails sets the revenue share details for a
        /// market mapper.
        pub async fn set_market_mapper_rev_share_details_for_market(
            &mut self,
            request: impl tonic::IntoRequest<
                super::MsgSetMarketMapperRevShareDetailsForMarket,
            >,
        ) -> std::result::Result<
            tonic::Response<super::MsgSetMarketMapperRevShareDetailsForMarketResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.revshare.Msg/SetMarketMapperRevShareDetailsForMarket",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.revshare.Msg",
                        "SetMarketMapperRevShareDetailsForMarket",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateUnconditionalRevShareConfig sets the unconditional revshare config
        pub async fn update_unconditional_rev_share_config(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateUnconditionalRevShareConfig>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateUnconditionalRevShareConfigResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.revshare.Msg/UpdateUnconditionalRevShareConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.revshare.Msg",
                        "UpdateUnconditionalRevShareConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SetOrderRouterRevShare sets the revenue share for an order router.
        pub async fn set_order_router_rev_share(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSetOrderRouterRevShare>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSetOrderRouterRevShareResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.revshare.Msg/SetOrderRouterRevShare",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.revshare.Msg",
                        "SetOrderRouterRevShare",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
