// This file is @generated by prost-build.
/// Asset defines a single exchangable asset.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Asset {
    /// Unique, sequentially-generated.
    #[prost(uint32, tag = "1")]
    pub id: u32,
    /// The human readable symbol of the `Asset` (e.g. `USDC`, `ATOM`).
    /// Must be uppercase, unique and correspond to the canonical symbol of the
    /// full coin.
    #[prost(string, tag = "2")]
    pub symbol: ::prost::alloc::string::String,
    /// The name of base denomination unit of the `Asset` (e.g. `uatom`,
    /// 'ibc/xxxxx'). Must be unique and match the `denom` used in the `sdk.Coin`
    /// type in the `x/bank` module.
    #[prost(string, tag = "3")]
    pub denom: ::prost::alloc::string::String,
    /// The exponent of converting one unit of `denom` to a full coin.
    /// For example, `name=USDC, denom=uusdc, denom_exponent=-6` defines that
    /// `1 uusdc = 10^(-6) USDC`. Note that `uusdc` refers to a `Coin` type in
    /// `x/bank`, where the prefix `u` means `micro` by convetion. `uusdc` is
    /// a different concept from a "quantum" defined by `atomic_resolution` below.
    /// To convert from an amount of `denom` to quantums:
    /// `quantums = denom_amount * 10^(denom_exponent - atomic_resolution)`
    #[prost(sint32, tag = "4")]
    pub denom_exponent: i32,
    /// `true` if this `Asset` has a valid `MarketId` value.
    #[prost(bool, tag = "5")]
    pub has_market: bool,
    /// The `Id` of the `Market` associated with this `Asset`. It acts as the
    /// oracle price for the purposes of calculating collateral
    /// and margin requirements.
    #[prost(uint32, tag = "6")]
    pub market_id: u32,
    /// The exponent for converting an atomic amount (1 'quantum')
    /// to a full coin. For example, if `atomic_resolution = -8`
    /// then an `asset_position` with `base_quantums = 1e8` is equivalent to
    /// a position size of one full coin.
    #[prost(sint32, tag = "7")]
    pub atomic_resolution: i32,
}
impl ::prost::Name for Asset {
    const NAME: &'static str = "Asset";
    const PACKAGE: &'static str = "dydxprotocol.assets";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.assets.Asset".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.assets.Asset".into()
    }
}
/// GenesisState defines the assets module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(message, repeated, tag = "1")]
    pub assets: ::prost::alloc::vec::Vec<Asset>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "dydxprotocol.assets";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.assets.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.assets.GenesisState".into()
    }
}
/// Queries an Asset by id.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAssetRequest {
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
impl ::prost::Name for QueryAssetRequest {
    const NAME: &'static str = "QueryAssetRequest";
    const PACKAGE: &'static str = "dydxprotocol.assets";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.assets.QueryAssetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.assets.QueryAssetRequest".into()
    }
}
/// QueryAssetResponse is response type for the Asset RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAssetResponse {
    #[prost(message, optional, tag = "1")]
    pub asset: ::core::option::Option<Asset>,
}
impl ::prost::Name for QueryAssetResponse {
    const NAME: &'static str = "QueryAssetResponse";
    const PACKAGE: &'static str = "dydxprotocol.assets";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.assets.QueryAssetResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.assets.QueryAssetResponse".into()
    }
}
/// Queries a list of Asset items.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllAssetsRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryAllAssetsRequest {
    const NAME: &'static str = "QueryAllAssetsRequest";
    const PACKAGE: &'static str = "dydxprotocol.assets";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.assets.QueryAllAssetsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.assets.QueryAllAssetsRequest".into()
    }
}
/// QueryAllAssetsResponse is response type for the AllAssets RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllAssetsResponse {
    #[prost(message, repeated, tag = "1")]
    pub asset: ::prost::alloc::vec::Vec<Asset>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryAllAssetsResponse {
    const NAME: &'static str = "QueryAllAssetsResponse";
    const PACKAGE: &'static str = "dydxprotocol.assets";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.assets.QueryAllAssetsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.assets.QueryAllAssetsResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Queries a Asset by id.
        pub async fn asset(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAssetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAssetResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.assets.Query/Asset",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.assets.Query", "Asset"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries a list of Asset items.
        pub async fn all_assets(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllAssetsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllAssetsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.assets.Query/AllAssets",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.assets.Query", "AllAssets"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
    }
}
