// This file is @generated by prost-build.
/// Perpetual represents a perpetual on the dYdX exchange.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Perpetual {
    /// PerpetualParams is the parameters of the perpetual.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<PerpetualParams>,
    /// The current index determined by the cumulative all-time
    /// history of the funding mechanism. Starts at zero.
    #[prost(bytes = "vec", tag = "2")]
    pub funding_index: ::prost::alloc::vec::Vec<u8>,
    /// Total size of open long contracts, measured in base_quantums.
    #[prost(bytes = "vec", tag = "3")]
    pub open_interest: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for Perpetual {
    const NAME: &'static str = "Perpetual";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.Perpetual".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.Perpetual".into()
    }
}
/// PerpetualParams represents the parameters of a perpetual on the dYdX
/// exchange.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PerpetualParams {
    /// Unique, sequentially-generated.
    #[prost(uint32, tag = "1")]
    pub id: u32,
    /// The name of the `Perpetual` (e.g. `BTC-USD`).
    #[prost(string, tag = "2")]
    pub ticker: ::prost::alloc::string::String,
    /// The market associated with this `Perpetual`. It
    /// acts as the oracle price for the purposes of calculating
    /// collateral, margin requirements, and funding rates.
    #[prost(uint32, tag = "3")]
    pub market_id: u32,
    /// The exponent for converting an atomic amount (`size = 1`)
    /// to a full coin. For example, if `AtomicResolution = -8`
    /// then a `PerpetualPosition` with `size = 1e8` is equivalent to
    /// a position size of one full coin.
    #[prost(sint32, tag = "4")]
    pub atomic_resolution: i32,
    /// The default funding payment if there is no price premium. In
    /// parts-per-million.
    #[prost(sint32, tag = "5")]
    pub default_funding_ppm: i32,
    /// The liquidity_tier that this perpetual is associated with.
    #[prost(uint32, tag = "6")]
    pub liquidity_tier: u32,
    /// The market type specifying if this perpetual is cross or isolated
    #[prost(enumeration = "PerpetualMarketType", tag = "7")]
    pub market_type: i32,
}
impl ::prost::Name for PerpetualParams {
    const NAME: &'static str = "PerpetualParams";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.PerpetualParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.PerpetualParams".into()
    }
}
/// MarketPremiums stores a list of premiums for a single perpetual market.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarketPremiums {
    /// perpetual_id is the Id of the perpetual market.
    #[prost(uint32, tag = "1")]
    pub perpetual_id: u32,
    /// premiums is a list of premium values for a perpetual market. Since most
    /// premiums are zeros under "stable" market conditions, only non-zero values
    /// are stored in this list.
    #[prost(sint32, repeated, tag = "2")]
    pub premiums: ::prost::alloc::vec::Vec<i32>,
}
impl ::prost::Name for MarketPremiums {
    const NAME: &'static str = "MarketPremiums";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.MarketPremiums".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.MarketPremiums".into()
    }
}
/// PremiumStore is a struct to store a perpetual premiums for all
/// perpetual markets. It stores a list of `MarketPremiums`, each of which
/// corresponds to a perpetual market and stores a list of non-zero premium
/// values for that market.
/// This struct can either be used to store `PremiumVotes` or
/// `PremiumSamples`.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PremiumStore {
    /// all_market_premiums a list of `MarketPremiums`, each corresponding to
    /// a perpetual market.
    #[prost(message, repeated, tag = "1")]
    pub all_market_premiums: ::prost::alloc::vec::Vec<MarketPremiums>,
    /// number of rounds where premium values were added. This value indicates
    /// the total number of premiums (zeros and non-zeros) for each
    /// `MarketPremiums` struct. Note that in the edge case a perpetual market was
    /// added in the middle of a epoch, we don't keep a seperate count for that
    /// market. This means we treat this market as having zero premiums before it
    /// was added.
    #[prost(uint32, tag = "2")]
    pub num_premiums: u32,
}
impl ::prost::Name for PremiumStore {
    const NAME: &'static str = "PremiumStore";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.PremiumStore".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.PremiumStore".into()
    }
}
/// LiquidityTier stores margin information.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiquidityTier {
    /// Unique id.
    #[prost(uint32, tag = "1")]
    pub id: u32,
    /// The name of the tier purely for mnemonic purposes, e.g. "Gold".
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// The margin fraction needed to open a position.
    /// In parts-per-million.
    #[prost(uint32, tag = "3")]
    pub initial_margin_ppm: u32,
    /// The fraction of the initial-margin that the maintenance-margin is,
    /// e.g. 50%. In parts-per-million.
    #[prost(uint32, tag = "4")]
    pub maintenance_fraction_ppm: u32,
    /// The maximum position size at which the margin requirements are
    /// not increased over the default values. Above this position size,
    /// the margin requirements increase at a rate of sqrt(size).
    ///
    /// Deprecated since v3.x.
    #[deprecated]
    #[prost(uint64, tag = "5")]
    pub base_position_notional: u64,
    /// The impact notional amount (in quote quantums) is used to determine impact
    /// bid/ask prices and its recommended value is 500 USDC / initial margin
    /// fraction.
    /// - Impact bid price = average execution price for a market sell of the
    /// impact notional value.
    /// - Impact ask price = average execution price for a market buy of the
    /// impact notional value.
    #[prost(uint64, tag = "6")]
    pub impact_notional: u64,
    /// Lower cap for Open Interest Margin Fracton (OIMF), in quote quantums.
    /// IMF is not affected when OI <= open_interest_lower_cap.
    #[prost(uint64, tag = "7")]
    pub open_interest_lower_cap: u64,
    /// Upper cap for Open Interest Margin Fracton (OIMF), in quote quantums.
    /// IMF scales linearly to 100% as OI approaches open_interest_upper_cap.
    /// If zero, then the IMF does not scale with OI.
    #[prost(uint64, tag = "8")]
    pub open_interest_upper_cap: u64,
}
impl ::prost::Name for LiquidityTier {
    const NAME: &'static str = "LiquidityTier";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.LiquidityTier".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.LiquidityTier".into()
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PerpetualMarketType {
    /// Unspecified market type.
    Unspecified = 0,
    /// Market type for cross margin perpetual markets.
    Cross = 1,
    /// Market type for isolated margin perpetual markets.
    Isolated = 2,
}
impl PerpetualMarketType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PerpetualMarketType::Unspecified => "PERPETUAL_MARKET_TYPE_UNSPECIFIED",
            PerpetualMarketType::Cross => "PERPETUAL_MARKET_TYPE_CROSS",
            PerpetualMarketType::Isolated => "PERPETUAL_MARKET_TYPE_ISOLATED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PERPETUAL_MARKET_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "PERPETUAL_MARKET_TYPE_CROSS" => Some(Self::Cross),
            "PERPETUAL_MARKET_TYPE_ISOLATED" => Some(Self::Isolated),
            _ => None,
        }
    }
}
/// Params defines the parameters for x/perpetuals module.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// Funding rate clamp factor in parts-per-million, used for clamping 8-hour
    /// funding rates according to equation: |R| <= funding_rate_clamp_factor *
    /// (initial margin - maintenance margin).
    #[prost(uint32, tag = "1")]
    pub funding_rate_clamp_factor_ppm: u32,
    /// Premium vote clamp factor in parts-per-million, used for clamping premium
    /// votes according to equation: |V| <= premium_vote_clamp_factor *
    /// (initial margin - maintenance margin).
    #[prost(uint32, tag = "2")]
    pub premium_vote_clamp_factor_ppm: u32,
    /// Minimum number of premium votes per premium sample. If number of premium
    /// votes is smaller than this number, pad with zeros up to this number.
    #[prost(uint32, tag = "3")]
    pub min_num_votes_per_sample: u32,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.Params".into()
    }
}
/// GenesisState defines the perpetuals module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(message, repeated, tag = "1")]
    pub perpetuals: ::prost::alloc::vec::Vec<Perpetual>,
    #[prost(message, repeated, tag = "2")]
    pub liquidity_tiers: ::prost::alloc::vec::Vec<LiquidityTier>,
    #[prost(message, optional, tag = "3")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.GenesisState".into()
    }
}
/// Queries a Perpetual by id.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPerpetualRequest {
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
impl ::prost::Name for QueryPerpetualRequest {
    const NAME: &'static str = "QueryPerpetualRequest";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryPerpetualRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryPerpetualRequest".into()
    }
}
/// QueryPerpetualResponse is response type for the Perpetual RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPerpetualResponse {
    #[prost(message, optional, tag = "1")]
    pub perpetual: ::core::option::Option<Perpetual>,
}
impl ::prost::Name for QueryPerpetualResponse {
    const NAME: &'static str = "QueryPerpetualResponse";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryPerpetualResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryPerpetualResponse".into()
    }
}
/// Queries a list of Perpetual items.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllPerpetualsRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryAllPerpetualsRequest {
    const NAME: &'static str = "QueryAllPerpetualsRequest";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryAllPerpetualsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryAllPerpetualsRequest".into()
    }
}
/// QueryAllPerpetualsResponse is response type for the AllPerpetuals RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllPerpetualsResponse {
    #[prost(message, repeated, tag = "1")]
    pub perpetual: ::prost::alloc::vec::Vec<Perpetual>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryAllPerpetualsResponse {
    const NAME: &'static str = "QueryAllPerpetualsResponse";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryAllPerpetualsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryAllPerpetualsResponse".into()
    }
}
/// Queries a list of LiquidityTier items.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllLiquidityTiersRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryAllLiquidityTiersRequest {
    const NAME: &'static str = "QueryAllLiquidityTiersRequest";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryAllLiquidityTiersRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryAllLiquidityTiersRequest".into()
    }
}
/// QueryAllLiquidityTiersResponse is response type for the AllLiquidityTiers RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllLiquidityTiersResponse {
    #[prost(message, repeated, tag = "1")]
    pub liquidity_tiers: ::prost::alloc::vec::Vec<LiquidityTier>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryAllLiquidityTiersResponse {
    const NAME: &'static str = "QueryAllLiquidityTiersResponse";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryAllLiquidityTiersResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryAllLiquidityTiersResponse".into()
    }
}
/// QueryPremiumVotesRequest is the request type for the PremiumVotes RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPremiumVotesRequest {}
impl ::prost::Name for QueryPremiumVotesRequest {
    const NAME: &'static str = "QueryPremiumVotesRequest";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryPremiumVotesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryPremiumVotesRequest".into()
    }
}
/// QueryPremiumVotesResponse is the response type for the PremiumVotes RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPremiumVotesResponse {
    #[prost(message, optional, tag = "1")]
    pub premium_votes: ::core::option::Option<PremiumStore>,
}
impl ::prost::Name for QueryPremiumVotesResponse {
    const NAME: &'static str = "QueryPremiumVotesResponse";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryPremiumVotesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryPremiumVotesResponse".into()
    }
}
/// QueryPremiumSamplesRequest is the request type for the PremiumSamples RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPremiumSamplesRequest {}
impl ::prost::Name for QueryPremiumSamplesRequest {
    const NAME: &'static str = "QueryPremiumSamplesRequest";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryPremiumSamplesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryPremiumSamplesRequest".into()
    }
}
/// QueryPremiumSamplesResponse is the response type for the PremiumSamples RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPremiumSamplesResponse {
    #[prost(message, optional, tag = "1")]
    pub premium_samples: ::core::option::Option<PremiumStore>,
}
impl ::prost::Name for QueryPremiumSamplesResponse {
    const NAME: &'static str = "QueryPremiumSamplesResponse";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryPremiumSamplesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryPremiumSamplesResponse".into()
    }
}
/// QueryParamsResponse is the response type for the Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is the response type for the Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.QueryParamsResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Queries a Perpetual by id.
        pub async fn perpetual(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPerpetualRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPerpetualResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.perpetuals.Query/Perpetual",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.perpetuals.Query", "Perpetual"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries a list of Perpetual items.
        pub async fn all_perpetuals(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllPerpetualsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllPerpetualsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.perpetuals.Query/AllPerpetuals",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.perpetuals.Query", "AllPerpetuals"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries a list of LiquidityTiers.
        pub async fn all_liquidity_tiers(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllLiquidityTiersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllLiquidityTiersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.perpetuals.Query/AllLiquidityTiers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.perpetuals.Query", "AllLiquidityTiers"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries a list of premium votes.
        pub async fn premium_votes(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPremiumVotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPremiumVotesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.perpetuals.Query/PremiumVotes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.perpetuals.Query", "PremiumVotes"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries a list of premium samples.
        pub async fn premium_samples(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPremiumSamplesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPremiumSamplesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.perpetuals.Query/PremiumSamples",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.perpetuals.Query", "PremiumSamples"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries the perpetual params.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.perpetuals.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.perpetuals.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// MsgCreatePerpetual is a message used by x/gov to create a new perpetual.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreatePerpetual {
    /// The address that controls the module.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// `params` defines parameters for the new perpetual market.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<PerpetualParams>,
}
impl ::prost::Name for MsgCreatePerpetual {
    const NAME: &'static str = "MsgCreatePerpetual";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.MsgCreatePerpetual".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.MsgCreatePerpetual".into()
    }
}
/// MsgCreatePerpetualResponse defines the CreatePerpetual
/// response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreatePerpetualResponse {}
impl ::prost::Name for MsgCreatePerpetualResponse {
    const NAME: &'static str = "MsgCreatePerpetualResponse";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.MsgCreatePerpetualResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.MsgCreatePerpetualResponse".into()
    }
}
/// MsgSetLiquidityTier is a message used by x/gov to create or update a
/// liquidity tier.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetLiquidityTier {
    /// The address that controls the module.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The liquidity tier to create or update.
    #[prost(message, optional, tag = "2")]
    pub liquidity_tier: ::core::option::Option<LiquidityTier>,
}
impl ::prost::Name for MsgSetLiquidityTier {
    const NAME: &'static str = "MsgSetLiquidityTier";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.MsgSetLiquidityTier".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.MsgSetLiquidityTier".into()
    }
}
/// MsgSetLiquidityTierResponse defines the SetLiquidityTier response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetLiquidityTierResponse {}
impl ::prost::Name for MsgSetLiquidityTierResponse {
    const NAME: &'static str = "MsgSetLiquidityTierResponse";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.MsgSetLiquidityTierResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.MsgSetLiquidityTierResponse".into()
    }
}
/// MsgUpdatePerpetualParams is a message used by x/gov to update the parameters
/// of a perpetual.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdatePerpetualParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The perpetual to update. Each field must be set.
    #[prost(message, optional, tag = "2")]
    pub perpetual_params: ::core::option::Option<PerpetualParams>,
}
impl ::prost::Name for MsgUpdatePerpetualParams {
    const NAME: &'static str = "MsgUpdatePerpetualParams";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.MsgUpdatePerpetualParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.MsgUpdatePerpetualParams".into()
    }
}
/// MsgUpdatePerpetualParamsResponse defines the UpdatePerpetualParams
/// response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdatePerpetualParamsResponse {}
impl ::prost::Name for MsgUpdatePerpetualParamsResponse {
    const NAME: &'static str = "MsgUpdatePerpetualParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.MsgUpdatePerpetualParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.MsgUpdatePerpetualParamsResponse".into()
    }
}
/// FundingPremium represents a funding premium value for a perpetual
/// market. Can be used to represent a premium vote or a premium sample.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FundingPremium {
    /// The id of the perpetual market.
    #[prost(uint32, tag = "1")]
    pub perpetual_id: u32,
    /// The sampled premium rate. In parts-per-million.
    #[prost(int32, tag = "2")]
    pub premium_ppm: i32,
}
impl ::prost::Name for FundingPremium {
    const NAME: &'static str = "FundingPremium";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.FundingPremium".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.FundingPremium".into()
    }
}
/// MsgAddPremiumVotes is a request type for the AddPremiumVotes method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAddPremiumVotes {
    #[prost(message, repeated, tag = "1")]
    pub votes: ::prost::alloc::vec::Vec<FundingPremium>,
}
impl ::prost::Name for MsgAddPremiumVotes {
    const NAME: &'static str = "MsgAddPremiumVotes";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.MsgAddPremiumVotes".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.MsgAddPremiumVotes".into()
    }
}
/// MsgAddPremiumVotesResponse defines the AddPremiumVotes
/// response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAddPremiumVotesResponse {}
impl ::prost::Name for MsgAddPremiumVotesResponse {
    const NAME: &'static str = "MsgAddPremiumVotesResponse";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.MsgAddPremiumVotesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.MsgAddPremiumVotesResponse".into()
    }
}
/// MsgUpdateParams is a message used by x/gov to update the parameters of the
/// perpetuals module.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The parameters to update. Each field must be set.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.MsgUpdateParams".into()
    }
}
/// MsgUpdateParamsResponse defines the UpdateParams response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.perpetuals";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.perpetuals.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.perpetuals.MsgUpdateParamsResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// AddPremiumVotes add new samples of the funding premiums to the
        /// application.
        pub async fn add_premium_votes(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgAddPremiumVotes>,
        ) -> std::result::Result<
            tonic::Response<super::MsgAddPremiumVotesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.perpetuals.Msg/AddPremiumVotes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.perpetuals.Msg", "AddPremiumVotes"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CreatePerpetual creates a new perpetual object.
        pub async fn create_perpetual(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCreatePerpetual>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCreatePerpetualResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.perpetuals.Msg/CreatePerpetual",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.perpetuals.Msg", "CreatePerpetual"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SetLiquidityTier creates an liquidity tier if the ID doesn't exist, and
        /// updates the existing liquidity tier otherwise.
        pub async fn set_liquidity_tier(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSetLiquidityTier>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSetLiquidityTierResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.perpetuals.Msg/SetLiquidityTier",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.perpetuals.Msg", "SetLiquidityTier"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdatePerpetualParams updates the parameters of a perpetual market.
        pub async fn update_perpetual_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdatePerpetualParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdatePerpetualParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.perpetuals.Msg/UpdatePerpetualParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.perpetuals.Msg",
                        "UpdatePerpetualParams",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateParams updates the parameters of perpetuals module.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.perpetuals.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.perpetuals.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
    }
}
