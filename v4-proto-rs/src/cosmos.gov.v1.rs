// This file is @generated by prost-build.
/// WeightedVoteOption defines a unit of vote for vote split.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeightedVoteOption {
    /// option defines the valid vote options, it must not contain duplicate vote options.
    #[prost(enumeration = "VoteOption", tag = "1")]
    pub option: i32,
    /// weight is the vote weight associated with the vote option.
    #[prost(string, tag = "2")]
    pub weight: ::prost::alloc::string::String,
}
impl ::prost::Name for WeightedVoteOption {
    const NAME: &'static str = "WeightedVoteOption";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.WeightedVoteOption".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.WeightedVoteOption".into()
    }
}
/// Deposit defines an amount deposited by an account address to an active
/// proposal.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Deposit {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
    /// depositor defines the deposit addresses from the proposals.
    #[prost(string, tag = "2")]
    pub depositor: ::prost::alloc::string::String,
    /// amount to be deposited by depositor.
    #[prost(message, repeated, tag = "3")]
    pub amount: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
}
impl ::prost::Name for Deposit {
    const NAME: &'static str = "Deposit";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.Deposit".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.Deposit".into()
    }
}
/// Proposal defines the core field members of a governance proposal.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Proposal {
    /// id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// messages are the arbitrary messages to be executed if the proposal passes.
    #[prost(message, repeated, tag = "2")]
    pub messages: ::prost::alloc::vec::Vec<::prost_types::Any>,
    /// status defines the proposal status.
    #[prost(enumeration = "ProposalStatus", tag = "3")]
    pub status: i32,
    /// final_tally_result is the final tally result of the proposal. When
    /// querying a proposal via gRPC, this field is not populated until the
    /// proposal's voting period has ended.
    #[prost(message, optional, tag = "4")]
    pub final_tally_result: ::core::option::Option<TallyResult>,
    /// submit_time is the time of proposal submission.
    #[prost(message, optional, tag = "5")]
    pub submit_time: ::core::option::Option<::prost_types::Timestamp>,
    /// deposit_end_time is the end time for deposition.
    #[prost(message, optional, tag = "6")]
    pub deposit_end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// total_deposit is the total deposit on the proposal.
    #[prost(message, repeated, tag = "7")]
    pub total_deposit: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
    /// voting_start_time is the starting time to vote on a proposal.
    #[prost(message, optional, tag = "8")]
    pub voting_start_time: ::core::option::Option<::prost_types::Timestamp>,
    /// voting_end_time is the end time of voting on a proposal.
    #[prost(message, optional, tag = "9")]
    pub voting_end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// metadata is any arbitrary metadata attached to the proposal.
    /// the recommended format of the metadata is to be found here:
    /// <https://docs.cosmos.network/v0.47/modules/gov#proposal-3>
    #[prost(string, tag = "10")]
    pub metadata: ::prost::alloc::string::String,
    /// title is the title of the proposal
    ///
    /// Since: cosmos-sdk 0.47
    #[prost(string, tag = "11")]
    pub title: ::prost::alloc::string::String,
    /// summary is a short summary of the proposal
    ///
    /// Since: cosmos-sdk 0.47
    #[prost(string, tag = "12")]
    pub summary: ::prost::alloc::string::String,
    /// proposer is the address of the proposal sumbitter
    ///
    /// Since: cosmos-sdk 0.47
    #[prost(string, tag = "13")]
    pub proposer: ::prost::alloc::string::String,
    /// expedited defines if the proposal is expedited
    ///
    /// Since: cosmos-sdk 0.50
    #[prost(bool, tag = "14")]
    pub expedited: bool,
    /// failed_reason defines the reason why the proposal failed
    ///
    /// Since: cosmos-sdk 0.50
    #[prost(string, tag = "15")]
    pub failed_reason: ::prost::alloc::string::String,
}
impl ::prost::Name for Proposal {
    const NAME: &'static str = "Proposal";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.Proposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.Proposal".into()
    }
}
/// TallyResult defines a standard tally for a governance proposal.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TallyResult {
    /// yes_count is the number of yes votes on a proposal.
    #[prost(string, tag = "1")]
    pub yes_count: ::prost::alloc::string::String,
    /// abstain_count is the number of abstain votes on a proposal.
    #[prost(string, tag = "2")]
    pub abstain_count: ::prost::alloc::string::String,
    /// no_count is the number of no votes on a proposal.
    #[prost(string, tag = "3")]
    pub no_count: ::prost::alloc::string::String,
    /// no_with_veto_count is the number of no with veto votes on a proposal.
    #[prost(string, tag = "4")]
    pub no_with_veto_count: ::prost::alloc::string::String,
}
impl ::prost::Name for TallyResult {
    const NAME: &'static str = "TallyResult";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.TallyResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.TallyResult".into()
    }
}
/// Vote defines a vote on a governance proposal.
/// A Vote consists of a proposal ID, the voter, and the vote option.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Vote {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
    /// voter is the voter address of the proposal.
    #[prost(string, tag = "2")]
    pub voter: ::prost::alloc::string::String,
    /// options is the weighted vote options.
    #[prost(message, repeated, tag = "4")]
    pub options: ::prost::alloc::vec::Vec<WeightedVoteOption>,
    /// metadata is any arbitrary metadata attached to the vote.
    /// the recommended format of the metadata is to be found here: <https://docs.cosmos.network/v0.47/modules/gov#vote-5>
    #[prost(string, tag = "5")]
    pub metadata: ::prost::alloc::string::String,
}
impl ::prost::Name for Vote {
    const NAME: &'static str = "Vote";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.Vote".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.Vote".into()
    }
}
/// DepositParams defines the params for deposits on governance proposals.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepositParams {
    /// Minimum deposit for a proposal to enter voting period.
    #[prost(message, repeated, tag = "1")]
    pub min_deposit: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
    /// Maximum period for Atom holders to deposit on a proposal. Initial value: 2
    /// months.
    #[prost(message, optional, tag = "2")]
    pub max_deposit_period: ::core::option::Option<::prost_types::Duration>,
}
impl ::prost::Name for DepositParams {
    const NAME: &'static str = "DepositParams";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.DepositParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.DepositParams".into()
    }
}
/// VotingParams defines the params for voting on governance proposals.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VotingParams {
    /// Duration of the voting period.
    #[prost(message, optional, tag = "1")]
    pub voting_period: ::core::option::Option<::prost_types::Duration>,
}
impl ::prost::Name for VotingParams {
    const NAME: &'static str = "VotingParams";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.VotingParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.VotingParams".into()
    }
}
/// TallyParams defines the params for tallying votes on governance proposals.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TallyParams {
    /// Minimum percentage of total stake needed to vote for a result to be
    /// considered valid.
    #[prost(string, tag = "1")]
    pub quorum: ::prost::alloc::string::String,
    /// Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
    #[prost(string, tag = "2")]
    pub threshold: ::prost::alloc::string::String,
    /// Minimum value of Veto votes to Total votes ratio for proposal to be
    /// vetoed. Default value: 1/3.
    #[prost(string, tag = "3")]
    pub veto_threshold: ::prost::alloc::string::String,
}
impl ::prost::Name for TallyParams {
    const NAME: &'static str = "TallyParams";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.TallyParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.TallyParams".into()
    }
}
/// Params defines the parameters for the x/gov module.
///
/// Since: cosmos-sdk 0.47
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// Minimum deposit for a proposal to enter voting period.
    #[prost(message, repeated, tag = "1")]
    pub min_deposit: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
    /// Maximum period for Atom holders to deposit on a proposal. Initial value: 2
    /// months.
    #[prost(message, optional, tag = "2")]
    pub max_deposit_period: ::core::option::Option<::prost_types::Duration>,
    /// Duration of the voting period.
    #[prost(message, optional, tag = "3")]
    pub voting_period: ::core::option::Option<::prost_types::Duration>,
    ///   Minimum percentage of total stake needed to vote for a result to be
    ///   considered valid.
    #[prost(string, tag = "4")]
    pub quorum: ::prost::alloc::string::String,
    ///   Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
    #[prost(string, tag = "5")]
    pub threshold: ::prost::alloc::string::String,
    ///   Minimum value of Veto votes to Total votes ratio for proposal to be
    ///   vetoed. Default value: 1/3.
    #[prost(string, tag = "6")]
    pub veto_threshold: ::prost::alloc::string::String,
    ///   The ratio representing the proportion of the deposit value that must be paid at proposal submission.
    #[prost(string, tag = "7")]
    pub min_initial_deposit_ratio: ::prost::alloc::string::String,
    /// The cancel ratio which will not be returned back to the depositors when a proposal is cancelled.
    ///
    /// Since: cosmos-sdk 0.50
    #[prost(string, tag = "8")]
    pub proposal_cancel_ratio: ::prost::alloc::string::String,
    /// The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.
    /// If empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned.
    ///
    /// Since: cosmos-sdk 0.50
    #[prost(string, tag = "9")]
    pub proposal_cancel_dest: ::prost::alloc::string::String,
    /// Duration of the voting period of an expedited proposal.
    ///
    /// Since: cosmos-sdk 0.50
    #[prost(message, optional, tag = "10")]
    pub expedited_voting_period: ::core::option::Option<::prost_types::Duration>,
    /// Minimum proportion of Yes votes for proposal to pass. Default value: 0.67.
    ///
    /// Since: cosmos-sdk 0.50
    #[prost(string, tag = "11")]
    pub expedited_threshold: ::prost::alloc::string::String,
    ///   Minimum expedited deposit for a proposal to enter voting period.
    #[prost(message, repeated, tag = "12")]
    pub expedited_min_deposit: ::prost::alloc::vec::Vec<
        super::super::base::v1beta1::Coin,
    >,
    /// burn deposits if a proposal does not meet quorum
    #[prost(bool, tag = "13")]
    pub burn_vote_quorum: bool,
    /// burn deposits if the proposal does not enter voting period
    #[prost(bool, tag = "14")]
    pub burn_proposal_deposit_prevote: bool,
    /// burn deposits if quorum with vote type no_veto is met
    #[prost(bool, tag = "15")]
    pub burn_vote_veto: bool,
    /// The ratio representing the proportion of the deposit value minimum that must be met when making a deposit.
    /// Default value: 0.01. Meaning that for a chain with a min_deposit of 100stake, a deposit of 1stake would be
    /// required.
    ///
    /// Since: cosmos-sdk 0.50
    #[prost(string, tag = "16")]
    pub min_deposit_ratio: ::prost::alloc::string::String,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.Params".into()
    }
}
/// VoteOption enumerates the valid vote options for a given governance proposal.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VoteOption {
    /// VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
    Unspecified = 0,
    /// VOTE_OPTION_YES defines a yes vote option.
    Yes = 1,
    /// VOTE_OPTION_ABSTAIN defines an abstain vote option.
    Abstain = 2,
    /// VOTE_OPTION_NO defines a no vote option.
    No = 3,
    /// VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
    NoWithVeto = 4,
}
impl VoteOption {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "VOTE_OPTION_UNSPECIFIED",
            Self::Yes => "VOTE_OPTION_YES",
            Self::Abstain => "VOTE_OPTION_ABSTAIN",
            Self::No => "VOTE_OPTION_NO",
            Self::NoWithVeto => "VOTE_OPTION_NO_WITH_VETO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VOTE_OPTION_UNSPECIFIED" => Some(Self::Unspecified),
            "VOTE_OPTION_YES" => Some(Self::Yes),
            "VOTE_OPTION_ABSTAIN" => Some(Self::Abstain),
            "VOTE_OPTION_NO" => Some(Self::No),
            "VOTE_OPTION_NO_WITH_VETO" => Some(Self::NoWithVeto),
            _ => None,
        }
    }
}
/// ProposalStatus enumerates the valid statuses of a proposal.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProposalStatus {
    /// PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
    Unspecified = 0,
    /// PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
    /// period.
    DepositPeriod = 1,
    /// PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
    /// period.
    VotingPeriod = 2,
    /// PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
    /// passed.
    Passed = 3,
    /// PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
    /// been rejected.
    Rejected = 4,
    /// PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
    /// failed.
    Failed = 5,
}
impl ProposalStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "PROPOSAL_STATUS_UNSPECIFIED",
            Self::DepositPeriod => "PROPOSAL_STATUS_DEPOSIT_PERIOD",
            Self::VotingPeriod => "PROPOSAL_STATUS_VOTING_PERIOD",
            Self::Passed => "PROPOSAL_STATUS_PASSED",
            Self::Rejected => "PROPOSAL_STATUS_REJECTED",
            Self::Failed => "PROPOSAL_STATUS_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PROPOSAL_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "PROPOSAL_STATUS_DEPOSIT_PERIOD" => Some(Self::DepositPeriod),
            "PROPOSAL_STATUS_VOTING_PERIOD" => Some(Self::VotingPeriod),
            "PROPOSAL_STATUS_PASSED" => Some(Self::Passed),
            "PROPOSAL_STATUS_REJECTED" => Some(Self::Rejected),
            "PROPOSAL_STATUS_FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
/// GenesisState defines the gov module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// starting_proposal_id is the ID of the starting proposal.
    #[prost(uint64, tag = "1")]
    pub starting_proposal_id: u64,
    /// deposits defines all the deposits present at genesis.
    #[prost(message, repeated, tag = "2")]
    pub deposits: ::prost::alloc::vec::Vec<Deposit>,
    /// votes defines all the votes present at genesis.
    #[prost(message, repeated, tag = "3")]
    pub votes: ::prost::alloc::vec::Vec<Vote>,
    /// proposals defines all the proposals present at genesis.
    #[prost(message, repeated, tag = "4")]
    pub proposals: ::prost::alloc::vec::Vec<Proposal>,
    /// Deprecated: Prefer to use `params` instead.
    /// deposit_params defines all the paramaters of related to deposit.
    #[deprecated]
    #[prost(message, optional, tag = "5")]
    pub deposit_params: ::core::option::Option<DepositParams>,
    /// Deprecated: Prefer to use `params` instead.
    /// voting_params defines all the paramaters of related to voting.
    #[deprecated]
    #[prost(message, optional, tag = "6")]
    pub voting_params: ::core::option::Option<VotingParams>,
    /// Deprecated: Prefer to use `params` instead.
    /// tally_params defines all the paramaters of related to tally.
    #[deprecated]
    #[prost(message, optional, tag = "7")]
    pub tally_params: ::core::option::Option<TallyParams>,
    /// params defines all the paramaters of x/gov module.
    ///
    /// Since: cosmos-sdk 0.47
    #[prost(message, optional, tag = "8")]
    pub params: ::core::option::Option<Params>,
    /// The constitution allows builders to lay a foundation and define purpose.
    /// This is an immutable string set in genesis.
    /// There are no amendments, to go outside of scope, just fork.
    /// constitution is an immutable string in genesis for a chain builder to lay out their vision, ideas and ideals.
    ///
    /// Since: cosmos-sdk 0.50
    #[prost(string, tag = "9")]
    pub constitution: ::prost::alloc::string::String,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.GenesisState".into()
    }
}
/// QueryConstitutionRequest is the request type for the Query/Constitution RPC method
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryConstitutionRequest {}
impl ::prost::Name for QueryConstitutionRequest {
    const NAME: &'static str = "QueryConstitutionRequest";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryConstitutionRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryConstitutionRequest".into()
    }
}
/// QueryConstitutionResponse is the response type for the Query/Constitution RPC method
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryConstitutionResponse {
    #[prost(string, tag = "1")]
    pub constitution: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryConstitutionResponse {
    const NAME: &'static str = "QueryConstitutionResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryConstitutionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryConstitutionResponse".into()
    }
}
/// QueryProposalRequest is the request type for the Query/Proposal RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryProposalRequest {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
}
impl ::prost::Name for QueryProposalRequest {
    const NAME: &'static str = "QueryProposalRequest";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryProposalRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryProposalRequest".into()
    }
}
/// QueryProposalResponse is the response type for the Query/Proposal RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryProposalResponse {
    /// proposal is the requested governance proposal.
    #[prost(message, optional, tag = "1")]
    pub proposal: ::core::option::Option<Proposal>,
}
impl ::prost::Name for QueryProposalResponse {
    const NAME: &'static str = "QueryProposalResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryProposalResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryProposalResponse".into()
    }
}
/// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryProposalsRequest {
    /// proposal_status defines the status of the proposals.
    #[prost(enumeration = "ProposalStatus", tag = "1")]
    pub proposal_status: i32,
    /// voter defines the voter address for the proposals.
    #[prost(string, tag = "2")]
    pub voter: ::prost::alloc::string::String,
    /// depositor defines the deposit addresses from the proposals.
    #[prost(string, tag = "3")]
    pub depositor: ::prost::alloc::string::String,
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryProposalsRequest {
    const NAME: &'static str = "QueryProposalsRequest";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryProposalsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryProposalsRequest".into()
    }
}
/// QueryProposalsResponse is the response type for the Query/Proposals RPC
/// method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryProposalsResponse {
    /// proposals defines all the requested governance proposals.
    #[prost(message, repeated, tag = "1")]
    pub proposals: ::prost::alloc::vec::Vec<Proposal>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryProposalsResponse {
    const NAME: &'static str = "QueryProposalsResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryProposalsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryProposalsResponse".into()
    }
}
/// QueryVoteRequest is the request type for the Query/Vote RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVoteRequest {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
    /// voter defines the voter address for the proposals.
    #[prost(string, tag = "2")]
    pub voter: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryVoteRequest {
    const NAME: &'static str = "QueryVoteRequest";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryVoteRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryVoteRequest".into()
    }
}
/// QueryVoteResponse is the response type for the Query/Vote RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVoteResponse {
    /// vote defines the queried vote.
    #[prost(message, optional, tag = "1")]
    pub vote: ::core::option::Option<Vote>,
}
impl ::prost::Name for QueryVoteResponse {
    const NAME: &'static str = "QueryVoteResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryVoteResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryVoteResponse".into()
    }
}
/// QueryVotesRequest is the request type for the Query/Votes RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVotesRequest {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryVotesRequest {
    const NAME: &'static str = "QueryVotesRequest";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryVotesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryVotesRequest".into()
    }
}
/// QueryVotesResponse is the response type for the Query/Votes RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVotesResponse {
    /// votes defines the queried votes.
    #[prost(message, repeated, tag = "1")]
    pub votes: ::prost::alloc::vec::Vec<Vote>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryVotesResponse {
    const NAME: &'static str = "QueryVotesResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryVotesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryVotesResponse".into()
    }
}
/// QueryParamsRequest is the request type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {
    /// params_type defines which parameters to query for, can be one of "voting",
    /// "tallying" or "deposit".
    #[prost(string, tag = "1")]
    pub params_type: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is the response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// Deprecated: Prefer to use `params` instead.
    /// voting_params defines the parameters related to voting.
    #[deprecated]
    #[prost(message, optional, tag = "1")]
    pub voting_params: ::core::option::Option<VotingParams>,
    /// Deprecated: Prefer to use `params` instead.
    /// deposit_params defines the parameters related to deposit.
    #[deprecated]
    #[prost(message, optional, tag = "2")]
    pub deposit_params: ::core::option::Option<DepositParams>,
    /// Deprecated: Prefer to use `params` instead.
    /// tally_params defines the parameters related to tally.
    #[deprecated]
    #[prost(message, optional, tag = "3")]
    pub tally_params: ::core::option::Option<TallyParams>,
    /// params defines all the paramaters of x/gov module.
    ///
    /// Since: cosmos-sdk 0.47
    #[prost(message, optional, tag = "4")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryParamsResponse".into()
    }
}
/// QueryDepositRequest is the request type for the Query/Deposit RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDepositRequest {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
    /// depositor defines the deposit addresses from the proposals.
    #[prost(string, tag = "2")]
    pub depositor: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDepositRequest {
    const NAME: &'static str = "QueryDepositRequest";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryDepositRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryDepositRequest".into()
    }
}
/// QueryDepositResponse is the response type for the Query/Deposit RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDepositResponse {
    /// deposit defines the requested deposit.
    #[prost(message, optional, tag = "1")]
    pub deposit: ::core::option::Option<Deposit>,
}
impl ::prost::Name for QueryDepositResponse {
    const NAME: &'static str = "QueryDepositResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryDepositResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryDepositResponse".into()
    }
}
/// QueryDepositsRequest is the request type for the Query/Deposits RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDepositsRequest {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryDepositsRequest {
    const NAME: &'static str = "QueryDepositsRequest";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryDepositsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryDepositsRequest".into()
    }
}
/// QueryDepositsResponse is the response type for the Query/Deposits RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDepositsResponse {
    /// deposits defines the requested deposits.
    #[prost(message, repeated, tag = "1")]
    pub deposits: ::prost::alloc::vec::Vec<Deposit>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryDepositsResponse {
    const NAME: &'static str = "QueryDepositsResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryDepositsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryDepositsResponse".into()
    }
}
/// QueryTallyResultRequest is the request type for the Query/Tally RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryTallyResultRequest {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
}
impl ::prost::Name for QueryTallyResultRequest {
    const NAME: &'static str = "QueryTallyResultRequest";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryTallyResultRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryTallyResultRequest".into()
    }
}
/// QueryTallyResultResponse is the response type for the Query/Tally RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTallyResultResponse {
    /// tally defines the requested tally.
    #[prost(message, optional, tag = "1")]
    pub tally: ::core::option::Option<TallyResult>,
}
impl ::prost::Name for QueryTallyResultResponse {
    const NAME: &'static str = "QueryTallyResultResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.QueryTallyResultResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.QueryTallyResultResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service for gov module
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "grpc-transport")]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Constitution queries the chain's constitution.
        pub async fn constitution(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryConstitutionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryConstitutionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Query/Constitution",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Query", "Constitution"));
            self.inner.unary(req, path, codec).await
        }
        /// Proposal queries proposal details based on ProposalID.
        pub async fn proposal(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryProposalRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryProposalResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Query/Proposal",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Query", "Proposal"));
            self.inner.unary(req, path, codec).await
        }
        /// Proposals queries all proposals based on given status.
        pub async fn proposals(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryProposalsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryProposalsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Query/Proposals",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Query", "Proposals"));
            self.inner.unary(req, path, codec).await
        }
        /// Vote queries voted information based on proposalID, voterAddr.
        pub async fn vote(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryVoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryVoteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/cosmos.gov.v1.Query/Vote");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("cosmos.gov.v1.Query", "Vote"));
            self.inner.unary(req, path, codec).await
        }
        /// Votes queries votes of a given proposal.
        pub async fn votes(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryVotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryVotesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Query/Votes",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("cosmos.gov.v1.Query", "Votes"));
            self.inner.unary(req, path, codec).await
        }
        /// Params queries all parameters of the gov module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// Deposit queries single deposit information based on proposalID, depositAddr.
        pub async fn deposit(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDepositRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDepositResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Query/Deposit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Query", "Deposit"));
            self.inner.unary(req, path, codec).await
        }
        /// Deposits queries all deposits of a single proposal.
        pub async fn deposits(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDepositsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDepositsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Query/Deposits",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Query", "Deposits"));
            self.inner.unary(req, path, codec).await
        }
        /// TallyResult queries the tally of a proposal vote.
        pub async fn tally_result(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTallyResultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTallyResultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Query/TallyResult",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Query", "TallyResult"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// MsgSubmitProposal defines an sdk.Msg type that supports submitting arbitrary
/// proposal Content.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSubmitProposal {
    /// messages are the arbitrary messages to be executed if proposal passes.
    #[prost(message, repeated, tag = "1")]
    pub messages: ::prost::alloc::vec::Vec<::prost_types::Any>,
    /// initial_deposit is the deposit value that must be paid at proposal submission.
    #[prost(message, repeated, tag = "2")]
    pub initial_deposit: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
    /// proposer is the account address of the proposer.
    #[prost(string, tag = "3")]
    pub proposer: ::prost::alloc::string::String,
    /// metadata is any arbitrary metadata attached to the proposal.
    #[prost(string, tag = "4")]
    pub metadata: ::prost::alloc::string::String,
    /// title is the title of the proposal.
    ///
    /// Since: cosmos-sdk 0.47
    #[prost(string, tag = "5")]
    pub title: ::prost::alloc::string::String,
    /// summary is the summary of the proposal
    ///
    /// Since: cosmos-sdk 0.47
    #[prost(string, tag = "6")]
    pub summary: ::prost::alloc::string::String,
    /// expedited defines if the proposal is expedited or not
    ///
    /// Since: cosmos-sdk 0.50
    #[prost(bool, tag = "7")]
    pub expedited: bool,
}
impl ::prost::Name for MsgSubmitProposal {
    const NAME: &'static str = "MsgSubmitProposal";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgSubmitProposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgSubmitProposal".into()
    }
}
/// MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSubmitProposalResponse {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
}
impl ::prost::Name for MsgSubmitProposalResponse {
    const NAME: &'static str = "MsgSubmitProposalResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgSubmitProposalResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgSubmitProposalResponse".into()
    }
}
/// MsgExecLegacyContent is used to wrap the legacy content field into a message.
/// This ensures backwards compatibility with v1beta1.MsgSubmitProposal.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExecLegacyContent {
    /// content is the proposal's content.
    #[prost(message, optional, tag = "1")]
    pub content: ::core::option::Option<::prost_types::Any>,
    /// authority must be the gov module address.
    #[prost(string, tag = "2")]
    pub authority: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgExecLegacyContent {
    const NAME: &'static str = "MsgExecLegacyContent";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgExecLegacyContent".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgExecLegacyContent".into()
    }
}
/// MsgExecLegacyContentResponse defines the Msg/ExecLegacyContent response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgExecLegacyContentResponse {}
impl ::prost::Name for MsgExecLegacyContentResponse {
    const NAME: &'static str = "MsgExecLegacyContentResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgExecLegacyContentResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgExecLegacyContentResponse".into()
    }
}
/// MsgVote defines a message to cast a vote.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgVote {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
    /// voter is the voter address for the proposal.
    #[prost(string, tag = "2")]
    pub voter: ::prost::alloc::string::String,
    /// option defines the vote option.
    #[prost(enumeration = "VoteOption", tag = "3")]
    pub option: i32,
    /// metadata is any arbitrary metadata attached to the Vote.
    #[prost(string, tag = "4")]
    pub metadata: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgVote {
    const NAME: &'static str = "MsgVote";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgVote".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgVote".into()
    }
}
/// MsgVoteResponse defines the Msg/Vote response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgVoteResponse {}
impl ::prost::Name for MsgVoteResponse {
    const NAME: &'static str = "MsgVoteResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgVoteResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgVoteResponse".into()
    }
}
/// MsgVoteWeighted defines a message to cast a vote.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgVoteWeighted {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
    /// voter is the voter address for the proposal.
    #[prost(string, tag = "2")]
    pub voter: ::prost::alloc::string::String,
    /// options defines the weighted vote options.
    #[prost(message, repeated, tag = "3")]
    pub options: ::prost::alloc::vec::Vec<WeightedVoteOption>,
    /// metadata is any arbitrary metadata attached to the VoteWeighted.
    #[prost(string, tag = "4")]
    pub metadata: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgVoteWeighted {
    const NAME: &'static str = "MsgVoteWeighted";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgVoteWeighted".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgVoteWeighted".into()
    }
}
/// MsgVoteWeightedResponse defines the Msg/VoteWeighted response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgVoteWeightedResponse {}
impl ::prost::Name for MsgVoteWeightedResponse {
    const NAME: &'static str = "MsgVoteWeightedResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgVoteWeightedResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgVoteWeightedResponse".into()
    }
}
/// MsgDeposit defines a message to submit a deposit to an existing proposal.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDeposit {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
    /// depositor defines the deposit addresses from the proposals.
    #[prost(string, tag = "2")]
    pub depositor: ::prost::alloc::string::String,
    /// amount to be deposited by depositor.
    #[prost(message, repeated, tag = "3")]
    pub amount: ::prost::alloc::vec::Vec<super::super::base::v1beta1::Coin>,
}
impl ::prost::Name for MsgDeposit {
    const NAME: &'static str = "MsgDeposit";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgDeposit".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgDeposit".into()
    }
}
/// MsgDepositResponse defines the Msg/Deposit response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgDepositResponse {}
impl ::prost::Name for MsgDepositResponse {
    const NAME: &'static str = "MsgDepositResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgDepositResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgDepositResponse".into()
    }
}
/// MsgUpdateParams is the Msg/UpdateParams request type.
///
/// Since: cosmos-sdk 0.47
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/gov parameters to update.
    ///
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgUpdateParams".into()
    }
}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
///
/// Since: cosmos-sdk 0.47
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgUpdateParamsResponse".into()
    }
}
/// MsgCancelProposal is the Msg/CancelProposal request type.
///
/// Since: cosmos-sdk 0.50
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCancelProposal {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
    /// proposer is the account address of the proposer.
    #[prost(string, tag = "2")]
    pub proposer: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgCancelProposal {
    const NAME: &'static str = "MsgCancelProposal";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgCancelProposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgCancelProposal".into()
    }
}
/// MsgCancelProposalResponse defines the response structure for executing a
/// MsgCancelProposal message.
///
/// Since: cosmos-sdk 0.50
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgCancelProposalResponse {
    /// proposal_id defines the unique id of the proposal.
    #[prost(uint64, tag = "1")]
    pub proposal_id: u64,
    /// canceled_time is the time when proposal is canceled.
    #[prost(message, optional, tag = "2")]
    pub canceled_time: ::core::option::Option<::prost_types::Timestamp>,
    /// canceled_height defines the block height at which the proposal is canceled.
    #[prost(uint64, tag = "3")]
    pub canceled_height: u64,
}
impl ::prost::Name for MsgCancelProposalResponse {
    const NAME: &'static str = "MsgCancelProposalResponse";
    const PACKAGE: &'static str = "cosmos.gov.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.gov.v1.MsgCancelProposalResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.gov.v1.MsgCancelProposalResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the gov Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "grpc-transport")]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SubmitProposal defines a method to create new proposal given the messages.
        pub async fn submit_proposal(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSubmitProposal>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSubmitProposalResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Msg/SubmitProposal",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Msg", "SubmitProposal"));
            self.inner.unary(req, path, codec).await
        }
        /// ExecLegacyContent defines a Msg to be in included in a MsgSubmitProposal
        /// to execute a legacy content-based proposal.
        pub async fn exec_legacy_content(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgExecLegacyContent>,
        ) -> std::result::Result<
            tonic::Response<super::MsgExecLegacyContentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Msg/ExecLegacyContent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Msg", "ExecLegacyContent"));
            self.inner.unary(req, path, codec).await
        }
        /// Vote defines a method to add a vote on a specific proposal.
        pub async fn vote(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgVote>,
        ) -> std::result::Result<
            tonic::Response<super::MsgVoteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/cosmos.gov.v1.Msg/Vote");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("cosmos.gov.v1.Msg", "Vote"));
            self.inner.unary(req, path, codec).await
        }
        /// VoteWeighted defines a method to add a weighted vote on a specific proposal.
        pub async fn vote_weighted(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgVoteWeighted>,
        ) -> std::result::Result<
            tonic::Response<super::MsgVoteWeightedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Msg/VoteWeighted",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Msg", "VoteWeighted"));
            self.inner.unary(req, path, codec).await
        }
        /// Deposit defines a method to add deposit on a specific proposal.
        pub async fn deposit(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgDeposit>,
        ) -> std::result::Result<
            tonic::Response<super::MsgDepositResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Msg/Deposit",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("cosmos.gov.v1.Msg", "Deposit"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateParams defines a governance operation for updating the x/gov module
        /// parameters. The authority is defined in the keeper.
        ///
        /// Since: cosmos-sdk 0.47
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
        /// CancelProposal defines a method to cancel governance proposal
        ///
        /// Since: cosmos-sdk 0.50
        pub async fn cancel_proposal(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCancelProposal>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCancelProposalResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/cosmos.gov.v1.Msg/CancelProposal",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("cosmos.gov.v1.Msg", "CancelProposal"));
            self.inner.unary(req, path, codec).await
        }
    }
}
