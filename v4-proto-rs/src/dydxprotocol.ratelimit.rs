// This file is @generated by prost-build.
/// LimitParams defines rate limit params on a denom.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LimitParams {
    /// denom is the denomination of the token being rate limited.
    /// e.g. ibc/8E27BA2D5493AF5636760E354E46004562C46AB7EC0CC4C1CA14E9E20E2545B5
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    /// limiters is a list of rate-limiters on this denom. All limiters
    /// must be satified for a withdrawal to proceed.
    #[prost(message, repeated, tag = "2")]
    pub limiters: ::prost::alloc::vec::Vec<Limiter>,
}
impl ::prost::Name for LimitParams {
    const NAME: &'static str = "LimitParams";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.LimitParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.LimitParams".into()
    }
}
/// Limiter defines one rate-limiter on a specfic denom.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Limiter {
    /// period is the rolling time period for which the limit applies
    /// e.g. 3600 (an hour)
    #[prost(message, optional, tag = "1")]
    pub period: ::core::option::Option<::prost_types::Duration>,
    /// baseline_minimum is the minimum maximum withdrawal coin amount within the
    /// time period.
    /// e.g. 100_000_000_000 uusdc for 100k USDC; 5e22 adv4tnt for 50k DV4TNT
    #[prost(bytes = "vec", tag = "3")]
    pub baseline_minimum: ::prost::alloc::vec::Vec<u8>,
    /// baseline_tvl_ppm is the maximum ratio of TVL withdrawable in
    /// the time period, in part-per-million.
    /// e.g. 100_000 (10%)
    #[prost(uint32, tag = "4")]
    pub baseline_tvl_ppm: u32,
}
impl ::prost::Name for Limiter {
    const NAME: &'static str = "Limiter";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.Limiter".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.Limiter".into()
    }
}
/// DenomCapacity stores a list of rate limit capacity for a denom.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DenomCapacity {
    /// denom is the denomination of the token being rate limited.
    /// e.g. ibc/8E27BA2D5493AF5636760E354E46004562C46AB7EC0CC4C1CA14E9E20E2545B5
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    /// capacity_list is a list of capacity amount tracked for each `Limiter`
    /// on the denom. This list has a 1:1 mapping to `limiter` list under
    /// `LimitParams`.
    #[prost(bytes = "vec", repeated, tag = "2")]
    pub capacity_list: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
impl ::prost::Name for DenomCapacity {
    const NAME: &'static str = "DenomCapacity";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.DenomCapacity".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.DenomCapacity".into()
    }
}
/// LimiterCapacity contains a pair of limiter and its corresponding capacity.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LimiterCapacity {
    #[prost(message, optional, tag = "1")]
    pub limiter: ::core::option::Option<Limiter>,
    #[prost(bytes = "vec", tag = "2")]
    pub capacity: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for LimiterCapacity {
    const NAME: &'static str = "LimiterCapacity";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.LimiterCapacity".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.LimiterCapacity".into()
    }
}
/// GenesisState defines the ratelimit module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// limit_params_list defines the list of `LimitParams` at genesis.
    #[prost(message, repeated, tag = "1")]
    pub limit_params_list: ::prost::alloc::vec::Vec<LimitParams>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.GenesisState".into()
    }
}
/// PendingSendPacket contains the channel_id and sequence pair to identify a
/// pending packet
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PendingSendPacket {
    #[prost(string, tag = "1")]
    pub channel_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub sequence: u64,
}
impl ::prost::Name for PendingSendPacket {
    const NAME: &'static str = "PendingSendPacket";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.PendingSendPacket".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.PendingSendPacket".into()
    }
}
/// ListLimitParamsRequest is a request type of the ListLimitParams RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListLimitParamsRequest {}
impl ::prost::Name for ListLimitParamsRequest {
    const NAME: &'static str = "ListLimitParamsRequest";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.ListLimitParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.ListLimitParamsRequest".into()
    }
}
/// ListLimitParamsResponse is a response type of the ListLimitParams RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListLimitParamsResponse {
    #[prost(message, repeated, tag = "1")]
    pub limit_params_list: ::prost::alloc::vec::Vec<LimitParams>,
}
impl ::prost::Name for ListLimitParamsResponse {
    const NAME: &'static str = "ListLimitParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.ListLimitParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.ListLimitParamsResponse".into()
    }
}
/// QueryCapacityByDenomRequest is a request type for the CapacityByDenom RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCapacityByDenomRequest {
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryCapacityByDenomRequest {
    const NAME: &'static str = "QueryCapacityByDenomRequest";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.QueryCapacityByDenomRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.QueryCapacityByDenomRequest".into()
    }
}
/// QueryCapacityByDenomResponse is a response type of the CapacityByDenom RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCapacityByDenomResponse {
    #[prost(message, repeated, tag = "1")]
    pub limiter_capacity_list: ::prost::alloc::vec::Vec<LimiterCapacity>,
}
impl ::prost::Name for QueryCapacityByDenomResponse {
    const NAME: &'static str = "QueryCapacityByDenomResponse";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.QueryCapacityByDenomResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.QueryCapacityByDenomResponse".into()
    }
}
/// QueryAllPendingSendPacketsRequest is a request type for the
/// AllPendingSendPackets RPC
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllPendingSendPacketsRequest {}
impl ::prost::Name for QueryAllPendingSendPacketsRequest {
    const NAME: &'static str = "QueryAllPendingSendPacketsRequest";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.QueryAllPendingSendPacketsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.QueryAllPendingSendPacketsRequest".into()
    }
}
/// QueryAllPendingSendPacketsResponse is a response type of the
/// AllPendingSendPackets RPC
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllPendingSendPacketsResponse {
    #[prost(message, repeated, tag = "1")]
    pub pending_send_packets: ::prost::alloc::vec::Vec<PendingSendPacket>,
}
impl ::prost::Name for QueryAllPendingSendPacketsResponse {
    const NAME: &'static str = "QueryAllPendingSendPacketsResponse";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.QueryAllPendingSendPacketsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.QueryAllPendingSendPacketsResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// List all limit params.
        pub async fn list_limit_params(
            &mut self,
            request: impl tonic::IntoRequest<super::ListLimitParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListLimitParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.ratelimit.Query/ListLimitParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.ratelimit.Query", "ListLimitParams"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Query capacity by denom.
        pub async fn capacity_by_denom(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryCapacityByDenomRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCapacityByDenomResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.ratelimit.Query/CapacityByDenom",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.ratelimit.Query", "CapacityByDenom"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get all pending send packets
        pub async fn all_pending_send_packets(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllPendingSendPacketsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllPendingSendPacketsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.ratelimit.Query/AllPendingSendPackets",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.ratelimit.Query",
                        "AllPendingSendPackets",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// MsgSetLimitParams is the Msg/SetLimitParams request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetLimitParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Defines the parameters to set. All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub limit_params: ::core::option::Option<LimitParams>,
}
impl ::prost::Name for MsgSetLimitParams {
    const NAME: &'static str = "MsgSetLimitParams";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.MsgSetLimitParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.MsgSetLimitParams".into()
    }
}
/// MsgSetLimitParamsResponse is the Msg/SetLimitParams response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetLimitParamsResponse {}
impl ::prost::Name for MsgSetLimitParamsResponse {
    const NAME: &'static str = "MsgSetLimitParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.ratelimit";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.ratelimit.MsgSetLimitParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.ratelimit.MsgSetLimitParamsResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SetLimitParams sets a `LimitParams` object in state.
        pub async fn set_limit_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSetLimitParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSetLimitParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.ratelimit.Msg/SetLimitParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.ratelimit.Msg", "SetLimitParams"));
            self.inner.unary(req, path, codec).await
        }
    }
}
