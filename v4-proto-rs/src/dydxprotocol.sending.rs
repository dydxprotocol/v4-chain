// This file is @generated by prost-build.
/// GenesisState defines the sending module's genesis state.
///
/// this line is used by starport scaffolding # genesis/proto/state
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "dydxprotocol.sending";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.sending.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.sending.GenesisState".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
    }
}
/// Transfer represents a single transfer between two subaccounts.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    /// The sender subaccount ID.
    #[prost(message, optional, tag = "1")]
    pub sender: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// The recipient subaccount ID.
    #[prost(message, optional, tag = "2")]
    pub recipient: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// Id of the asset to transfer.
    #[prost(uint32, tag = "3")]
    pub asset_id: u32,
    /// The amount of asset to transfer
    #[prost(uint64, tag = "4")]
    pub amount: u64,
}
impl ::prost::Name for Transfer {
    const NAME: &'static str = "Transfer";
    const PACKAGE: &'static str = "dydxprotocol.sending";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.sending.Transfer".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.sending.Transfer".into()
    }
}
/// MsgDepositToSubaccount represents a single transfer from an `x/bank`
/// account to an `x/subaccounts` subaccount.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDepositToSubaccount {
    /// The sender wallet address.
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    /// The recipient subaccount ID.
    #[prost(message, optional, tag = "2")]
    pub recipient: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// Id of the asset to transfer.
    #[prost(uint32, tag = "3")]
    pub asset_id: u32,
    /// The number of quantums of asset to transfer.
    #[prost(uint64, tag = "4")]
    pub quantums: u64,
}
impl ::prost::Name for MsgDepositToSubaccount {
    const NAME: &'static str = "MsgDepositToSubaccount";
    const PACKAGE: &'static str = "dydxprotocol.sending";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.sending.MsgDepositToSubaccount".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.sending.MsgDepositToSubaccount".into()
    }
}
/// MsgWithdrawFromSubaccount represents a single transfer from an
/// `x/subaccounts` subaccount to an `x/bank` account.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawFromSubaccount {
    /// The sender subaccount ID.
    #[prost(message, optional, tag = "2")]
    pub sender: ::core::option::Option<super::subaccounts::SubaccountId>,
    /// The recipient wallet address.
    #[prost(string, tag = "1")]
    pub recipient: ::prost::alloc::string::String,
    /// Id of the asset to transfer.
    #[prost(uint32, tag = "3")]
    pub asset_id: u32,
    /// The number of quantums of asset to transfer.
    #[prost(uint64, tag = "4")]
    pub quantums: u64,
}
impl ::prost::Name for MsgWithdrawFromSubaccount {
    const NAME: &'static str = "MsgWithdrawFromSubaccount";
    const PACKAGE: &'static str = "dydxprotocol.sending";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.sending.MsgWithdrawFromSubaccount".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.sending.MsgWithdrawFromSubaccount".into()
    }
}
/// MsgSendFromModuleToAccount represents a single transfer from a module
/// to an `x/bank` account (can be either a module account address or a user
/// account address).
/// Should only be executed by governance.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSendFromModuleToAccount {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The sender module name.
    #[prost(string, tag = "2")]
    pub sender_module_name: ::prost::alloc::string::String,
    /// The recipient account address (can be either a module account address
    /// or a user account address).
    #[prost(string, tag = "3")]
    pub recipient: ::prost::alloc::string::String,
    /// The coin to transfer, which specifies both denom and amount.
    #[prost(message, optional, tag = "4")]
    pub coin: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for MsgSendFromModuleToAccount {
    const NAME: &'static str = "MsgSendFromModuleToAccount";
    const PACKAGE: &'static str = "dydxprotocol.sending";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.sending.MsgSendFromModuleToAccount".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.sending.MsgSendFromModuleToAccount".into()
    }
}
/// MsgCreateTransfer is a request type used for initiating new transfers.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateTransfer {
    #[prost(message, optional, tag = "1")]
    pub transfer: ::core::option::Option<Transfer>,
}
impl ::prost::Name for MsgCreateTransfer {
    const NAME: &'static str = "MsgCreateTransfer";
    const PACKAGE: &'static str = "dydxprotocol.sending";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.sending.MsgCreateTransfer".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.sending.MsgCreateTransfer".into()
    }
}
/// MsgCreateTransferResponse is a response type used for new transfers.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateTransferResponse {}
impl ::prost::Name for MsgCreateTransferResponse {
    const NAME: &'static str = "MsgCreateTransferResponse";
    const PACKAGE: &'static str = "dydxprotocol.sending";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.sending.MsgCreateTransferResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.sending.MsgCreateTransferResponse".into()
    }
}
/// MsgDepositToSubaccountResponse is a response type used for new
/// account-to-subaccount transfers.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDepositToSubaccountResponse {}
impl ::prost::Name for MsgDepositToSubaccountResponse {
    const NAME: &'static str = "MsgDepositToSubaccountResponse";
    const PACKAGE: &'static str = "dydxprotocol.sending";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.sending.MsgDepositToSubaccountResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.sending.MsgDepositToSubaccountResponse".into()
    }
}
/// MsgWithdrawFromSubaccountResponse is a response type used for new
/// subaccount-to-account transfers.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawFromSubaccountResponse {}
impl ::prost::Name for MsgWithdrawFromSubaccountResponse {
    const NAME: &'static str = "MsgWithdrawFromSubaccountResponse";
    const PACKAGE: &'static str = "dydxprotocol.sending";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.sending.MsgWithdrawFromSubaccountResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.sending.MsgWithdrawFromSubaccountResponse".into()
    }
}
/// MsgSendFromModuleToAccountResponse is a response type used for new
/// module-to-account transfers.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSendFromModuleToAccountResponse {}
impl ::prost::Name for MsgSendFromModuleToAccountResponse {
    const NAME: &'static str = "MsgSendFromModuleToAccountResponse";
    const PACKAGE: &'static str = "dydxprotocol.sending";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.sending.MsgSendFromModuleToAccountResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.sending.MsgSendFromModuleToAccountResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// CreateTransfer initiates a new transfer between subaccounts.
        pub async fn create_transfer(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCreateTransfer>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCreateTransferResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.sending.Msg/CreateTransfer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.sending.Msg", "CreateTransfer"));
            self.inner.unary(req, path, codec).await
        }
        /// DepositToSubaccount initiates a new transfer from an `x/bank` account
        /// to an `x/subaccounts` subaccount.
        pub async fn deposit_to_subaccount(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgDepositToSubaccount>,
        ) -> std::result::Result<
            tonic::Response<super::MsgDepositToSubaccountResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.sending.Msg/DepositToSubaccount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.sending.Msg", "DepositToSubaccount"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// WithdrawFromSubaccount initiates a new transfer from an `x/subaccounts`
        /// subaccount to an `x/bank` account.
        pub async fn withdraw_from_subaccount(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgWithdrawFromSubaccount>,
        ) -> std::result::Result<
            tonic::Response<super::MsgWithdrawFromSubaccountResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.sending.Msg/WithdrawFromSubaccount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.sending.Msg", "WithdrawFromSubaccount"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SendFromModuleToAccount initiates a new transfer from a module to an
        /// `x/bank` account (should only be executed by governance).
        pub async fn send_from_module_to_account(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSendFromModuleToAccount>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSendFromModuleToAccountResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.sending.Msg/SendFromModuleToAccount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.sending.Msg",
                        "SendFromModuleToAccount",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
