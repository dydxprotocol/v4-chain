// This file is @generated by prost-build.
/// IndexerTendermintEventWrapper is a wrapper around IndexerTendermintEvent,
/// with an additional txn_hash field.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexerTendermintEventWrapper {
    #[prost(message, optional, tag = "1")]
    pub event: ::core::option::Option<IndexerTendermintEvent>,
    #[prost(string, tag = "2")]
    pub txn_hash: ::prost::alloc::string::String,
}
impl ::prost::Name for IndexerTendermintEventWrapper {
    const NAME: &'static str = "IndexerTendermintEventWrapper";
    const PACKAGE: &'static str = "dydxprotocol.indexer.indexer_manager";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper".into()
    }
}
/// IndexerEventsStoreValue represents the type of the value of the
/// `IndexerEventsStore` in state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexerEventsStoreValue {
    #[prost(message, repeated, tag = "1")]
    pub events: ::prost::alloc::vec::Vec<IndexerTendermintEventWrapper>,
}
impl ::prost::Name for IndexerEventsStoreValue {
    const NAME: &'static str = "IndexerEventsStoreValue";
    const PACKAGE: &'static str = "dydxprotocol.indexer.indexer_manager";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue".into()
    }
}
/// IndexerTendermintEvent contains the base64 encoded event proto emitted from
/// the dYdX application as well as additional metadata to determine the ordering
/// of the event within the block and the subtype of the event.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexerTendermintEvent {
    /// Subtype of the event e.g. "order_fill", "subaccount_update", etc.
    #[prost(string, tag = "1")]
    pub subtype: ::prost::alloc::string::String,
    /// Index of the event within the list of events that happened either during a
    /// transaction or during processing of a block.
    /// TODO(DEC-537): Deprecate this field because events are already ordered.
    #[prost(uint32, tag = "5")]
    pub event_index: u32,
    /// Version of the event.
    #[prost(uint32, tag = "6")]
    pub version: u32,
    /// Tendermint event bytes.
    #[prost(bytes = "vec", tag = "7")]
    pub data_bytes: ::prost::alloc::vec::Vec<u8>,
    /// ordering_within_block is either the transaction index or a boolean
    /// indicating the event was generated during processing the block rather than
    /// any specific transaction e.g. during FinalizeBlock.
    #[prost(oneof = "indexer_tendermint_event::OrderingWithinBlock", tags = "3, 4")]
    pub ordering_within_block: ::core::option::Option<
        indexer_tendermint_event::OrderingWithinBlock,
    >,
}
/// Nested message and enum types in `IndexerTendermintEvent`.
pub mod indexer_tendermint_event {
    /// enum to specify that the IndexerTendermintEvent is a block event.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum BlockEvent {
        /// Default value. This value is invalid and unused.
        Unspecified = 0,
        /// BLOCK_EVENT_BEGIN_BLOCK indicates that the event was generated during
        /// BeginBlock.
        BeginBlock = 1,
        /// BLOCK_EVENT_END_BLOCK indicates that the event was generated during
        /// EndBlock.
        EndBlock = 2,
    }
    impl BlockEvent {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                BlockEvent::Unspecified => "BLOCK_EVENT_UNSPECIFIED",
                BlockEvent::BeginBlock => "BLOCK_EVENT_BEGIN_BLOCK",
                BlockEvent::EndBlock => "BLOCK_EVENT_END_BLOCK",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "BLOCK_EVENT_UNSPECIFIED" => Some(Self::Unspecified),
                "BLOCK_EVENT_BEGIN_BLOCK" => Some(Self::BeginBlock),
                "BLOCK_EVENT_END_BLOCK" => Some(Self::EndBlock),
                _ => None,
            }
        }
    }
    /// ordering_within_block is either the transaction index or a boolean
    /// indicating the event was generated during processing the block rather than
    /// any specific transaction e.g. during FinalizeBlock.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum OrderingWithinBlock {
        #[prost(uint32, tag = "3")]
        TransactionIndex(u32),
        #[prost(enumeration = "BlockEvent", tag = "4")]
        BlockEvent(i32),
    }
}
impl ::prost::Name for IndexerTendermintEvent {
    const NAME: &'static str = "IndexerTendermintEvent";
    const PACKAGE: &'static str = "dydxprotocol.indexer.indexer_manager";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent".into()
    }
}
/// IndexerTendermintBlock contains all the events for the block along with
/// metadata for the block height, timestamp of the block and a list of all the
/// hashes of the transactions within the block. The transaction hashes follow
/// the ordering of the transactions as they appear within the block.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexerTendermintBlock {
    #[prost(uint32, tag = "1")]
    pub height: u32,
    #[prost(message, optional, tag = "2")]
    pub time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, repeated, tag = "3")]
    pub events: ::prost::alloc::vec::Vec<IndexerTendermintEvent>,
    #[prost(string, repeated, tag = "4")]
    pub tx_hashes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for IndexerTendermintBlock {
    const NAME: &'static str = "IndexerTendermintBlock";
    const PACKAGE: &'static str = "dydxprotocol.indexer.indexer_manager";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock".into()
    }
}
