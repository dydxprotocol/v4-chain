// This file is @generated by prost-build.
/// BridgeEvent is a recognized event from the Ethereum blockchain.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BridgeEvent {
    /// The unique id of the Ethereum event log.
    #[prost(uint32, tag = "1")]
    pub id: u32,
    /// The tokens bridged.
    #[prost(message, optional, tag = "2")]
    pub coin: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
    /// The account address or module address to bridge to.
    #[prost(string, tag = "3")]
    pub address: ::prost::alloc::string::String,
    /// The Ethereum block height of the event.
    #[prost(uint64, tag = "4")]
    pub eth_block_height: u64,
}
impl ::prost::Name for BridgeEvent {
    const NAME: &'static str = "BridgeEvent";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.BridgeEvent".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.BridgeEvent".into()
    }
}
/// BridgeEventInfo stores information about the most recently processed bridge
/// event.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BridgeEventInfo {
    /// The next event id (the last processed id plus one) of the logs from the
    /// Ethereum contract.
    #[prost(uint32, tag = "1")]
    pub next_id: u32,
    /// The Ethereum block height of the most recently processed bridge event.
    #[prost(uint64, tag = "2")]
    pub eth_block_height: u64,
}
impl ::prost::Name for BridgeEventInfo {
    const NAME: &'static str = "BridgeEventInfo";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.BridgeEventInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.BridgeEventInfo".into()
    }
}
/// EventParams stores parameters about which events to recognize and which
/// tokens to mint.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventParams {
    /// The denom of the token to mint.
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    /// The numerical chain ID of the Ethereum chain to query.
    #[prost(uint64, tag = "2")]
    pub eth_chain_id: u64,
    /// The address of the Ethereum contract to monitor for logs.
    #[prost(string, tag = "3")]
    pub eth_address: ::prost::alloc::string::String,
}
impl ::prost::Name for EventParams {
    const NAME: &'static str = "EventParams";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.EventParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.EventParams".into()
    }
}
/// ProposeParams stores parameters for proposing to the module.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProposeParams {
    /// The maximum number of bridge events to propose per block.
    /// Limits the number of events to propose in a single block
    /// in-order to smooth out the flow of events.
    #[prost(uint32, tag = "1")]
    pub max_bridges_per_block: u32,
    /// The minimum duration to wait between a finalized bridge and
    /// proposing it. This allows other validators to have enough time to
    /// also recognize its occurence. Therefore the bridge daemon should
    /// pool for new finalized events at least as often as this parameter.
    #[prost(message, optional, tag = "2")]
    pub propose_delay_duration: ::core::option::Option<::prost_types::Duration>,
    /// Do not propose any events if a [0, 1_000_000) random number generator
    /// generates a number smaller than this number.
    /// Setting this parameter to 1_000_000 means always skipping proposing events.
    #[prost(uint32, tag = "3")]
    pub skip_rate_ppm: u32,
    /// Do not propose any events if the timestamp of the proposal block is
    /// behind the proposers' wall-clock by at least this duration.
    #[prost(message, optional, tag = "4")]
    pub skip_if_block_delayed_by_duration: ::core::option::Option<
        ::prost_types::Duration,
    >,
}
impl ::prost::Name for ProposeParams {
    const NAME: &'static str = "ProposeParams";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.ProposeParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.ProposeParams".into()
    }
}
/// SafetyParams stores safety parameters for the module.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SafetyParams {
    /// True if bridging is disabled.
    #[prost(bool, tag = "1")]
    pub is_disabled: bool,
    /// The number of blocks that bridges accepted in-consensus will be pending
    /// until the minted tokens are granted.
    #[prost(uint32, tag = "2")]
    pub delay_blocks: u32,
}
impl ::prost::Name for SafetyParams {
    const NAME: &'static str = "SafetyParams";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.SafetyParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.SafetyParams".into()
    }
}
/// GenesisState defines the bridge module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// The parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub event_params: ::core::option::Option<EventParams>,
    #[prost(message, optional, tag = "2")]
    pub propose_params: ::core::option::Option<ProposeParams>,
    #[prost(message, optional, tag = "3")]
    pub safety_params: ::core::option::Option<SafetyParams>,
    /// Acknowledged event info that stores:
    /// - the next event ID to be added to consensus.
    /// - Ethereum block height of the most recently acknowledged bridge event.
    #[prost(message, optional, tag = "4")]
    pub acknowledged_event_info: ::core::option::Option<BridgeEventInfo>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.GenesisState".into()
    }
}
/// MsgAcknowledgeBridges is the Msg/AcknowledgeBridges request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAcknowledgeBridges {
    /// The events to acknowledge.
    #[prost(message, repeated, tag = "1")]
    pub events: ::prost::alloc::vec::Vec<BridgeEvent>,
}
impl ::prost::Name for MsgAcknowledgeBridges {
    const NAME: &'static str = "MsgAcknowledgeBridges";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.MsgAcknowledgeBridges".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.MsgAcknowledgeBridges".into()
    }
}
/// MsgAcknowledgeBridgesResponse is the Msg/AcknowledgeBridgesResponse response
/// type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAcknowledgeBridgesResponse {}
impl ::prost::Name for MsgAcknowledgeBridgesResponse {
    const NAME: &'static str = "MsgAcknowledgeBridgesResponse";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.MsgAcknowledgeBridgesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.MsgAcknowledgeBridgesResponse".into()
    }
}
/// MsgCompleteBridge is the Msg/CompleteBridgeResponse request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCompleteBridge {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The event to complete.
    #[prost(message, optional, tag = "2")]
    pub event: ::core::option::Option<BridgeEvent>,
}
impl ::prost::Name for MsgCompleteBridge {
    const NAME: &'static str = "MsgCompleteBridge";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.MsgCompleteBridge".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.MsgCompleteBridge".into()
    }
}
/// MsgCompleteBridgeResponse is the Msg/CompleteBridgeResponse response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCompleteBridgeResponse {}
impl ::prost::Name for MsgCompleteBridgeResponse {
    const NAME: &'static str = "MsgCompleteBridgeResponse";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.MsgCompleteBridgeResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.MsgCompleteBridgeResponse".into()
    }
}
/// MsgUpdateEventParams is the Msg/UpdateEventParams request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateEventParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The parameters to update. Each field must be set.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<EventParams>,
}
impl ::prost::Name for MsgUpdateEventParams {
    const NAME: &'static str = "MsgUpdateEventParams";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.MsgUpdateEventParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.MsgUpdateEventParams".into()
    }
}
/// MsgUpdateEventParamsResponse is the Msg/UpdateEventParams response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateEventParamsResponse {}
impl ::prost::Name for MsgUpdateEventParamsResponse {
    const NAME: &'static str = "MsgUpdateEventParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.MsgUpdateEventParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.MsgUpdateEventParamsResponse".into()
    }
}
/// MsgUpdateProposeParams is the Msg/UpdateProposeParams request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateProposeParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The parameters to update. Each field must be set.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<ProposeParams>,
}
impl ::prost::Name for MsgUpdateProposeParams {
    const NAME: &'static str = "MsgUpdateProposeParams";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.MsgUpdateProposeParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.MsgUpdateProposeParams".into()
    }
}
/// MsgUpdateProposeParamsResponse is the Msg/UpdateProposeParams response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateProposeParamsResponse {}
impl ::prost::Name for MsgUpdateProposeParamsResponse {
    const NAME: &'static str = "MsgUpdateProposeParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.MsgUpdateProposeParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.MsgUpdateProposeParamsResponse".into()
    }
}
/// MsgUpdateSafetyParams is the Msg/UpdateSafetyParams request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateSafetyParams {
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The parameters to update. Each field must be set.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<SafetyParams>,
}
impl ::prost::Name for MsgUpdateSafetyParams {
    const NAME: &'static str = "MsgUpdateSafetyParams";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.MsgUpdateSafetyParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.MsgUpdateSafetyParams".into()
    }
}
/// MsgUpdateSafetyParamsResponse is the Msg/UpdateSafetyParams response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateSafetyParamsResponse {}
impl ::prost::Name for MsgUpdateSafetyParamsResponse {
    const NAME: &'static str = "MsgUpdateSafetyParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.MsgUpdateSafetyParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.MsgUpdateSafetyParamsResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// AcknowledgeBridges acknowledges bridges and sets them to complete at a
        /// later block.
        pub async fn acknowledge_bridges(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgAcknowledgeBridges>,
        ) -> std::result::Result<
            tonic::Response<super::MsgAcknowledgeBridgesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.bridge.Msg/AcknowledgeBridges",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.bridge.Msg", "AcknowledgeBridges"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CompleteBridge finalizes a bridge by minting coins to an address.
        pub async fn complete_bridge(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCompleteBridge>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCompleteBridgeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.bridge.Msg/CompleteBridge",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.bridge.Msg", "CompleteBridge"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateEventParams updates the EventParams in state.
        pub async fn update_event_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateEventParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateEventParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.bridge.Msg/UpdateEventParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.bridge.Msg", "UpdateEventParams"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateProposeParams updates the ProposeParams in state.
        pub async fn update_propose_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateProposeParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateProposeParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.bridge.Msg/UpdateProposeParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.bridge.Msg", "UpdateProposeParams"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateSafetyParams updates the SafetyParams in state.
        pub async fn update_safety_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateSafetyParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateSafetyParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.bridge.Msg/UpdateSafetyParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.bridge.Msg", "UpdateSafetyParams"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// QueryEventParamsRequest is a request type for the EventParams RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEventParamsRequest {}
impl ::prost::Name for QueryEventParamsRequest {
    const NAME: &'static str = "QueryEventParamsRequest";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QueryEventParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QueryEventParamsRequest".into()
    }
}
/// QueryEventParamsResponse is a response type for the EventParams RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEventParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<EventParams>,
}
impl ::prost::Name for QueryEventParamsResponse {
    const NAME: &'static str = "QueryEventParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QueryEventParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QueryEventParamsResponse".into()
    }
}
/// QueryProposeParamsRequest is a request type for the ProposeParams RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryProposeParamsRequest {}
impl ::prost::Name for QueryProposeParamsRequest {
    const NAME: &'static str = "QueryProposeParamsRequest";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QueryProposeParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QueryProposeParamsRequest".into()
    }
}
/// QueryProposeParamsResponse is a response type for the ProposeParams RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryProposeParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<ProposeParams>,
}
impl ::prost::Name for QueryProposeParamsResponse {
    const NAME: &'static str = "QueryProposeParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QueryProposeParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QueryProposeParamsResponse".into()
    }
}
/// QuerySafetyParamsRequest is a request type for the SafetyParams RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySafetyParamsRequest {}
impl ::prost::Name for QuerySafetyParamsRequest {
    const NAME: &'static str = "QuerySafetyParamsRequest";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QuerySafetyParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QuerySafetyParamsRequest".into()
    }
}
/// QuerySafetyParamsResponse is a response type for the SafetyParams RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySafetyParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<SafetyParams>,
}
impl ::prost::Name for QuerySafetyParamsResponse {
    const NAME: &'static str = "QuerySafetyParamsResponse";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QuerySafetyParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QuerySafetyParamsResponse".into()
    }
}
/// QueryAcknowledgedEventInfoRequest is a request type for the
/// AcknowledgedEventInfo RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAcknowledgedEventInfoRequest {}
impl ::prost::Name for QueryAcknowledgedEventInfoRequest {
    const NAME: &'static str = "QueryAcknowledgedEventInfoRequest";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QueryAcknowledgedEventInfoRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QueryAcknowledgedEventInfoRequest".into()
    }
}
/// QueryAcknowledgedEventInfoResponse is a response type for the
/// AcknowledgedEventInfo RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAcknowledgedEventInfoResponse {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<BridgeEventInfo>,
}
impl ::prost::Name for QueryAcknowledgedEventInfoResponse {
    const NAME: &'static str = "QueryAcknowledgedEventInfoResponse";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QueryAcknowledgedEventInfoResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QueryAcknowledgedEventInfoResponse".into()
    }
}
/// QueryRecognizedEventInfoRequest is a request type for the
/// RecognizedEventInfo RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRecognizedEventInfoRequest {}
impl ::prost::Name for QueryRecognizedEventInfoRequest {
    const NAME: &'static str = "QueryRecognizedEventInfoRequest";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QueryRecognizedEventInfoRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QueryRecognizedEventInfoRequest".into()
    }
}
/// QueryRecognizedEventInfoResponse is a response type for the
/// RecognizedEventInfo RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRecognizedEventInfoResponse {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<BridgeEventInfo>,
}
impl ::prost::Name for QueryRecognizedEventInfoResponse {
    const NAME: &'static str = "QueryRecognizedEventInfoResponse";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QueryRecognizedEventInfoResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QueryRecognizedEventInfoResponse".into()
    }
}
/// QueryDelayedCompleteBridgeMessagesRequest is a request type for the
/// DelayedCompleteBridgeMessages RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDelayedCompleteBridgeMessagesRequest {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDelayedCompleteBridgeMessagesRequest {
    const NAME: &'static str = "QueryDelayedCompleteBridgeMessagesRequest";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QueryDelayedCompleteBridgeMessagesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QueryDelayedCompleteBridgeMessagesRequest".into()
    }
}
/// QueryDelayedCompleteBridgeMessagesResponse is a response type for the
/// DelayedCompleteBridgeMessages RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDelayedCompleteBridgeMessagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub messages: ::prost::alloc::vec::Vec<DelayedCompleteBridgeMessage>,
}
impl ::prost::Name for QueryDelayedCompleteBridgeMessagesResponse {
    const NAME: &'static str = "QueryDelayedCompleteBridgeMessagesResponse";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.QueryDelayedCompleteBridgeMessagesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.QueryDelayedCompleteBridgeMessagesResponse".into()
    }
}
/// DelayedCompleteBridgeMessage is a message type for the response of
/// DelayedCompleteBridgeMessages RPC method. It contains the message
/// and the block height at which it will execute.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelayedCompleteBridgeMessage {
    #[prost(message, optional, tag = "1")]
    pub message: ::core::option::Option<MsgCompleteBridge>,
    #[prost(uint32, tag = "2")]
    pub block_height: u32,
}
impl ::prost::Name for DelayedCompleteBridgeMessage {
    const NAME: &'static str = "DelayedCompleteBridgeMessage";
    const PACKAGE: &'static str = "dydxprotocol.bridge";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.bridge.DelayedCompleteBridgeMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.bridge.DelayedCompleteBridgeMessage".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Queries the EventParams.
        pub async fn event_params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryEventParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryEventParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.bridge.Query/EventParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.bridge.Query", "EventParams"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries the ProposeParams.
        pub async fn propose_params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryProposeParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryProposeParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.bridge.Query/ProposeParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.bridge.Query", "ProposeParams"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries the SafetyParams.
        pub async fn safety_params(
            &mut self,
            request: impl tonic::IntoRequest<super::QuerySafetyParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySafetyParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.bridge.Query/SafetyParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.bridge.Query", "SafetyParams"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries the AcknowledgedEventInfo.
        /// An "acknowledged" event is one that is in-consensus and has been stored
        /// in-state.
        pub async fn acknowledged_event_info(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAcknowledgedEventInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAcknowledgedEventInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.bridge.Query/AcknowledgedEventInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.bridge.Query", "AcknowledgedEventInfo"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries the RecognizedEventInfo.
        /// A "recognized" event is one that is finalized on the Ethereum blockchain
        /// and has been identified by the queried node. It is not yet in-consensus.
        pub async fn recognized_event_info(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRecognizedEventInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryRecognizedEventInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.bridge.Query/RecognizedEventInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dydxprotocol.bridge.Query", "RecognizedEventInfo"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Queries all `MsgCompleteBridge` messages that are delayed (not yet
        /// executed) and corresponding block heights at which they will execute.
        pub async fn delayed_complete_bridge_messages(
            &mut self,
            request: impl tonic::IntoRequest<
                super::QueryDelayedCompleteBridgeMessagesRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::QueryDelayedCompleteBridgeMessagesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.bridge.Query/DelayedCompleteBridgeMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "dydxprotocol.bridge.Query",
                        "DelayedCompleteBridgeMessages",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
