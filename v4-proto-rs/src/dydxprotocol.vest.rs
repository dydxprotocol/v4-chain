// This file is @generated by prost-build.
/// VestEntry specifies a Vester Account and the rate at which tokens are
/// dripped into the corresponding Treasury Account.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VestEntry {
    /// The module account to vest tokens from.
    /// This is also the key to this `VestEntry` in state.
    #[prost(string, tag = "1")]
    pub vester_account: ::prost::alloc::string::String,
    /// The module account to vest tokens to.
    #[prost(string, tag = "2")]
    pub treasury_account: ::prost::alloc::string::String,
    /// The denom of the token to vest.
    #[prost(string, tag = "3")]
    pub denom: ::prost::alloc::string::String,
    /// The start time of vest. Before this time, no vest will occur.
    #[prost(message, optional, tag = "4")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The end time of vest. At this target date, all funds should be in the
    /// Treasury Account and none left in the Vester Account.
    #[prost(message, optional, tag = "5")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for VestEntry {
    const NAME: &'static str = "VestEntry";
    const PACKAGE: &'static str = "dydxprotocol.vest";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vest.VestEntry".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vest.VestEntry".into()
    }
}
/// GenesisState defines the vest module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// The vest entries at genesis.
    #[prost(message, repeated, tag = "1")]
    pub vest_entries: ::prost::alloc::vec::Vec<VestEntry>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "dydxprotocol.vest";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vest.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vest.GenesisState".into()
    }
}
/// QueryVestEntryRequest is a request type for the VestEntry RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVestEntryRequest {
    #[prost(string, tag = "1")]
    pub vester_account: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryVestEntryRequest {
    const NAME: &'static str = "QueryVestEntryRequest";
    const PACKAGE: &'static str = "dydxprotocol.vest";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vest.QueryVestEntryRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vest.QueryVestEntryRequest".into()
    }
}
/// QueryVestEntryResponse is a response type for the VestEntry RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVestEntryResponse {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<VestEntry>,
}
impl ::prost::Name for QueryVestEntryResponse {
    const NAME: &'static str = "QueryVestEntryResponse";
    const PACKAGE: &'static str = "dydxprotocol.vest";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vest.QueryVestEntryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vest.QueryVestEntryResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Queries the VestEntry.
        pub async fn vest_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryVestEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryVestEntryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vest.Query/VestEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vest.Query", "VestEntry"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// MsgDeleteVestEntry is the Msg/DeleteVestEntry request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDeleteVestEntry {
    /// authority is the address that controls the module.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The vester account of the vest entry to delete.
    #[prost(string, tag = "2")]
    pub vester_account: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgDeleteVestEntry {
    const NAME: &'static str = "MsgDeleteVestEntry";
    const PACKAGE: &'static str = "dydxprotocol.vest";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vest.MsgDeleteVestEntry".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vest.MsgDeleteVestEntry".into()
    }
}
/// MsgDeleteVestEntryResponse is the Msg/DeleteVestEntry response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDeleteVestEntryResponse {}
impl ::prost::Name for MsgDeleteVestEntryResponse {
    const NAME: &'static str = "MsgDeleteVestEntryResponse";
    const PACKAGE: &'static str = "dydxprotocol.vest";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vest.MsgDeleteVestEntryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vest.MsgDeleteVestEntryResponse".into()
    }
}
/// MsgSetVestEntry is the Msg/SetVestEntry request type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetVestEntry {
    /// authority is the address that controls the module.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The vest entry to set.
    #[prost(message, optional, tag = "2")]
    pub entry: ::core::option::Option<VestEntry>,
}
impl ::prost::Name for MsgSetVestEntry {
    const NAME: &'static str = "MsgSetVestEntry";
    const PACKAGE: &'static str = "dydxprotocol.vest";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vest.MsgSetVestEntry".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vest.MsgSetVestEntry".into()
    }
}
/// MsgSetVestEntryResponse is the Msg/SetVestEntry response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetVestEntryResponse {}
impl ::prost::Name for MsgSetVestEntryResponse {
    const NAME: &'static str = "MsgSetVestEntryResponse";
    const PACKAGE: &'static str = "dydxprotocol.vest";
    fn full_name() -> ::prost::alloc::string::String {
        "dydxprotocol.vest.MsgSetVestEntryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/dydxprotocol.vest.MsgSetVestEntryResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SetVestEntry sets a VestEntry in state.
        pub async fn set_vest_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSetVestEntry>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSetVestEntryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vest.Msg/SetVestEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vest.Msg", "SetVestEntry"));
            self.inner.unary(req, path, codec).await
        }
        /// DeleteVestEntry deletes a VestEntry from state.
        pub async fn delete_vest_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgDeleteVestEntry>,
        ) -> std::result::Result<
            tonic::Response<super::MsgDeleteVestEntryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dydxprotocol.vest.Msg/DeleteVestEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dydxprotocol.vest.Msg", "DeleteVestEntry"));
            self.inner.unary(req, path, codec).await
        }
    }
}
