// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/feetiers/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdatePerpetualFeeParams is the Msg/UpdatePerpetualFeeParams request type.
type MsgUpdatePerpetualFeeParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Defines the parameters to update. All parameters must be supplied.
	Params PerpetualFeeParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdatePerpetualFeeParams) Reset()         { *m = MsgUpdatePerpetualFeeParams{} }
func (m *MsgUpdatePerpetualFeeParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePerpetualFeeParams) ProtoMessage()    {}
func (*MsgUpdatePerpetualFeeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa74a3b986b7fd9, []int{0}
}
func (m *MsgUpdatePerpetualFeeParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePerpetualFeeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePerpetualFeeParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePerpetualFeeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePerpetualFeeParams.Merge(m, src)
}
func (m *MsgUpdatePerpetualFeeParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePerpetualFeeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePerpetualFeeParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePerpetualFeeParams proto.InternalMessageInfo

func (m *MsgUpdatePerpetualFeeParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdatePerpetualFeeParams) GetParams() PerpetualFeeParams {
	if m != nil {
		return m.Params
	}
	return PerpetualFeeParams{}
}

// MsgUpdatePerpetualFeeParamsResponse is the Msg/UpdatePerpetualFeeParams
// response type.
type MsgUpdatePerpetualFeeParamsResponse struct {
}

func (m *MsgUpdatePerpetualFeeParamsResponse) Reset()         { *m = MsgUpdatePerpetualFeeParamsResponse{} }
func (m *MsgUpdatePerpetualFeeParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePerpetualFeeParamsResponse) ProtoMessage()    {}
func (*MsgUpdatePerpetualFeeParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa74a3b986b7fd9, []int{1}
}
func (m *MsgUpdatePerpetualFeeParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePerpetualFeeParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePerpetualFeeParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePerpetualFeeParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePerpetualFeeParamsResponse.Merge(m, src)
}
func (m *MsgUpdatePerpetualFeeParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePerpetualFeeParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePerpetualFeeParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePerpetualFeeParamsResponse proto.InternalMessageInfo

// MsgSetMarketFeeDiscountParams is the Msg/SetMarketFeeDiscountParams
// request type.
type MsgSetMarketFeeDiscountParams struct {
	// authority is the address that controls the module
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The per-market fee discount parameters to create or update
	Params []PerMarketFeeDiscountParams `protobuf:"bytes,2,rep,name=params,proto3" json:"params"`
}

func (m *MsgSetMarketFeeDiscountParams) Reset()         { *m = MsgSetMarketFeeDiscountParams{} }
func (m *MsgSetMarketFeeDiscountParams) String() string { return proto.CompactTextString(m) }
func (*MsgSetMarketFeeDiscountParams) ProtoMessage()    {}
func (*MsgSetMarketFeeDiscountParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa74a3b986b7fd9, []int{2}
}
func (m *MsgSetMarketFeeDiscountParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMarketFeeDiscountParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMarketFeeDiscountParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMarketFeeDiscountParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMarketFeeDiscountParams.Merge(m, src)
}
func (m *MsgSetMarketFeeDiscountParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMarketFeeDiscountParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMarketFeeDiscountParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMarketFeeDiscountParams proto.InternalMessageInfo

func (m *MsgSetMarketFeeDiscountParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSetMarketFeeDiscountParams) GetParams() []PerMarketFeeDiscountParams {
	if m != nil {
		return m.Params
	}
	return nil
}

// MsgSetMarketFeeDiscountParamsResponse is the
// Msg/SetMarketFeeDiscountParams response type.
type MsgSetMarketFeeDiscountParamsResponse struct {
}

func (m *MsgSetMarketFeeDiscountParamsResponse) Reset()         { *m = MsgSetMarketFeeDiscountParamsResponse{} }
func (m *MsgSetMarketFeeDiscountParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMarketFeeDiscountParamsResponse) ProtoMessage()    {}
func (*MsgSetMarketFeeDiscountParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa74a3b986b7fd9, []int{3}
}
func (m *MsgSetMarketFeeDiscountParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMarketFeeDiscountParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMarketFeeDiscountParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMarketFeeDiscountParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMarketFeeDiscountParamsResponse.Merge(m, src)
}
func (m *MsgSetMarketFeeDiscountParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMarketFeeDiscountParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMarketFeeDiscountParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMarketFeeDiscountParamsResponse proto.InternalMessageInfo

// MsgSetStakingTiers is the Msg/SetStakingTiers request type.
type MsgSetStakingTiers struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// List of Staking tiers
	StakingTiers []*StakingTier `protobuf:"bytes,2,rep,name=staking_tiers,json=stakingTiers,proto3" json:"staking_tiers,omitempty"`
}

func (m *MsgSetStakingTiers) Reset()         { *m = MsgSetStakingTiers{} }
func (m *MsgSetStakingTiers) String() string { return proto.CompactTextString(m) }
func (*MsgSetStakingTiers) ProtoMessage()    {}
func (*MsgSetStakingTiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa74a3b986b7fd9, []int{4}
}
func (m *MsgSetStakingTiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetStakingTiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetStakingTiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetStakingTiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetStakingTiers.Merge(m, src)
}
func (m *MsgSetStakingTiers) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetStakingTiers) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetStakingTiers.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetStakingTiers proto.InternalMessageInfo

func (m *MsgSetStakingTiers) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSetStakingTiers) GetStakingTiers() []*StakingTier {
	if m != nil {
		return m.StakingTiers
	}
	return nil
}

// MsgSetStakingTiersResponse is the Msg/SetStakingTiers response type.
type MsgSetStakingTiersResponse struct {
}

func (m *MsgSetStakingTiersResponse) Reset()         { *m = MsgSetStakingTiersResponse{} }
func (m *MsgSetStakingTiersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetStakingTiersResponse) ProtoMessage()    {}
func (*MsgSetStakingTiersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa74a3b986b7fd9, []int{5}
}
func (m *MsgSetStakingTiersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetStakingTiersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetStakingTiersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetStakingTiersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetStakingTiersResponse.Merge(m, src)
}
func (m *MsgSetStakingTiersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetStakingTiersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetStakingTiersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetStakingTiersResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdatePerpetualFeeParams)(nil), "dydxprotocol.feetiers.MsgUpdatePerpetualFeeParams")
	proto.RegisterType((*MsgUpdatePerpetualFeeParamsResponse)(nil), "dydxprotocol.feetiers.MsgUpdatePerpetualFeeParamsResponse")
	proto.RegisterType((*MsgSetMarketFeeDiscountParams)(nil), "dydxprotocol.feetiers.MsgSetMarketFeeDiscountParams")
	proto.RegisterType((*MsgSetMarketFeeDiscountParamsResponse)(nil), "dydxprotocol.feetiers.MsgSetMarketFeeDiscountParamsResponse")
	proto.RegisterType((*MsgSetStakingTiers)(nil), "dydxprotocol.feetiers.MsgSetStakingTiers")
	proto.RegisterType((*MsgSetStakingTiersResponse)(nil), "dydxprotocol.feetiers.MsgSetStakingTiersResponse")
}

func init() { proto.RegisterFile("dydxprotocol/feetiers/tx.proto", fileDescriptor_caa74a3b986b7fd9) }

var fileDescriptor_caa74a3b986b7fd9 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xa9, 0x4c, 0xa9,
	0x28, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x4f, 0x4b, 0x4d, 0x2d, 0xc9, 0x4c, 0x2d,
	0x2a, 0xd6, 0x2f, 0xa9, 0xd0, 0x03, 0x0b, 0x0a, 0x89, 0x22, 0xcb, 0xeb, 0xc1, 0xe4, 0xa5, 0x24,
	0x93, 0xf3, 0x8b, 0x73, 0xf3, 0x8b, 0xe3, 0xc1, 0x32, 0xfa, 0x10, 0x0e, 0x44, 0x87, 0x94, 0x38,
	0x84, 0xa7, 0x9f, 0x5b, 0x9c, 0xae, 0x5f, 0x66, 0x08, 0xa2, 0xa0, 0x12, 0x4a, 0xd8, 0xad, 0x2a,
	0x48, 0x2c, 0x4a, 0xcc, 0x85, 0x69, 0x36, 0xc6, 0xa1, 0x26, 0xb5, 0x28, 0x3e, 0x37, 0xb1, 0x28,
	0x3b, 0xb5, 0x24, 0x3e, 0x2d, 0x35, 0x35, 0x3e, 0x25, 0xb3, 0x38, 0x39, 0xbf, 0x34, 0xaf, 0x04,
	0xaa, 0x49, 0x03, 0xbb, 0xa6, 0xe2, 0x92, 0xc4, 0xec, 0xcc, 0xbc, 0xf4, 0x78, 0x10, 0x0f, 0xaa,
	0x52, 0x24, 0x3d, 0x3f, 0x3d, 0x1f, 0xe2, 0x66, 0x10, 0x0b, 0x22, 0xaa, 0xb4, 0x8e, 0x91, 0x4b,
	0xda, 0xb7, 0x38, 0x3d, 0xb4, 0x20, 0x25, 0xb1, 0x24, 0x35, 0x20, 0xb5, 0xa8, 0x20, 0xb5, 0xa4,
	0x34, 0x31, 0xc7, 0x2d, 0x35, 0x35, 0x00, 0xec, 0x34, 0x21, 0x33, 0x2e, 0xce, 0xc4, 0xd2, 0x92,
	0x8c, 0xfc, 0xa2, 0xcc, 0x92, 0x4a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x4e, 0x27, 0x89, 0x4b, 0x5b,
	0x74, 0x45, 0xa0, 0xde, 0x76, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x0e, 0x2e, 0x29, 0xca, 0xcc,
	0x4b, 0x0f, 0x42, 0x28, 0x15, 0x72, 0xe7, 0x62, 0x83, 0x78, 0x4e, 0x82, 0x49, 0x81, 0x51, 0x83,
	0xdb, 0x48, 0x53, 0x0f, 0x6b, 0x60, 0xea, 0x61, 0x5a, 0xe9, 0xc4, 0x72, 0xe2, 0x9e, 0x3c, 0x43,
	0x10, 0x54, 0xbb, 0x15, 0x5f, 0xd3, 0xf3, 0x0d, 0x5a, 0x08, 0x83, 0x95, 0x54, 0xb9, 0x94, 0xf1,
	0xb8, 0x37, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x69, 0x07, 0x23, 0x97, 0xac, 0x6f,
	0x71, 0x7a, 0x70, 0x6a, 0x89, 0x2f, 0x38, 0xec, 0xdc, 0x52, 0x53, 0x5d, 0xa0, 0x21, 0x47, 0xa1,
	0xcf, 0xfc, 0x91, 0x7c, 0xc6, 0xac, 0xc1, 0x6d, 0x64, 0x88, 0xdb, 0x67, 0x38, 0xac, 0x26, 0xe0,
	0x43, 0x75, 0x2e, 0x55, 0xbc, 0x2e, 0x87, 0xfb, 0x71, 0x29, 0x23, 0x97, 0x10, 0x44, 0x65, 0x30,
	0x24, 0xba, 0x43, 0x40, 0x16, 0x53, 0x10, 0x65, 0xbc, 0xc8, 0xc9, 0x06, 0xe6, 0x3f, 0x25, 0x1c,
	0xfe, 0x43, 0xb2, 0x33, 0x88, 0xa7, 0x18, 0xc9, 0x01, 0x18, 0x1e, 0x92, 0xe1, 0x92, 0xc2, 0x74,
	0x26, 0xcc, 0x17, 0x46, 0xd3, 0x98, 0xb9, 0x98, 0x7d, 0x8b, 0xd3, 0x85, 0xba, 0x18, 0xb9, 0x24,
	0x70, 0x26, 0x43, 0x23, 0x1c, 0x8e, 0xc0, 0x93, 0x14, 0xa4, 0xac, 0x48, 0xd7, 0x03, 0x73, 0x94,
	0xd0, 0x04, 0x46, 0x2e, 0x29, 0x3c, 0x69, 0xc7, 0x04, 0xb7, 0xd1, 0xb8, 0x75, 0x49, 0xd9, 0x90,
	0xa3, 0x0b, 0xee, 0xa4, 0x7c, 0x2e, 0x7e, 0xf4, 0x98, 0xd6, 0xc4, 0x6b, 0x20, 0xb2, 0x52, 0x29,
	0x43, 0xa2, 0x95, 0xc2, 0x2c, 0x74, 0x0a, 0x39, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6,
	0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39,
	0x86, 0x28, 0xab, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x94, 0xf2,
	0xa7, 0xcc, 0x44, 0x37, 0x39, 0x23, 0x31, 0x33, 0x4f, 0x1f, 0x2e, 0x52, 0x81, 0x54, 0xae, 0x56,
	0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0xa5, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x14, 0x66,
	0x90, 0xc6, 0x7d, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdatePerpetualFeeParams updates the PerpetualFeeParams in state.
	UpdatePerpetualFeeParams(ctx context.Context, in *MsgUpdatePerpetualFeeParams, opts ...grpc.CallOption) (*MsgUpdatePerpetualFeeParamsResponse, error)
	// SetMarketFeeDiscountParams sets or updates PerMarketFeeDiscountParams for
	// specific CLOB pairs.
	SetMarketFeeDiscountParams(ctx context.Context, in *MsgSetMarketFeeDiscountParams, opts ...grpc.CallOption) (*MsgSetMarketFeeDiscountParamsResponse, error)
	// SetStakingTiers sets the staking tiers in state.
	SetStakingTiers(ctx context.Context, in *MsgSetStakingTiers, opts ...grpc.CallOption) (*MsgSetStakingTiersResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdatePerpetualFeeParams(ctx context.Context, in *MsgUpdatePerpetualFeeParams, opts ...grpc.CallOption) (*MsgUpdatePerpetualFeeParamsResponse, error) {
	out := new(MsgUpdatePerpetualFeeParamsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.feetiers.Msg/UpdatePerpetualFeeParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMarketFeeDiscountParams(ctx context.Context, in *MsgSetMarketFeeDiscountParams, opts ...grpc.CallOption) (*MsgSetMarketFeeDiscountParamsResponse, error) {
	out := new(MsgSetMarketFeeDiscountParamsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.feetiers.Msg/SetMarketFeeDiscountParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetStakingTiers(ctx context.Context, in *MsgSetStakingTiers, opts ...grpc.CallOption) (*MsgSetStakingTiersResponse, error) {
	out := new(MsgSetStakingTiersResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.feetiers.Msg/SetStakingTiers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdatePerpetualFeeParams updates the PerpetualFeeParams in state.
	UpdatePerpetualFeeParams(context.Context, *MsgUpdatePerpetualFeeParams) (*MsgUpdatePerpetualFeeParamsResponse, error)
	// SetMarketFeeDiscountParams sets or updates PerMarketFeeDiscountParams for
	// specific CLOB pairs.
	SetMarketFeeDiscountParams(context.Context, *MsgSetMarketFeeDiscountParams) (*MsgSetMarketFeeDiscountParamsResponse, error)
	// SetStakingTiers sets the staking tiers in state.
	SetStakingTiers(context.Context, *MsgSetStakingTiers) (*MsgSetStakingTiersResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdatePerpetualFeeParams(ctx context.Context, req *MsgUpdatePerpetualFeeParams) (*MsgUpdatePerpetualFeeParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerpetualFeeParams not implemented")
}
func (*UnimplementedMsgServer) SetMarketFeeDiscountParams(ctx context.Context, req *MsgSetMarketFeeDiscountParams) (*MsgSetMarketFeeDiscountParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMarketFeeDiscountParams not implemented")
}
func (*UnimplementedMsgServer) SetStakingTiers(ctx context.Context, req *MsgSetStakingTiers) (*MsgSetStakingTiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStakingTiers not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdatePerpetualFeeParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePerpetualFeeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePerpetualFeeParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.feetiers.Msg/UpdatePerpetualFeeParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePerpetualFeeParams(ctx, req.(*MsgUpdatePerpetualFeeParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMarketFeeDiscountParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMarketFeeDiscountParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMarketFeeDiscountParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.feetiers.Msg/SetMarketFeeDiscountParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMarketFeeDiscountParams(ctx, req.(*MsgSetMarketFeeDiscountParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetStakingTiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetStakingTiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetStakingTiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.feetiers.Msg/SetStakingTiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetStakingTiers(ctx, req.(*MsgSetStakingTiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dydxprotocol.feetiers.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePerpetualFeeParams",
			Handler:    _Msg_UpdatePerpetualFeeParams_Handler,
		},
		{
			MethodName: "SetMarketFeeDiscountParams",
			Handler:    _Msg_SetMarketFeeDiscountParams_Handler,
		},
		{
			MethodName: "SetStakingTiers",
			Handler:    _Msg_SetStakingTiers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dydxprotocol/feetiers/tx.proto",
}

func (m *MsgUpdatePerpetualFeeParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePerpetualFeeParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePerpetualFeeParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePerpetualFeeParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePerpetualFeeParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePerpetualFeeParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetMarketFeeDiscountParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMarketFeeDiscountParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMarketFeeDiscountParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Params[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMarketFeeDiscountParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMarketFeeDiscountParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMarketFeeDiscountParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetStakingTiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetStakingTiers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetStakingTiers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingTiers) > 0 {
		for iNdEx := len(m.StakingTiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakingTiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetStakingTiersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetStakingTiersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetStakingTiersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdatePerpetualFeeParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdatePerpetualFeeParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetMarketFeeDiscountParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Params) > 0 {
		for _, e := range m.Params {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetMarketFeeDiscountParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetStakingTiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.StakingTiers) > 0 {
		for _, e := range m.StakingTiers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetStakingTiersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdatePerpetualFeeParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePerpetualFeeParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePerpetualFeeParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePerpetualFeeParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePerpetualFeeParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePerpetualFeeParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMarketFeeDiscountParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMarketFeeDiscountParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMarketFeeDiscountParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, PerMarketFeeDiscountParams{})
			if err := m.Params[len(m.Params)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMarketFeeDiscountParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMarketFeeDiscountParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMarketFeeDiscountParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetStakingTiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetStakingTiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetStakingTiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTiers = append(m.StakingTiers, &StakingTier{})
			if err := m.StakingTiers[len(m.StakingTiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetStakingTiersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetStakingTiersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetStakingTiersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
