// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/feetiers/fee_discount_campaign.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FeeDiscountCampaignParams defines a fee discount period for a specific CLOB
// pair
type FeeDiscountCampaignParams struct {
	// The CLOB Pair ID this fee holiday applies to
	ClobPairId uint32 `protobuf:"varint,1,opt,name=clob_pair_id,json=clobPairId,proto3" json:"clob_pair_id,omitempty"`
	// Start time (Unix timestamp in seconds)
	StartTimeUnix int64 `protobuf:"varint,2,opt,name=start_time_unix,json=startTimeUnix,proto3" json:"start_time_unix,omitempty"`
	// End time (Unix timestamp in seconds)
	EndTimeUnix int64 `protobuf:"varint,3,opt,name=end_time_unix,json=endTimeUnix,proto3" json:"end_time_unix,omitempty"`
	// Percentage of normal fee to charge during the campaign (in parts per
	// million) 0 = completely free (100% discount) 500000 = charge 50% of normal
	// fee (50% discount) 1000000 = charge 100% of normal fee (no discount)
	ChargePpm uint32 `protobuf:"varint,4,opt,name=charge_ppm,json=chargePpm,proto3" json:"charge_ppm,omitempty"`
}

func (m *FeeDiscountCampaignParams) Reset()         { *m = FeeDiscountCampaignParams{} }
func (m *FeeDiscountCampaignParams) String() string { return proto.CompactTextString(m) }
func (*FeeDiscountCampaignParams) ProtoMessage()    {}
func (*FeeDiscountCampaignParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c75797c53a25430, []int{0}
}
func (m *FeeDiscountCampaignParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeDiscountCampaignParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeDiscountCampaignParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeDiscountCampaignParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeDiscountCampaignParams.Merge(m, src)
}
func (m *FeeDiscountCampaignParams) XXX_Size() int {
	return m.Size()
}
func (m *FeeDiscountCampaignParams) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeDiscountCampaignParams.DiscardUnknown(m)
}

var xxx_messageInfo_FeeDiscountCampaignParams proto.InternalMessageInfo

func (m *FeeDiscountCampaignParams) GetClobPairId() uint32 {
	if m != nil {
		return m.ClobPairId
	}
	return 0
}

func (m *FeeDiscountCampaignParams) GetStartTimeUnix() int64 {
	if m != nil {
		return m.StartTimeUnix
	}
	return 0
}

func (m *FeeDiscountCampaignParams) GetEndTimeUnix() int64 {
	if m != nil {
		return m.EndTimeUnix
	}
	return 0
}

func (m *FeeDiscountCampaignParams) GetChargePpm() uint32 {
	if m != nil {
		return m.ChargePpm
	}
	return 0
}

func init() {
	proto.RegisterType((*FeeDiscountCampaignParams)(nil), "dydxprotocol.feetiers.FeeDiscountCampaignParams")
}

func init() {
	proto.RegisterFile("dydxprotocol/feetiers/fee_discount_campaign.proto", fileDescriptor_8c75797c53a25430)
}

var fileDescriptor_8c75797c53a25430 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0x87, 0x1b, 0x27, 0x82, 0xd1, 0x22, 0x14, 0x84, 0x7a, 0x30, 0x94, 0x1d, 0x64, 0x17, 0x5b,
	0x44, 0x4f, 0x1e, 0x55, 0x04, 0x6f, 0x65, 0xcc, 0x8b, 0x97, 0x90, 0x26, 0xb1, 0x7d, 0x61, 0xf9,
	0x43, 0x9a, 0x4a, 0xf7, 0x2d, 0xfc, 0x18, 0x7e, 0x14, 0x8f, 0x3b, 0x7a, 0x94, 0xf6, 0x8b, 0xc8,
	0xea, 0x9c, 0xdb, 0x2d, 0x3c, 0x79, 0x1e, 0x5e, 0xf8, 0xe1, 0x2b, 0xb1, 0x10, 0xad, 0x75, 0xc6,
	0x1b, 0x6e, 0xe6, 0xd9, 0xab, 0x94, 0x1e, 0xa4, 0xab, 0x57, 0x0f, 0x2a, 0xa0, 0xe6, 0xa6, 0xd1,
	0x9e, 0x72, 0xa6, 0x2c, 0x83, 0x52, 0xa7, 0x83, 0x17, 0x9d, 0x6e, 0x27, 0xe9, 0x5f, 0x32, 0xfe,
	0x40, 0xf8, 0xec, 0x51, 0xca, 0x87, 0x75, 0x75, 0xbf, 0x8e, 0x72, 0xe6, 0x98, 0xaa, 0xa3, 0x04,
	0x1f, 0xf3, 0xb9, 0x29, 0xa8, 0x65, 0xe0, 0x28, 0x88, 0x18, 0x25, 0x68, 0x12, 0x4e, 0xf1, 0x8a,
	0xe5, 0x0c, 0xdc, 0x93, 0x88, 0x2e, 0xf0, 0x49, 0xed, 0x99, 0xf3, 0xd4, 0x83, 0x92, 0xb4, 0xd1,
	0xd0, 0xc6, 0x7b, 0x09, 0x9a, 0x8c, 0xa6, 0xe1, 0x80, 0x67, 0xa0, 0xe4, 0xb3, 0x86, 0x36, 0x1a,
	0xe3, 0x50, 0x6a, 0xb1, 0x65, 0x8d, 0x06, 0xeb, 0x48, 0x6a, 0xb1, 0x71, 0xce, 0x31, 0xe6, 0x15,
	0x73, 0xa5, 0xa4, 0xd6, 0xaa, 0x78, 0x7f, 0xb8, 0x75, 0xf8, 0x4b, 0x72, 0xab, 0xee, 0x66, 0x9f,
	0x1d, 0x41, 0xcb, 0x8e, 0xa0, 0xef, 0x8e, 0xa0, 0xf7, 0x9e, 0x04, 0xcb, 0x9e, 0x04, 0x5f, 0x3d,
	0x09, 0x5e, 0x6e, 0x4b, 0xf0, 0x55, 0x53, 0xa4, 0xdc, 0xa8, 0x6c, 0x67, 0x99, 0xb7, 0x9b, 0x4b,
	0x5e, 0x31, 0xd0, 0xd9, 0x86, 0xb4, 0xff, 0x6b, 0xf9, 0x85, 0x95, 0x75, 0x71, 0x30, 0x7c, 0x5d,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xdd, 0x17, 0x15, 0x53, 0x01, 0x00, 0x00,
}

func (m *FeeDiscountCampaignParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeDiscountCampaignParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeDiscountCampaignParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChargePpm != 0 {
		i = encodeVarintFeeDiscountCampaign(dAtA, i, uint64(m.ChargePpm))
		i--
		dAtA[i] = 0x20
	}
	if m.EndTimeUnix != 0 {
		i = encodeVarintFeeDiscountCampaign(dAtA, i, uint64(m.EndTimeUnix))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTimeUnix != 0 {
		i = encodeVarintFeeDiscountCampaign(dAtA, i, uint64(m.StartTimeUnix))
		i--
		dAtA[i] = 0x10
	}
	if m.ClobPairId != 0 {
		i = encodeVarintFeeDiscountCampaign(dAtA, i, uint64(m.ClobPairId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeeDiscountCampaign(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeeDiscountCampaign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeDiscountCampaignParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClobPairId != 0 {
		n += 1 + sovFeeDiscountCampaign(uint64(m.ClobPairId))
	}
	if m.StartTimeUnix != 0 {
		n += 1 + sovFeeDiscountCampaign(uint64(m.StartTimeUnix))
	}
	if m.EndTimeUnix != 0 {
		n += 1 + sovFeeDiscountCampaign(uint64(m.EndTimeUnix))
	}
	if m.ChargePpm != 0 {
		n += 1 + sovFeeDiscountCampaign(uint64(m.ChargePpm))
	}
	return n
}

func sovFeeDiscountCampaign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeeDiscountCampaign(x uint64) (n int) {
	return sovFeeDiscountCampaign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeDiscountCampaignParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeDiscountCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeDiscountCampaignParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeDiscountCampaignParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClobPairId", wireType)
			}
			m.ClobPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeDiscountCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClobPairId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeUnix", wireType)
			}
			m.StartTimeUnix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeDiscountCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeUnix |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeUnix", wireType)
			}
			m.EndTimeUnix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeDiscountCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimeUnix |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePpm", wireType)
			}
			m.ChargePpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeDiscountCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChargePpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeDiscountCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeDiscountCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeeDiscountCampaign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeeDiscountCampaign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeDiscountCampaign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeDiscountCampaign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeeDiscountCampaign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeeDiscountCampaign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeeDiscountCampaign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeeDiscountCampaign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeeDiscountCampaign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeeDiscountCampaign = fmt.Errorf("proto: unexpected end of group")
)
