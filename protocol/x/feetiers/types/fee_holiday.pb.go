// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/feetiers/fee_holiday.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FeeHolidayParams defines a fee-free period for a specific CLOB pair
type FeeHolidayParams struct {
	// The CLOB Pair ID this fee holiday applies to
	ClobPairId uint32 `protobuf:"varint,1,opt,name=clob_pair_id,json=clobPairId,proto3" json:"clob_pair_id,omitempty"`
	// Start time (Unix timestamp in seconds)
	StartTimeUnix int64 `protobuf:"varint,2,opt,name=start_time_unix,json=startTimeUnix,proto3" json:"start_time_unix,omitempty"`
	// End time (Unix timestamp in seconds)
	EndTimeUnix int64 `protobuf:"varint,3,opt,name=end_time_unix,json=endTimeUnix,proto3" json:"end_time_unix,omitempty"`
}

func (m *FeeHolidayParams) Reset()         { *m = FeeHolidayParams{} }
func (m *FeeHolidayParams) String() string { return proto.CompactTextString(m) }
func (*FeeHolidayParams) ProtoMessage()    {}
func (*FeeHolidayParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_16bc2048338a22ea, []int{0}
}
func (m *FeeHolidayParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeHolidayParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeHolidayParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeHolidayParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeHolidayParams.Merge(m, src)
}
func (m *FeeHolidayParams) XXX_Size() int {
	return m.Size()
}
func (m *FeeHolidayParams) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeHolidayParams.DiscardUnknown(m)
}

var xxx_messageInfo_FeeHolidayParams proto.InternalMessageInfo

func (m *FeeHolidayParams) GetClobPairId() uint32 {
	if m != nil {
		return m.ClobPairId
	}
	return 0
}

func (m *FeeHolidayParams) GetStartTimeUnix() int64 {
	if m != nil {
		return m.StartTimeUnix
	}
	return 0
}

func (m *FeeHolidayParams) GetEndTimeUnix() int64 {
	if m != nil {
		return m.EndTimeUnix
	}
	return 0
}

func init() {
	proto.RegisterType((*FeeHolidayParams)(nil), "dydxprotocol.feetiers.FeeHolidayParams")
}

func init() {
	proto.RegisterFile("dydxprotocol/feetiers/fee_holiday.proto", fileDescriptor_16bc2048338a22ea)
}

var fileDescriptor_16bc2048338a22ea = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4f, 0xa9, 0x4c, 0xa9,
	0x28, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x4f, 0x4b, 0x4d, 0x2d, 0xc9, 0x4c, 0x2d,
	0x2a, 0x06, 0x31, 0xe2, 0x33, 0xf2, 0x73, 0x32, 0x53, 0x12, 0x2b, 0xf5, 0xc0, 0xb2, 0x42, 0xa2,
	0xc8, 0x0a, 0xf5, 0x60, 0x0a, 0x95, 0x1a, 0x18, 0xb9, 0x04, 0xdc, 0x52, 0x53, 0x3d, 0x20, 0x6a,
	0x03, 0x12, 0x8b, 0x12, 0x73, 0x8b, 0x85, 0x14, 0xb8, 0x78, 0x92, 0x73, 0xf2, 0x93, 0xe2, 0x0b,
	0x12, 0x33, 0x8b, 0xe2, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x83, 0xb8, 0x40, 0x62,
	0x01, 0x89, 0x99, 0x45, 0x9e, 0x29, 0x42, 0x6a, 0x5c, 0xfc, 0xc5, 0x25, 0x89, 0x45, 0x25, 0xf1,
	0x25, 0x99, 0xb9, 0xa9, 0xf1, 0xa5, 0x79, 0x99, 0x15, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41,
	0xbc, 0x60, 0xe1, 0x90, 0xcc, 0xdc, 0xd4, 0xd0, 0xbc, 0xcc, 0x0a, 0x21, 0x25, 0x2e, 0xde, 0xd4,
	0xbc, 0x14, 0x24, 0x55, 0xcc, 0x60, 0x55, 0xdc, 0xa9, 0x79, 0x29, 0x30, 0x35, 0x4e, 0x21, 0x27,
	0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c,
	0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x65, 0x95, 0x9e, 0x59, 0x92, 0x51, 0x9a,
	0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x8f, 0xe2, 0xcf, 0x32, 0x13, 0xdd, 0xe4, 0x8c, 0xc4, 0xcc, 0x3c,
	0x7d, 0xb8, 0x48, 0x05, 0xc2, 0xef, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x29, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xca, 0x35, 0x06, 0x21, 0x01, 0x00, 0x00,
}

func (m *FeeHolidayParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeHolidayParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeHolidayParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTimeUnix != 0 {
		i = encodeVarintFeeHoliday(dAtA, i, uint64(m.EndTimeUnix))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTimeUnix != 0 {
		i = encodeVarintFeeHoliday(dAtA, i, uint64(m.StartTimeUnix))
		i--
		dAtA[i] = 0x10
	}
	if m.ClobPairId != 0 {
		i = encodeVarintFeeHoliday(dAtA, i, uint64(m.ClobPairId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeeHoliday(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeeHoliday(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeHolidayParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClobPairId != 0 {
		n += 1 + sovFeeHoliday(uint64(m.ClobPairId))
	}
	if m.StartTimeUnix != 0 {
		n += 1 + sovFeeHoliday(uint64(m.StartTimeUnix))
	}
	if m.EndTimeUnix != 0 {
		n += 1 + sovFeeHoliday(uint64(m.EndTimeUnix))
	}
	return n
}

func sovFeeHoliday(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeeHoliday(x uint64) (n int) {
	return sovFeeHoliday(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeHolidayParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeHoliday
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeHolidayParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeHolidayParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClobPairId", wireType)
			}
			m.ClobPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeHoliday
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClobPairId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeUnix", wireType)
			}
			m.StartTimeUnix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeHoliday
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeUnix |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeUnix", wireType)
			}
			m.EndTimeUnix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeHoliday
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimeUnix |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeHoliday(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeHoliday
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeeHoliday(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeeHoliday
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeHoliday
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeHoliday
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeeHoliday
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeeHoliday
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeeHoliday
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeeHoliday        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeeHoliday          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeeHoliday = fmt.Errorf("proto: unexpected end of group")
)
