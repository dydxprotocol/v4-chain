// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/feetiers/staking_tier.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StakingTier defines all staking levels of a fee tier
type StakingTier struct {
	// Which fee tier this corresponds to
	FeeTierName string `protobuf:"bytes,1,opt,name=fee_tier_name,json=feeTierName,proto3" json:"fee_tier_name,omitempty"`
	// Staking levels for this tier (in strictly increasing order of staking
	// requirement)
	Levels []*StakingLevel `protobuf:"bytes,2,rep,name=levels,proto3" json:"levels,omitempty"`
}

func (m *StakingTier) Reset()         { *m = StakingTier{} }
func (m *StakingTier) String() string { return proto.CompactTextString(m) }
func (*StakingTier) ProtoMessage()    {}
func (*StakingTier) Descriptor() ([]byte, []int) {
	return fileDescriptor_1110902f4ade67b6, []int{0}
}
func (m *StakingTier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingTier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingTier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingTier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingTier.Merge(m, src)
}
func (m *StakingTier) XXX_Size() int {
	return m.Size()
}
func (m *StakingTier) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingTier.DiscardUnknown(m)
}

var xxx_messageInfo_StakingTier proto.InternalMessageInfo

func (m *StakingTier) GetFeeTierName() string {
	if m != nil {
		return m.FeeTierName
	}
	return ""
}

func (m *StakingTier) GetLevels() []*StakingLevel {
	if m != nil {
		return m.Levels
	}
	return nil
}

// StakingLevel defines how many staked native tokens qualifies for how much
// discount
type StakingLevel struct {
	// Minimum native tokens to stake (in base unit)
	MinStakedBaseTokens string `protobuf:"bytes,1,opt,name=min_staked_base_tokens,json=minStakedBaseTokens,proto3" json:"min_staked_base_tokens,omitempty"`
	// Fee discount in ppm (e.g. 1_000_000 is 100% discount)
	FeeDiscountPpm uint32 `protobuf:"varint,2,opt,name=fee_discount_ppm,json=feeDiscountPpm,proto3" json:"fee_discount_ppm,omitempty"`
}

func (m *StakingLevel) Reset()         { *m = StakingLevel{} }
func (m *StakingLevel) String() string { return proto.CompactTextString(m) }
func (*StakingLevel) ProtoMessage()    {}
func (*StakingLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_1110902f4ade67b6, []int{1}
}
func (m *StakingLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingLevel.Merge(m, src)
}
func (m *StakingLevel) XXX_Size() int {
	return m.Size()
}
func (m *StakingLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingLevel.DiscardUnknown(m)
}

var xxx_messageInfo_StakingLevel proto.InternalMessageInfo

func (m *StakingLevel) GetMinStakedBaseTokens() string {
	if m != nil {
		return m.MinStakedBaseTokens
	}
	return ""
}

func (m *StakingLevel) GetFeeDiscountPpm() uint32 {
	if m != nil {
		return m.FeeDiscountPpm
	}
	return 0
}

func init() {
	proto.RegisterType((*StakingTier)(nil), "dydxprotocol.feetiers.StakingTier")
	proto.RegisterType((*StakingLevel)(nil), "dydxprotocol.feetiers.StakingLevel")
}

func init() {
	proto.RegisterFile("dydxprotocol/feetiers/staking_tier.proto", fileDescriptor_1110902f4ade67b6)
}

var fileDescriptor_1110902f4ade67b6 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x9b, 0x09, 0x03, 0x53, 0x27, 0x52, 0x51, 0x7a, 0x0a, 0xa5, 0x5e, 0x7a, 0xb1, 0x05,
	0xe7, 0x49, 0x6f, 0xc3, 0xa3, 0x88, 0x74, 0x3d, 0x79, 0x09, 0x69, 0xfb, 0xba, 0x85, 0x35, 0x49,
	0x69, 0xb2, 0xb1, 0x7d, 0x0b, 0x3f, 0x96, 0xc7, 0x1d, 0x3d, 0x4a, 0xfb, 0x45, 0xa4, 0xb5, 0xea,
	0x04, 0x8f, 0xf9, 0xff, 0x7e, 0xef, 0xe5, 0xf1, 0xc7, 0x41, 0xbe, 0xcb, 0xb7, 0x55, 0xad, 0x8c,
	0xca, 0x54, 0x19, 0x15, 0x00, 0x86, 0x43, 0xad, 0x23, 0x6d, 0xd8, 0x8a, 0xcb, 0x05, 0xed, 0x5e,
	0x61, 0x8f, 0x9d, 0x8b, 0x43, 0x33, 0xfc, 0x36, 0x7d, 0x89, 0xed, 0xf9, 0x97, 0x9c, 0x70, 0xa8,
	0x1d, 0x1f, 0x4f, 0x0a, 0x80, 0x7e, 0x8e, 0x4a, 0x26, 0xc0, 0x45, 0x1e, 0x0a, 0x8e, 0x63, 0xbb,
	0x00, 0xe8, 0xf8, 0x13, 0x13, 0xe0, 0xdc, 0xe3, 0x71, 0x09, 0x1b, 0x28, 0xb5, 0x3b, 0xf2, 0x8e,
	0x02, 0xfb, 0xe6, 0x2a, 0xfc, 0x77, 0x75, 0x38, 0xec, 0x7d, 0xec, 0xdc, 0x78, 0x18, 0xf1, 0x05,
	0x3e, 0x39, 0xcc, 0x9d, 0x29, 0xbe, 0x14, 0x5c, 0xd2, 0xee, 0x60, 0xc8, 0x69, 0xca, 0x34, 0x50,
	0xa3, 0x56, 0x20, 0xf5, 0xf0, 0xf3, 0xb9, 0xe0, 0x72, 0xde, 0xc3, 0x19, 0xd3, 0x90, 0xf4, 0xc8,
	0x09, 0xf0, 0x59, 0x77, 0x65, 0xce, 0x75, 0xa6, 0xd6, 0xd2, 0xd0, 0xaa, 0x12, 0xee, 0xc8, 0x43,
	0xc1, 0x24, 0x3e, 0x2d, 0x00, 0x1e, 0x86, 0xf8, 0xb9, 0x12, 0xb3, 0xe4, 0xad, 0x21, 0x68, 0xdf,
	0x10, 0xf4, 0xd1, 0x10, 0xf4, 0xda, 0x12, 0x6b, 0xdf, 0x12, 0xeb, 0xbd, 0x25, 0xd6, 0xcb, 0xdd,
	0x82, 0x9b, 0xe5, 0x3a, 0x0d, 0x33, 0x25, 0xa2, 0x3f, 0x25, 0x6e, 0x6e, 0xaf, 0xb3, 0x25, 0xe3,
	0x32, 0xfa, 0x49, 0xb6, 0xbf, 0xc5, 0x9a, 0x5d, 0x05, 0x3a, 0x1d, 0xf7, 0x68, 0xfa, 0x19, 0x00,
	0x00, 0xff, 0xff, 0x08, 0xf6, 0x36, 0x6d, 0x7e, 0x01, 0x00, 0x00,
}

func (m *StakingTier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingTier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingTier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Levels) > 0 {
		for iNdEx := len(m.Levels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Levels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStakingTier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FeeTierName) > 0 {
		i -= len(m.FeeTierName)
		copy(dAtA[i:], m.FeeTierName)
		i = encodeVarintStakingTier(dAtA, i, uint64(len(m.FeeTierName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeDiscountPpm != 0 {
		i = encodeVarintStakingTier(dAtA, i, uint64(m.FeeDiscountPpm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MinStakedBaseTokens) > 0 {
		i -= len(m.MinStakedBaseTokens)
		copy(dAtA[i:], m.MinStakedBaseTokens)
		i = encodeVarintStakingTier(dAtA, i, uint64(len(m.MinStakedBaseTokens)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStakingTier(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakingTier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakingTier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeeTierName)
	if l > 0 {
		n += 1 + l + sovStakingTier(uint64(l))
	}
	if len(m.Levels) > 0 {
		for _, e := range m.Levels {
			l = e.Size()
			n += 1 + l + sovStakingTier(uint64(l))
		}
	}
	return n
}

func (m *StakingLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinStakedBaseTokens)
	if l > 0 {
		n += 1 + l + sovStakingTier(uint64(l))
	}
	if m.FeeDiscountPpm != 0 {
		n += 1 + sovStakingTier(uint64(m.FeeDiscountPpm))
	}
	return n
}

func sovStakingTier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakingTier(x uint64) (n int) {
	return sovStakingTier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakingTier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakingTier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingTier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingTier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTierName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingTier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingTier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingTier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTierName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Levels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingTier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakingTier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakingTier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Levels = append(m.Levels, &StakingLevel{})
			if err := m.Levels[len(m.Levels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakingTier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakingTier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakingTier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakedBaseTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingTier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingTier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingTier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinStakedBaseTokens = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeDiscountPpm", wireType)
			}
			m.FeeDiscountPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingTier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeDiscountPpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStakingTier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakingTier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakingTier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakingTier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingTier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingTier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakingTier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakingTier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakingTier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakingTier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakingTier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakingTier = fmt.Errorf("proto: unexpected end of group")
)
