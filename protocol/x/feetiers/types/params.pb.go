// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/feetiers/params.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PerpetualFeeParams defines the parameters for perpetual fees.
type PerpetualFeeParams struct {
	// Sorted fee tiers (lowest requirements first).
	Tiers []*PerpetualFeeTier `protobuf:"bytes,1,rep,name=tiers,proto3" json:"tiers,omitempty"`
}

func (m *PerpetualFeeParams) Reset()         { *m = PerpetualFeeParams{} }
func (m *PerpetualFeeParams) String() string { return proto.CompactTextString(m) }
func (*PerpetualFeeParams) ProtoMessage()    {}
func (*PerpetualFeeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2cb51fc3ff0866a, []int{0}
}
func (m *PerpetualFeeParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualFeeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualFeeParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualFeeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualFeeParams.Merge(m, src)
}
func (m *PerpetualFeeParams) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualFeeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualFeeParams.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualFeeParams proto.InternalMessageInfo

func (m *PerpetualFeeParams) GetTiers() []*PerpetualFeeTier {
	if m != nil {
		return m.Tiers
	}
	return nil
}

// A fee tier for perpetuals
type PerpetualFeeTier struct {
	// Human-readable name of the tier, e.g. "Gold".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The trader's absolute volume requirement in quote quantums.
	AbsoluteVolumeRequirement uint64 `protobuf:"varint,2,opt,name=absolute_volume_requirement,json=absoluteVolumeRequirement,proto3" json:"absolute_volume_requirement,omitempty"`
	// The total volume share requirement.
	TotalVolumeShareRequirementPpm uint32 `protobuf:"varint,3,opt,name=total_volume_share_requirement_ppm,json=totalVolumeShareRequirementPpm,proto3" json:"total_volume_share_requirement_ppm,omitempty"`
	// The maker volume share requirement.
	MakerVolumeShareRequirementPpm uint32 `protobuf:"varint,4,opt,name=maker_volume_share_requirement_ppm,json=makerVolumeShareRequirementPpm,proto3" json:"maker_volume_share_requirement_ppm,omitempty"`
	// The maker fee once this tier is reached.
	MakerFeePpm int32 `protobuf:"zigzag32,5,opt,name=maker_fee_ppm,json=makerFeePpm,proto3" json:"maker_fee_ppm,omitempty"`
	// The taker fee once this tier is reached.
	TakerFeePpm int32 `protobuf:"zigzag32,6,opt,name=taker_fee_ppm,json=takerFeePpm,proto3" json:"taker_fee_ppm,omitempty"`
}

func (m *PerpetualFeeTier) Reset()         { *m = PerpetualFeeTier{} }
func (m *PerpetualFeeTier) String() string { return proto.CompactTextString(m) }
func (*PerpetualFeeTier) ProtoMessage()    {}
func (*PerpetualFeeTier) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2cb51fc3ff0866a, []int{1}
}
func (m *PerpetualFeeTier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualFeeTier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualFeeTier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualFeeTier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualFeeTier.Merge(m, src)
}
func (m *PerpetualFeeTier) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualFeeTier) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualFeeTier.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualFeeTier proto.InternalMessageInfo

func (m *PerpetualFeeTier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PerpetualFeeTier) GetAbsoluteVolumeRequirement() uint64 {
	if m != nil {
		return m.AbsoluteVolumeRequirement
	}
	return 0
}

func (m *PerpetualFeeTier) GetTotalVolumeShareRequirementPpm() uint32 {
	if m != nil {
		return m.TotalVolumeShareRequirementPpm
	}
	return 0
}

func (m *PerpetualFeeTier) GetMakerVolumeShareRequirementPpm() uint32 {
	if m != nil {
		return m.MakerVolumeShareRequirementPpm
	}
	return 0
}

func (m *PerpetualFeeTier) GetMakerFeePpm() int32 {
	if m != nil {
		return m.MakerFeePpm
	}
	return 0
}

func (m *PerpetualFeeTier) GetTakerFeePpm() int32 {
	if m != nil {
		return m.TakerFeePpm
	}
	return 0
}

func init() {
	proto.RegisterType((*PerpetualFeeParams)(nil), "dydxprotocol.feetiers.PerpetualFeeParams")
	proto.RegisterType((*PerpetualFeeTier)(nil), "dydxprotocol.feetiers.PerpetualFeeTier")
}

func init() {
	proto.RegisterFile("dydxprotocol/feetiers/params.proto", fileDescriptor_c2cb51fc3ff0866a)
}

var fileDescriptor_c2cb51fc3ff0866a = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x3f, 0x4b, 0xfb, 0x40,
	0x1c, 0x87, 0x7b, 0xfd, 0x07, 0xbf, 0x2b, 0x85, 0x9f, 0x07, 0x42, 0x44, 0x38, 0x42, 0x16, 0xb3,
	0x98, 0x80, 0x3a, 0x09, 0x3a, 0x38, 0x38, 0x38, 0x95, 0x6b, 0x71, 0x70, 0x29, 0xd7, 0xf6, 0x5b,
	0x1b, 0xcc, 0xf5, 0xce, 0xcb, 0xa5, 0xb4, 0xef, 0xc2, 0x57, 0x25, 0x8e, 0x1d, 0x1d, 0xa5, 0x7d,
	0x23, 0xd2, 0x3b, 0x6a, 0x12, 0x51, 0xb7, 0xf0, 0xfd, 0x3c, 0xcf, 0x33, 0x24, 0xc1, 0xc1, 0x64,
	0x35, 0x59, 0x2a, 0x2d, 0x8d, 0x1c, 0xcb, 0x34, 0x9e, 0x02, 0x98, 0x04, 0x74, 0x16, 0x2b, 0xae,
	0xb9, 0xc8, 0x22, 0x3b, 0x90, 0xc3, 0x32, 0x13, 0xed, 0x99, 0xa0, 0x8f, 0x49, 0x0f, 0xb4, 0x02,
	0x93, 0xf3, 0xf4, 0x16, 0xa0, 0x67, 0x15, 0x72, 0x85, 0x5b, 0x76, 0xf6, 0x90, 0xdf, 0x08, 0x3b,
	0x67, 0x27, 0xd1, 0x8f, 0x72, 0x54, 0x36, 0x07, 0x09, 0x68, 0xe6, 0xac, 0xe0, 0xb5, 0x8e, 0xff,
	0x7f, 0xdf, 0x08, 0xc1, 0xcd, 0x39, 0x17, 0xe0, 0x21, 0x1f, 0x85, 0xff, 0x98, 0x7d, 0x26, 0xd7,
	0xf8, 0x98, 0x8f, 0x32, 0x99, 0xe6, 0x06, 0x86, 0x0b, 0x99, 0xe6, 0x02, 0x86, 0x1a, 0x9e, 0xf3,
	0x44, 0x83, 0x80, 0xb9, 0xf1, 0xea, 0x3e, 0x0a, 0x9b, 0xec, 0x68, 0x8f, 0xdc, 0x5b, 0x82, 0x15,
	0x00, 0xb9, 0xc3, 0x81, 0x91, 0x86, 0xa7, 0x7b, 0x39, 0x9b, 0x71, 0x5d, 0x49, 0x0c, 0x95, 0x12,
	0x5e, 0xc3, 0x47, 0x61, 0x97, 0x51, 0x4b, 0xba, 0x46, 0x7f, 0xc7, 0x95, 0x42, 0x3d, 0x25, 0x76,
	0x2d, 0xc1, 0x9f, 0x40, 0xff, 0xdd, 0x6a, 0xba, 0x96, 0x25, 0x7f, 0x6f, 0x05, 0xb8, 0xeb, 0x5a,
	0x53, 0x00, 0xab, 0xb5, 0x7c, 0x14, 0x1e, 0xb0, 0x8e, 0x3d, 0xee, 0x5e, 0xb3, 0x63, 0x4c, 0x85,
	0x69, 0x3b, 0xc6, 0x14, 0xcc, 0xcd, 0xe0, 0x6d, 0x43, 0xd1, 0x7a, 0x43, 0xd1, 0xc7, 0x86, 0xa2,
	0x97, 0x2d, 0xad, 0xad, 0xb7, 0xb4, 0xf6, 0xbe, 0xa5, 0xb5, 0x87, 0xcb, 0xc7, 0xc4, 0xcc, 0xf2,
	0x51, 0x34, 0x96, 0x22, 0xae, 0x7c, 0xfd, 0xc5, 0xc5, 0xe9, 0x78, 0xc6, 0x93, 0x79, 0xfc, 0x75,
	0x59, 0x16, 0x7f, 0x84, 0x59, 0x29, 0xc8, 0x46, 0x6d, 0x3b, 0x9d, 0x7f, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x90, 0x23, 0x7a, 0x77, 0x37, 0x02, 0x00, 0x00,
}

func (m *PerpetualFeeParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualFeeParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualFeeParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for iNdEx := len(m.Tiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualFeeTier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualFeeTier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualFeeTier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TakerFeePpm != 0 {
		i = encodeVarintParams(dAtA, i, uint64((uint32(m.TakerFeePpm)<<1)^uint32((m.TakerFeePpm>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.MakerFeePpm != 0 {
		i = encodeVarintParams(dAtA, i, uint64((uint32(m.MakerFeePpm)<<1)^uint32((m.MakerFeePpm>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.MakerVolumeShareRequirementPpm != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MakerVolumeShareRequirementPpm))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalVolumeShareRequirementPpm != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TotalVolumeShareRequirementPpm))
		i--
		dAtA[i] = 0x18
	}
	if m.AbsoluteVolumeRequirement != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.AbsoluteVolumeRequirement))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PerpetualFeeParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for _, e := range m.Tiers {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *PerpetualFeeTier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.AbsoluteVolumeRequirement != 0 {
		n += 1 + sovParams(uint64(m.AbsoluteVolumeRequirement))
	}
	if m.TotalVolumeShareRequirementPpm != 0 {
		n += 1 + sovParams(uint64(m.TotalVolumeShareRequirementPpm))
	}
	if m.MakerVolumeShareRequirementPpm != 0 {
		n += 1 + sovParams(uint64(m.MakerVolumeShareRequirementPpm))
	}
	if m.MakerFeePpm != 0 {
		n += 1 + sozParams(uint64(m.MakerFeePpm))
	}
	if m.TakerFeePpm != 0 {
		n += 1 + sozParams(uint64(m.TakerFeePpm))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PerpetualFeeParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualFeeParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualFeeParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, &PerpetualFeeTier{})
			if err := m.Tiers[len(m.Tiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualFeeTier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualFeeTier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualFeeTier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsoluteVolumeRequirement", wireType)
			}
			m.AbsoluteVolumeRequirement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbsoluteVolumeRequirement |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVolumeShareRequirementPpm", wireType)
			}
			m.TotalVolumeShareRequirementPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVolumeShareRequirementPpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerVolumeShareRequirementPpm", wireType)
			}
			m.MakerVolumeShareRequirementPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MakerVolumeShareRequirementPpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFeePpm", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MakerFeePpm = v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeePpm", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.TakerFeePpm = v
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
