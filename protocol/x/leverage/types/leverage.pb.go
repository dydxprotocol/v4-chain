// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/leverage/leverage.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateLeverage allows a user to update their leverage amount
type MsgUpdateLeverage struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Leverage  uint32 `protobuf:"varint,2,opt,name=leverage,proto3" json:"leverage,omitempty"`
}

func (m *MsgUpdateLeverage) Reset()         { *m = MsgUpdateLeverage{} }
func (m *MsgUpdateLeverage) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLeverage) ProtoMessage()    {}
func (*MsgUpdateLeverage) Descriptor() ([]byte, []int) {
	return fileDescriptor_580f2479b0acf71e, []int{0}
}
func (m *MsgUpdateLeverage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLeverage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLeverage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLeverage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLeverage.Merge(m, src)
}
func (m *MsgUpdateLeverage) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLeverage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLeverage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLeverage proto.InternalMessageInfo

func (m *MsgUpdateLeverage) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateLeverage) GetLeverage() uint32 {
	if m != nil {
		return m.Leverage
	}
	return 0
}

type MsgUpdateLeverageResponse struct {
}

func (m *MsgUpdateLeverageResponse) Reset()         { *m = MsgUpdateLeverageResponse{} }
func (m *MsgUpdateLeverageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLeverageResponse) ProtoMessage()    {}
func (*MsgUpdateLeverageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_580f2479b0acf71e, []int{1}
}
func (m *MsgUpdateLeverageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLeverageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLeverageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLeverageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLeverageResponse.Merge(m, src)
}
func (m *MsgUpdateLeverageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLeverageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLeverageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLeverageResponse proto.InternalMessageInfo

// LeverageParams defines the parameters for the leverage module
type LeverageParams struct {
	// max_leverage is the maximum leverage a user can set
	MaxLeverage uint32 `protobuf:"varint,1,opt,name=max_leverage,json=maxLeverage,proto3" json:"max_leverage,omitempty"`
	// min_leverage is the minimum leverage a user can set
	MinLeverage uint32 `protobuf:"varint,2,opt,name=min_leverage,json=minLeverage,proto3" json:"min_leverage,omitempty"`
}

func (m *LeverageParams) Reset()         { *m = LeverageParams{} }
func (m *LeverageParams) String() string { return proto.CompactTextString(m) }
func (*LeverageParams) ProtoMessage()    {}
func (*LeverageParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_580f2479b0acf71e, []int{2}
}
func (m *LeverageParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeverageParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeverageParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeverageParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeverageParams.Merge(m, src)
}
func (m *LeverageParams) XXX_Size() int {
	return m.Size()
}
func (m *LeverageParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LeverageParams.DiscardUnknown(m)
}

var xxx_messageInfo_LeverageParams proto.InternalMessageInfo

func (m *LeverageParams) GetMaxLeverage() uint32 {
	if m != nil {
		return m.MaxLeverage
	}
	return 0
}

func (m *LeverageParams) GetMinLeverage() uint32 {
	if m != nil {
		return m.MinLeverage
	}
	return 0
}

// LeverageInfo stores leverage information for a user
type LeverageInfo struct {
	UserAddress      string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	Leverage         uint32 `protobuf:"varint,2,opt,name=leverage,proto3" json:"leverage,omitempty"`
	LastUpdatedBlock int64  `protobuf:"varint,3,opt,name=last_updated_block,json=lastUpdatedBlock,proto3" json:"last_updated_block,omitempty"`
}

func (m *LeverageInfo) Reset()         { *m = LeverageInfo{} }
func (m *LeverageInfo) String() string { return proto.CompactTextString(m) }
func (*LeverageInfo) ProtoMessage()    {}
func (*LeverageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_580f2479b0acf71e, []int{3}
}
func (m *LeverageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeverageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeverageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeverageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeverageInfo.Merge(m, src)
}
func (m *LeverageInfo) XXX_Size() int {
	return m.Size()
}
func (m *LeverageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LeverageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LeverageInfo proto.InternalMessageInfo

func (m *LeverageInfo) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *LeverageInfo) GetLeverage() uint32 {
	if m != nil {
		return m.Leverage
	}
	return 0
}

func (m *LeverageInfo) GetLastUpdatedBlock() int64 {
	if m != nil {
		return m.LastUpdatedBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgUpdateLeverage)(nil), "dydxprotocol.leverage.MsgUpdateLeverage")
	proto.RegisterType((*MsgUpdateLeverageResponse)(nil), "dydxprotocol.leverage.MsgUpdateLeverageResponse")
	proto.RegisterType((*LeverageParams)(nil), "dydxprotocol.leverage.LeverageParams")
	proto.RegisterType((*LeverageInfo)(nil), "dydxprotocol.leverage.LeverageInfo")
}

func init() {
	proto.RegisterFile("dydxprotocol/leverage/leverage.proto", fileDescriptor_580f2479b0acf71e)
}

var fileDescriptor_580f2479b0acf71e = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0xa9, 0x4c, 0xa9,
	0x28, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0xcf, 0x49, 0x2d, 0x4b, 0x2d, 0x4a, 0x4c,
	0x4f, 0x85, 0x33, 0xf4, 0xc0, 0x52, 0x42, 0xa2, 0xc8, 0xaa, 0xf4, 0x60, 0x92, 0x52, 0xe2, 0xc9,
	0xf9, 0xc5, 0xb9, 0xf9, 0xc5, 0xfa, 0xb9, 0xc5, 0xe9, 0xfa, 0x65, 0x86, 0x20, 0x0a, 0xa2, 0x5e,
	0x4a, 0x12, 0x22, 0x11, 0x0f, 0xe6, 0xe9, 0x43, 0x38, 0x50, 0x29, 0x91, 0xf4, 0xfc, 0xf4, 0x7c,
	0x88, 0x38, 0x88, 0x05, 0x11, 0x55, 0x2a, 0xe7, 0x12, 0xf4, 0x2d, 0x4e, 0x0f, 0x2d, 0x48, 0x49,
	0x2c, 0x49, 0xf5, 0x81, 0x1a, 0x2f, 0x64, 0xc6, 0xc5, 0x99, 0x58, 0x5a, 0x92, 0x91, 0x5f, 0x94,
	0x59, 0x52, 0x29, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0xe9, 0x24, 0x71, 0x69, 0x8b, 0xae, 0x08, 0xd4,
	0x3c, 0xc7, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0xe2, 0xe0, 0x92, 0xa2, 0xcc, 0xbc, 0xf4, 0x20, 0x84,
	0x52, 0x21, 0x29, 0x2e, 0x0e, 0x98, 0x13, 0x25, 0x98, 0x14, 0x18, 0x35, 0x78, 0x83, 0xe0, 0x7c,
	0x2b, 0xbe, 0xa6, 0xe7, 0x1b, 0xb4, 0x10, 0x6a, 0x95, 0xa4, 0xb9, 0x24, 0x31, 0x2c, 0x0e, 0x4a,
	0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x55, 0x0a, 0xe3, 0xe2, 0x83, 0x89, 0x05, 0x24, 0x16, 0x25,
	0xe6, 0x16, 0x0b, 0x29, 0x72, 0xf1, 0xe4, 0x26, 0x56, 0xc4, 0xc3, 0x8d, 0x67, 0x04, 0x1b, 0xcf,
	0x9d, 0x9b, 0x58, 0x01, 0x77, 0x35, 0x48, 0x49, 0x66, 0x5e, 0x3c, 0x9a, 0x0b, 0xb8, 0x73, 0x33,
	0xf3, 0x60, 0x4a, 0x94, 0xaa, 0xb9, 0x78, 0x60, 0x6c, 0xcf, 0xbc, 0xb4, 0x7c, 0x90, 0x96, 0xd2,
	0xe2, 0xd4, 0xa2, 0xf8, 0x44, 0x88, 0x8f, 0x20, 0x7e, 0x0d, 0xe2, 0x06, 0x89, 0x41, 0x3d, 0x89,
	0xcf, 0x4f, 0x42, 0x3a, 0x5c, 0x42, 0x39, 0x89, 0xc5, 0x25, 0xf1, 0xa5, 0x60, 0x5f, 0xa4, 0xc4,
	0x27, 0xe5, 0xe4, 0x27, 0x67, 0x4b, 0x30, 0x2b, 0x30, 0x6a, 0x30, 0x07, 0x09, 0x80, 0x64, 0x20,
	0xde, 0x4b, 0x71, 0x02, 0x89, 0x1b, 0x15, 0x73, 0x31, 0xfb, 0x16, 0xa7, 0x0b, 0xe5, 0x70, 0xf1,
	0xa1, 0x05, 0xb7, 0x86, 0x1e, 0xd6, 0x58, 0xd6, 0xc3, 0x08, 0x1f, 0x29, 0x03, 0x62, 0x55, 0xc2,
	0x42, 0xd2, 0x29, 0xe4, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63,
	0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xac, 0xd2,
	0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x51, 0xd2, 0x62, 0x99, 0x89, 0x6e,
	0x72, 0x46, 0x62, 0x66, 0x9e, 0x3e, 0x5c, 0xa4, 0x02, 0x91, 0x3e, 0x4b, 0x2a, 0x0b, 0x52, 0x8b,
	0x93, 0xd8, 0xc0, 0x52, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x23, 0x4b, 0x19, 0xc5,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	UpdateLeverage(ctx context.Context, in *MsgUpdateLeverage, opts ...grpc.CallOption) (*MsgUpdateLeverageResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateLeverage(ctx context.Context, in *MsgUpdateLeverage, opts ...grpc.CallOption) (*MsgUpdateLeverageResponse, error) {
	out := new(MsgUpdateLeverageResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.leverage.Msg/UpdateLeverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	UpdateLeverage(context.Context, *MsgUpdateLeverage) (*MsgUpdateLeverageResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateLeverage(ctx context.Context, req *MsgUpdateLeverage) (*MsgUpdateLeverageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeverage not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateLeverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateLeverage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateLeverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.leverage.Msg/UpdateLeverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateLeverage(ctx, req.(*MsgUpdateLeverage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dydxprotocol.leverage.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateLeverage",
			Handler:    _Msg_UpdateLeverage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dydxprotocol/leverage/leverage.proto",
}

func (m *MsgUpdateLeverage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLeverage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLeverage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Leverage != 0 {
		i = encodeVarintLeverage(dAtA, i, uint64(m.Leverage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintLeverage(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLeverageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLeverageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLeverageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LeverageParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeverageParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeverageParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinLeverage != 0 {
		i = encodeVarintLeverage(dAtA, i, uint64(m.MinLeverage))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxLeverage != 0 {
		i = encodeVarintLeverage(dAtA, i, uint64(m.MaxLeverage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LeverageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeverageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeverageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpdatedBlock != 0 {
		i = encodeVarintLeverage(dAtA, i, uint64(m.LastUpdatedBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.Leverage != 0 {
		i = encodeVarintLeverage(dAtA, i, uint64(m.Leverage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintLeverage(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLeverage(dAtA []byte, offset int, v uint64) int {
	offset -= sovLeverage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateLeverage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovLeverage(uint64(l))
	}
	if m.Leverage != 0 {
		n += 1 + sovLeverage(uint64(m.Leverage))
	}
	return n
}

func (m *MsgUpdateLeverageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LeverageParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxLeverage != 0 {
		n += 1 + sovLeverage(uint64(m.MaxLeverage))
	}
	if m.MinLeverage != 0 {
		n += 1 + sovLeverage(uint64(m.MinLeverage))
	}
	return n
}

func (m *LeverageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovLeverage(uint64(l))
	}
	if m.Leverage != 0 {
		n += 1 + sovLeverage(uint64(m.Leverage))
	}
	if m.LastUpdatedBlock != 0 {
		n += 1 + sovLeverage(uint64(m.LastUpdatedBlock))
	}
	return n
}

func sovLeverage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLeverage(x uint64) (n int) {
	return sovLeverage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateLeverage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLeverage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLeverage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			m.Leverage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leverage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLeverage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLeverage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLeverageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLeverageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLeverageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLeverage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLeverage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeverageParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeverageParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeverageParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLeverage", wireType)
			}
			m.MaxLeverage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLeverage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLeverage", wireType)
			}
			m.MinLeverage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLeverage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLeverage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLeverage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeverageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeverageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeverageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeverage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeverage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			m.Leverage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leverage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedBlock", wireType)
			}
			m.LastUpdatedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLeverage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLeverage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLeverage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLeverage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeverage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLeverage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLeverage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLeverage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLeverage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLeverage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLeverage = fmt.Errorf("proto: unexpected end of group")
)
