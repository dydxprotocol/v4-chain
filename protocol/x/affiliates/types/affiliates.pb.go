// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/affiliates/affiliates.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AffiliateTiers defines the affiliate tiers.
type AffiliateTiers struct {
	// All affiliate tiers
	Tiers []AffiliateTiers_Tier `protobuf:"bytes,1,rep,name=tiers,proto3" json:"tiers"`
}

func (m *AffiliateTiers) Reset()         { *m = AffiliateTiers{} }
func (m *AffiliateTiers) String() string { return proto.CompactTextString(m) }
func (*AffiliateTiers) ProtoMessage()    {}
func (*AffiliateTiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_7de5ba9c426e9350, []int{0}
}
func (m *AffiliateTiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AffiliateTiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AffiliateTiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AffiliateTiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffiliateTiers.Merge(m, src)
}
func (m *AffiliateTiers) XXX_Size() int {
	return m.Size()
}
func (m *AffiliateTiers) XXX_DiscardUnknown() {
	xxx_messageInfo_AffiliateTiers.DiscardUnknown(m)
}

var xxx_messageInfo_AffiliateTiers proto.InternalMessageInfo

func (m *AffiliateTiers) GetTiers() []AffiliateTiers_Tier {
	if m != nil {
		return m.Tiers
	}
	return nil
}

// Tier defines an affiliate tier.
type AffiliateTiers_Tier struct {
	// Required all-time referred volume in quote quantums.
	ReqReferredVolumeQuoteQuantums uint64 `protobuf:"varint,1,opt,name=req_referred_volume_quote_quantums,json=reqReferredVolumeQuoteQuantums,proto3" json:"req_referred_volume_quote_quantums,omitempty"`
	// Required currently staked native tokens (in whole coins).
	ReqStakedWholeCoins uint32 `protobuf:"varint,2,opt,name=req_staked_whole_coins,json=reqStakedWholeCoins,proto3" json:"req_staked_whole_coins,omitempty"`
	// Taker fee share in parts-per-million.
	TakerFeeSharePpm uint32 `protobuf:"varint,3,opt,name=taker_fee_share_ppm,json=takerFeeSharePpm,proto3" json:"taker_fee_share_ppm,omitempty"`
}

func (m *AffiliateTiers_Tier) Reset()         { *m = AffiliateTiers_Tier{} }
func (m *AffiliateTiers_Tier) String() string { return proto.CompactTextString(m) }
func (*AffiliateTiers_Tier) ProtoMessage()    {}
func (*AffiliateTiers_Tier) Descriptor() ([]byte, []int) {
	return fileDescriptor_7de5ba9c426e9350, []int{0, 0}
}
func (m *AffiliateTiers_Tier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AffiliateTiers_Tier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AffiliateTiers_Tier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AffiliateTiers_Tier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffiliateTiers_Tier.Merge(m, src)
}
func (m *AffiliateTiers_Tier) XXX_Size() int {
	return m.Size()
}
func (m *AffiliateTiers_Tier) XXX_DiscardUnknown() {
	xxx_messageInfo_AffiliateTiers_Tier.DiscardUnknown(m)
}

var xxx_messageInfo_AffiliateTiers_Tier proto.InternalMessageInfo

func (m *AffiliateTiers_Tier) GetReqReferredVolumeQuoteQuantums() uint64 {
	if m != nil {
		return m.ReqReferredVolumeQuoteQuantums
	}
	return 0
}

func (m *AffiliateTiers_Tier) GetReqStakedWholeCoins() uint32 {
	if m != nil {
		return m.ReqStakedWholeCoins
	}
	return 0
}

func (m *AffiliateTiers_Tier) GetTakerFeeSharePpm() uint32 {
	if m != nil {
		return m.TakerFeeSharePpm
	}
	return 0
}

// AffiliateWhitelist specifies the whitelisted affiliates.
// If an address is in the whitelist, then the affiliate fee share in
// this object will override fee share from the regular affiliate tiers above.
type AffiliateWhitelist struct {
	// All affiliate whitelist tiers.
	Tiers []AffiliateWhitelist_Tier `protobuf:"bytes,1,rep,name=tiers,proto3" json:"tiers"`
}

func (m *AffiliateWhitelist) Reset()         { *m = AffiliateWhitelist{} }
func (m *AffiliateWhitelist) String() string { return proto.CompactTextString(m) }
func (*AffiliateWhitelist) ProtoMessage()    {}
func (*AffiliateWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_7de5ba9c426e9350, []int{1}
}
func (m *AffiliateWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AffiliateWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AffiliateWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AffiliateWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffiliateWhitelist.Merge(m, src)
}
func (m *AffiliateWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *AffiliateWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_AffiliateWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_AffiliateWhitelist proto.InternalMessageInfo

func (m *AffiliateWhitelist) GetTiers() []AffiliateWhitelist_Tier {
	if m != nil {
		return m.Tiers
	}
	return nil
}

// Tier defines an affiliate whitelist tier.
type AffiliateWhitelist_Tier struct {
	// List of unique whitelisted addresses.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Taker fee share in parts-per-million.
	TakerFeeSharePpm uint32 `protobuf:"varint,2,opt,name=taker_fee_share_ppm,json=takerFeeSharePpm,proto3" json:"taker_fee_share_ppm,omitempty"`
}

func (m *AffiliateWhitelist_Tier) Reset()         { *m = AffiliateWhitelist_Tier{} }
func (m *AffiliateWhitelist_Tier) String() string { return proto.CompactTextString(m) }
func (*AffiliateWhitelist_Tier) ProtoMessage()    {}
func (*AffiliateWhitelist_Tier) Descriptor() ([]byte, []int) {
	return fileDescriptor_7de5ba9c426e9350, []int{1, 0}
}
func (m *AffiliateWhitelist_Tier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AffiliateWhitelist_Tier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AffiliateWhitelist_Tier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AffiliateWhitelist_Tier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffiliateWhitelist_Tier.Merge(m, src)
}
func (m *AffiliateWhitelist_Tier) XXX_Size() int {
	return m.Size()
}
func (m *AffiliateWhitelist_Tier) XXX_DiscardUnknown() {
	xxx_messageInfo_AffiliateWhitelist_Tier.DiscardUnknown(m)
}

var xxx_messageInfo_AffiliateWhitelist_Tier proto.InternalMessageInfo

func (m *AffiliateWhitelist_Tier) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *AffiliateWhitelist_Tier) GetTakerFeeSharePpm() uint32 {
	if m != nil {
		return m.TakerFeeSharePpm
	}
	return 0
}

// AffiliateParameters defines the parameters for the affiliate program.
type AffiliateParameters struct {
	// Maximum commission per referred user in a 30d rolling window in revenue
	Maximum_30DCommissionPerReferredUserQuoteQuantums uint64 `protobuf:"varint,1,opt,name=maximum_30d_commission_per_referred_user_quote_quantums,json=maximum30dCommissionPerReferredUserQuoteQuantums,proto3" json:"maximum_30d_commission_per_referred_user_quote_quantums,omitempty"`
	// Referee minimum fee tier index
	RefereeMinimumFeeTierIdx uint32 `protobuf:"varint,2,opt,name=referee_minimum_fee_tier_idx,json=refereeMinimumFeeTierIdx,proto3" json:"referee_minimum_fee_tier_idx,omitempty"`
	// Maximum attributable revenue per referred user in a 30d rolling window in
	// revenue
	Maximum_30DAttributableRevenuePerReferredUserQuoteQuantums uint64 `protobuf:"varint,3,opt,name=maximum_30d_attributable_revenue_per_referred_user_quote_quantums,json=maximum30dAttributableRevenuePerReferredUserQuoteQuantums,proto3" json:"maximum_30d_attributable_revenue_per_referred_user_quote_quantums,omitempty"`
}

func (m *AffiliateParameters) Reset()         { *m = AffiliateParameters{} }
func (m *AffiliateParameters) String() string { return proto.CompactTextString(m) }
func (*AffiliateParameters) ProtoMessage()    {}
func (*AffiliateParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_7de5ba9c426e9350, []int{2}
}
func (m *AffiliateParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AffiliateParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AffiliateParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AffiliateParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffiliateParameters.Merge(m, src)
}
func (m *AffiliateParameters) XXX_Size() int {
	return m.Size()
}
func (m *AffiliateParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_AffiliateParameters.DiscardUnknown(m)
}

var xxx_messageInfo_AffiliateParameters proto.InternalMessageInfo

func (m *AffiliateParameters) GetMaximum_30DCommissionPerReferredUserQuoteQuantums() uint64 {
	if m != nil {
		return m.Maximum_30DCommissionPerReferredUserQuoteQuantums
	}
	return 0
}

func (m *AffiliateParameters) GetRefereeMinimumFeeTierIdx() uint32 {
	if m != nil {
		return m.RefereeMinimumFeeTierIdx
	}
	return 0
}

func (m *AffiliateParameters) GetMaximum_30DAttributableRevenuePerReferredUserQuoteQuantums() uint64 {
	if m != nil {
		return m.Maximum_30DAttributableRevenuePerReferredUserQuoteQuantums
	}
	return 0
}

// AffiliateOverrides defines the affiliate whitelist.
type AffiliateOverrides struct {
	// List of unique whitelisted addresses.
	// These are automatically put at the maximum affiliate tier
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *AffiliateOverrides) Reset()         { *m = AffiliateOverrides{} }
func (m *AffiliateOverrides) String() string { return proto.CompactTextString(m) }
func (*AffiliateOverrides) ProtoMessage()    {}
func (*AffiliateOverrides) Descriptor() ([]byte, []int) {
	return fileDescriptor_7de5ba9c426e9350, []int{3}
}
func (m *AffiliateOverrides) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AffiliateOverrides) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AffiliateOverrides.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AffiliateOverrides) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffiliateOverrides.Merge(m, src)
}
func (m *AffiliateOverrides) XXX_Size() int {
	return m.Size()
}
func (m *AffiliateOverrides) XXX_DiscardUnknown() {
	xxx_messageInfo_AffiliateOverrides.DiscardUnknown(m)
}

var xxx_messageInfo_AffiliateOverrides proto.InternalMessageInfo

func (m *AffiliateOverrides) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func init() {
	proto.RegisterType((*AffiliateTiers)(nil), "dydxprotocol.affiliates.AffiliateTiers")
	proto.RegisterType((*AffiliateTiers_Tier)(nil), "dydxprotocol.affiliates.AffiliateTiers.Tier")
	proto.RegisterType((*AffiliateWhitelist)(nil), "dydxprotocol.affiliates.AffiliateWhitelist")
	proto.RegisterType((*AffiliateWhitelist_Tier)(nil), "dydxprotocol.affiliates.AffiliateWhitelist.Tier")
	proto.RegisterType((*AffiliateParameters)(nil), "dydxprotocol.affiliates.AffiliateParameters")
	proto.RegisterType((*AffiliateOverrides)(nil), "dydxprotocol.affiliates.AffiliateOverrides")
}

func init() {
	proto.RegisterFile("dydxprotocol/affiliates/affiliates.proto", fileDescriptor_7de5ba9c426e9350)
}

var fileDescriptor_7de5ba9c426e9350 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcf, 0x6a, 0x13, 0x41,
	0x1c, 0xce, 0xa6, 0x51, 0xe8, 0x88, 0x22, 0x9b, 0xa2, 0x31, 0x94, 0xb5, 0xe4, 0x94, 0x83, 0xd9,
	0x04, 0x23, 0x8a, 0x20, 0x42, 0x52, 0x28, 0x2a, 0x15, 0xd3, 0x8d, 0xb6, 0xe0, 0x65, 0x98, 0xec,
	0xfe, 0x92, 0x0c, 0xee, 0xec, 0x6c, 0x66, 0x66, 0x63, 0x7a, 0xf7, 0x01, 0x04, 0x5f, 0x45, 0xf4,
	0x15, 0x7a, 0xb3, 0x78, 0xf2, 0x24, 0x92, 0xbc, 0x88, 0xcc, 0xec, 0x36, 0xd9, 0x60, 0x63, 0x2f,
	0xcb, 0xe4, 0xf7, 0x7d, 0xdf, 0xef, 0xdf, 0x37, 0x19, 0x54, 0x0f, 0x4e, 0x83, 0x59, 0x2c, 0xb8,
	0xe2, 0x3e, 0x0f, 0x9b, 0x64, 0x38, 0xa4, 0x21, 0x25, 0x0a, 0x64, 0xee, 0xe8, 0x1a, 0xd8, 0xbe,
	0x9b, 0x67, 0xba, 0x2b, 0xb8, 0x7a, 0xcf, 0xe7, 0x92, 0x71, 0x89, 0x0d, 0xd6, 0x4c, 0x7f, 0xa4,
	0x9a, 0xea, 0xce, 0x88, 0x8f, 0x78, 0x1a, 0xd7, 0xa7, 0x34, 0x5a, 0xfb, 0x52, 0x44, 0xb7, 0x3a,
	0x17, 0xfa, 0xb7, 0x14, 0x84, 0xb4, 0x5f, 0xa0, 0x6b, 0x4a, 0x1f, 0x2a, 0xd6, 0xde, 0x56, 0xfd,
	0xc6, 0xc3, 0x07, 0xee, 0x86, 0x62, 0xee, 0xba, 0xce, 0xd5, 0xdf, 0x6e, 0xe9, 0xec, 0xf7, 0xfd,
	0x82, 0x97, 0x26, 0xa8, 0x7e, 0xb3, 0x50, 0x49, 0x47, 0xed, 0x57, 0xa8, 0x26, 0x60, 0x82, 0x05,
	0x0c, 0x41, 0x08, 0x08, 0xf0, 0x94, 0x87, 0x09, 0x03, 0x3c, 0x49, 0xb8, 0xd2, 0x5f, 0x12, 0xa9,
	0x84, 0xe9, 0x7a, 0x56, 0xbd, 0xe4, 0x39, 0x02, 0x26, 0x5e, 0x46, 0x3c, 0x36, 0xbc, 0x23, 0x4d,
	0x3b, 0xca, 0x58, 0x76, 0x1b, 0xdd, 0xd1, 0xb9, 0xa4, 0x22, 0x1f, 0x20, 0xc0, 0x1f, 0xc7, 0x3c,
	0x04, 0xec, 0x73, 0x1a, 0xc9, 0x4a, 0x71, 0xcf, 0xaa, 0xdf, 0xf4, 0xca, 0x02, 0x26, 0x7d, 0x03,
	0x9e, 0x68, 0x6c, 0x5f, 0x43, 0x76, 0x03, 0x95, 0x75, 0x48, 0xe0, 0x21, 0x00, 0x96, 0x63, 0x22,
	0x00, 0xc7, 0x31, 0xab, 0x6c, 0x19, 0xc5, 0x6d, 0x03, 0x1d, 0x00, 0xf4, 0x35, 0xd0, 0x8b, 0x59,
	0xed, 0xbb, 0x85, 0xec, 0xe5, 0x74, 0x27, 0x63, 0xaa, 0x20, 0xa4, 0x52, 0xd9, 0x87, 0xeb, 0x9b,
	0x69, 0x5d, 0xbd, 0x99, 0xa5, 0xf6, 0x92, 0xed, 0xf4, 0xb3, 0xe5, 0xec, 0xa2, 0x6d, 0x12, 0x04,
	0x02, 0xa4, 0x84, 0x34, 0xf3, 0xb6, 0xb7, 0x0a, 0x6c, 0xea, 0xbc, 0xb8, 0xa1, 0xf3, 0x1f, 0x45,
	0x54, 0x5e, 0x56, 0xef, 0x11, 0x41, 0x18, 0x28, 0x6d, 0xea, 0x04, 0x3d, 0x61, 0x64, 0x46, 0x59,
	0xc2, 0x70, 0xbb, 0x15, 0x60, 0x9f, 0x33, 0x46, 0xa5, 0xa4, 0x3c, 0xc2, 0x31, 0x88, 0x95, 0x31,
	0x89, 0x04, 0x71, 0xb9, 0x2d, 0xad, 0x4c, 0xde, 0x6e, 0x05, 0xfb, 0x4b, 0x71, 0x0f, 0xc4, 0x85,
	0x55, 0xef, 0x24, 0x88, 0x75, 0xa3, 0x9e, 0xa3, 0x5d, 0x93, 0x17, 0x00, 0x33, 0x1a, 0x99, 0xd2,
	0x7a, 0x06, 0x3d, 0x3c, 0xa6, 0xc1, 0x2c, 0x1b, 0xa1, 0x92, 0x71, 0x5e, 0xa7, 0x94, 0x03, 0x30,
	0xb7, 0xe9, 0x65, 0x30, 0xb3, 0x3f, 0x59, 0xa8, 0x93, 0xef, 0x99, 0x28, 0x25, 0xe8, 0x20, 0x51,
	0x64, 0x10, 0x02, 0x16, 0x30, 0x85, 0x28, 0x81, 0xab, 0xbb, 0xdf, 0x32, 0xdd, 0x3f, 0x5d, 0x75,
	0xdf, 0xc9, 0xa5, 0xf1, 0xd2, 0x2c, 0xff, 0x1b, 0xa3, 0x76, 0x98, 0xbb, 0x0a, 0x6f, 0xa6, 0x20,
	0x04, 0x0d, 0x40, 0xda, 0x8f, 0xff, 0x31, 0xad, 0x5b, 0xf9, 0xf9, 0xb5, 0xb1, 0x93, 0xfd, 0xe5,
	0x3a, 0x29, 0xd6, 0x57, 0x82, 0x46, 0xa3, 0x9c, 0x9d, 0xdd, 0xe3, 0xb3, 0xb9, 0x63, 0x9d, 0xcf,
	0x1d, 0xeb, 0xcf, 0xdc, 0xb1, 0x3e, 0x2f, 0x9c, 0xc2, 0xf9, 0xc2, 0x29, 0xfc, 0x5a, 0x38, 0x85,
	0xf7, 0xcf, 0x46, 0x54, 0x8d, 0x93, 0x81, 0xeb, 0x73, 0xd6, 0x5c, 0x7b, 0x08, 0xa6, 0x8f, 0x1a,
	0xfe, 0x98, 0xd0, 0xa8, 0xb9, 0x8c, 0xcc, 0xf2, 0x8f, 0x83, 0x3a, 0x8d, 0x41, 0x0e, 0xae, 0x1b,
	0xb0, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xa7, 0xb5, 0xdd, 0x44, 0x04, 0x00, 0x00,
}

func (m *AffiliateTiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffiliateTiers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AffiliateTiers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for iNdEx := len(m.Tiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAffiliates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AffiliateTiers_Tier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffiliateTiers_Tier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AffiliateTiers_Tier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TakerFeeSharePpm != 0 {
		i = encodeVarintAffiliates(dAtA, i, uint64(m.TakerFeeSharePpm))
		i--
		dAtA[i] = 0x18
	}
	if m.ReqStakedWholeCoins != 0 {
		i = encodeVarintAffiliates(dAtA, i, uint64(m.ReqStakedWholeCoins))
		i--
		dAtA[i] = 0x10
	}
	if m.ReqReferredVolumeQuoteQuantums != 0 {
		i = encodeVarintAffiliates(dAtA, i, uint64(m.ReqReferredVolumeQuoteQuantums))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AffiliateWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffiliateWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AffiliateWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for iNdEx := len(m.Tiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAffiliates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AffiliateWhitelist_Tier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffiliateWhitelist_Tier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AffiliateWhitelist_Tier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TakerFeeSharePpm != 0 {
		i = encodeVarintAffiliates(dAtA, i, uint64(m.TakerFeeSharePpm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintAffiliates(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AffiliateParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffiliateParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AffiliateParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Maximum_30DAttributableRevenuePerReferredUserQuoteQuantums != 0 {
		i = encodeVarintAffiliates(dAtA, i, uint64(m.Maximum_30DAttributableRevenuePerReferredUserQuoteQuantums))
		i--
		dAtA[i] = 0x18
	}
	if m.RefereeMinimumFeeTierIdx != 0 {
		i = encodeVarintAffiliates(dAtA, i, uint64(m.RefereeMinimumFeeTierIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.Maximum_30DCommissionPerReferredUserQuoteQuantums != 0 {
		i = encodeVarintAffiliates(dAtA, i, uint64(m.Maximum_30DCommissionPerReferredUserQuoteQuantums))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AffiliateOverrides) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffiliateOverrides) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AffiliateOverrides) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintAffiliates(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAffiliates(dAtA []byte, offset int, v uint64) int {
	offset -= sovAffiliates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AffiliateTiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for _, e := range m.Tiers {
			l = e.Size()
			n += 1 + l + sovAffiliates(uint64(l))
		}
	}
	return n
}

func (m *AffiliateTiers_Tier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReqReferredVolumeQuoteQuantums != 0 {
		n += 1 + sovAffiliates(uint64(m.ReqReferredVolumeQuoteQuantums))
	}
	if m.ReqStakedWholeCoins != 0 {
		n += 1 + sovAffiliates(uint64(m.ReqStakedWholeCoins))
	}
	if m.TakerFeeSharePpm != 0 {
		n += 1 + sovAffiliates(uint64(m.TakerFeeSharePpm))
	}
	return n
}

func (m *AffiliateWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tiers) > 0 {
		for _, e := range m.Tiers {
			l = e.Size()
			n += 1 + l + sovAffiliates(uint64(l))
		}
	}
	return n
}

func (m *AffiliateWhitelist_Tier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovAffiliates(uint64(l))
		}
	}
	if m.TakerFeeSharePpm != 0 {
		n += 1 + sovAffiliates(uint64(m.TakerFeeSharePpm))
	}
	return n
}

func (m *AffiliateParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Maximum_30DCommissionPerReferredUserQuoteQuantums != 0 {
		n += 1 + sovAffiliates(uint64(m.Maximum_30DCommissionPerReferredUserQuoteQuantums))
	}
	if m.RefereeMinimumFeeTierIdx != 0 {
		n += 1 + sovAffiliates(uint64(m.RefereeMinimumFeeTierIdx))
	}
	if m.Maximum_30DAttributableRevenuePerReferredUserQuoteQuantums != 0 {
		n += 1 + sovAffiliates(uint64(m.Maximum_30DAttributableRevenuePerReferredUserQuoteQuantums))
	}
	return n
}

func (m *AffiliateOverrides) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovAffiliates(uint64(l))
		}
	}
	return n
}

func sovAffiliates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAffiliates(x uint64) (n int) {
	return sovAffiliates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AffiliateTiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAffiliates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AffiliateTiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AffiliateTiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAffiliates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAffiliates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, AffiliateTiers_Tier{})
			if err := m.Tiers[len(m.Tiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAffiliates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAffiliates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AffiliateTiers_Tier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAffiliates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqReferredVolumeQuoteQuantums", wireType)
			}
			m.ReqReferredVolumeQuoteQuantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqReferredVolumeQuoteQuantums |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqStakedWholeCoins", wireType)
			}
			m.ReqStakedWholeCoins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqStakedWholeCoins |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeeSharePpm", wireType)
			}
			m.TakerFeeSharePpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakerFeeSharePpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAffiliates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAffiliates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AffiliateWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAffiliates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AffiliateWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AffiliateWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAffiliates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAffiliates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, AffiliateWhitelist_Tier{})
			if err := m.Tiers[len(m.Tiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAffiliates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAffiliates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AffiliateWhitelist_Tier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAffiliates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAffiliates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAffiliates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeeSharePpm", wireType)
			}
			m.TakerFeeSharePpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakerFeeSharePpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAffiliates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAffiliates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AffiliateParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAffiliates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AffiliateParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AffiliateParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum_30DCommissionPerReferredUserQuoteQuantums", wireType)
			}
			m.Maximum_30DCommissionPerReferredUserQuoteQuantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum_30DCommissionPerReferredUserQuoteQuantums |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefereeMinimumFeeTierIdx", wireType)
			}
			m.RefereeMinimumFeeTierIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefereeMinimumFeeTierIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum_30DAttributableRevenuePerReferredUserQuoteQuantums", wireType)
			}
			m.Maximum_30DAttributableRevenuePerReferredUserQuoteQuantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum_30DAttributableRevenuePerReferredUserQuoteQuantums |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAffiliates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAffiliates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AffiliateOverrides) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAffiliates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AffiliateOverrides: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AffiliateOverrides: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAffiliates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAffiliates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAffiliates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAffiliates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAffiliates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAffiliates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAffiliates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAffiliates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAffiliates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAffiliates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAffiliates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAffiliates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAffiliates = fmt.Errorf("proto: unexpected end of group")
)
