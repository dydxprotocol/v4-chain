// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/listing/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/dydxprotocol/v4-chain/protocol/x/subaccounts/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetMarketsHardCap is used to set a hard cap on the number of markets
// listed
type MsgSetMarketsHardCap struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Hard cap for the total number of markets listed
	HardCapForMarkets uint32 `protobuf:"varint,2,opt,name=hard_cap_for_markets,json=hardCapForMarkets,proto3" json:"hard_cap_for_markets,omitempty"`
}

func (m *MsgSetMarketsHardCap) Reset()         { *m = MsgSetMarketsHardCap{} }
func (m *MsgSetMarketsHardCap) String() string { return proto.CompactTextString(m) }
func (*MsgSetMarketsHardCap) ProtoMessage()    {}
func (*MsgSetMarketsHardCap) Descriptor() ([]byte, []int) {
	return fileDescriptor_144a579c1e2dcb94, []int{0}
}
func (m *MsgSetMarketsHardCap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMarketsHardCap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMarketsHardCap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMarketsHardCap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMarketsHardCap.Merge(m, src)
}
func (m *MsgSetMarketsHardCap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMarketsHardCap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMarketsHardCap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMarketsHardCap proto.InternalMessageInfo

func (m *MsgSetMarketsHardCap) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSetMarketsHardCap) GetHardCapForMarkets() uint32 {
	if m != nil {
		return m.HardCapForMarkets
	}
	return 0
}

// MsgSetMarketsHardCapResponse defines the MsgSetMarketsHardCap response
type MsgSetMarketsHardCapResponse struct {
}

func (m *MsgSetMarketsHardCapResponse) Reset()         { *m = MsgSetMarketsHardCapResponse{} }
func (m *MsgSetMarketsHardCapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMarketsHardCapResponse) ProtoMessage()    {}
func (*MsgSetMarketsHardCapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_144a579c1e2dcb94, []int{1}
}
func (m *MsgSetMarketsHardCapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMarketsHardCapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMarketsHardCapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMarketsHardCapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMarketsHardCapResponse.Merge(m, src)
}
func (m *MsgSetMarketsHardCapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMarketsHardCapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMarketsHardCapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMarketsHardCapResponse proto.InternalMessageInfo

// MsgCreateMarketPermissionless is a message used to create new markets without
// going through x/gov
type MsgCreateMarketPermissionless struct {
	// The name of the `Perpetual` (e.g. `BTC-USD`).
	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// The subaccount to deposit from.
	SubaccountId *types.SubaccountId `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *MsgCreateMarketPermissionless) Reset()         { *m = MsgCreateMarketPermissionless{} }
func (m *MsgCreateMarketPermissionless) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMarketPermissionless) ProtoMessage()    {}
func (*MsgCreateMarketPermissionless) Descriptor() ([]byte, []int) {
	return fileDescriptor_144a579c1e2dcb94, []int{2}
}
func (m *MsgCreateMarketPermissionless) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMarketPermissionless) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMarketPermissionless.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMarketPermissionless) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMarketPermissionless.Merge(m, src)
}
func (m *MsgCreateMarketPermissionless) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMarketPermissionless) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMarketPermissionless.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMarketPermissionless proto.InternalMessageInfo

func (m *MsgCreateMarketPermissionless) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *MsgCreateMarketPermissionless) GetSubaccountId() *types.SubaccountId {
	if m != nil {
		return m.SubaccountId
	}
	return nil
}

// MsgCreateMarketPermissionlessResponse defines the
// MsgCreateMarketPermissionless response
type MsgCreateMarketPermissionlessResponse struct {
}

func (m *MsgCreateMarketPermissionlessResponse) Reset()         { *m = MsgCreateMarketPermissionlessResponse{} }
func (m *MsgCreateMarketPermissionlessResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMarketPermissionlessResponse) ProtoMessage()    {}
func (*MsgCreateMarketPermissionlessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_144a579c1e2dcb94, []int{3}
}
func (m *MsgCreateMarketPermissionlessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMarketPermissionlessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMarketPermissionlessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMarketPermissionlessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMarketPermissionlessResponse.Merge(m, src)
}
func (m *MsgCreateMarketPermissionlessResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMarketPermissionlessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMarketPermissionlessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMarketPermissionlessResponse proto.InternalMessageInfo

// MsgSetListingVaultDepositParams is a message used to set PML megavault
// deposit params
type MsgSetListingVaultDepositParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Params which define the vault deposit for market listing
	Params ListingVaultDepositParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgSetListingVaultDepositParams) Reset()         { *m = MsgSetListingVaultDepositParams{} }
func (m *MsgSetListingVaultDepositParams) String() string { return proto.CompactTextString(m) }
func (*MsgSetListingVaultDepositParams) ProtoMessage()    {}
func (*MsgSetListingVaultDepositParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_144a579c1e2dcb94, []int{4}
}
func (m *MsgSetListingVaultDepositParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetListingVaultDepositParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetListingVaultDepositParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetListingVaultDepositParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetListingVaultDepositParams.Merge(m, src)
}
func (m *MsgSetListingVaultDepositParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetListingVaultDepositParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetListingVaultDepositParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetListingVaultDepositParams proto.InternalMessageInfo

func (m *MsgSetListingVaultDepositParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSetListingVaultDepositParams) GetParams() ListingVaultDepositParams {
	if m != nil {
		return m.Params
	}
	return ListingVaultDepositParams{}
}

// MsgSetListingVaultDepositParamsResponse defines the
// MsgSetListingVaultDepositParams response
type MsgSetListingVaultDepositParamsResponse struct {
}

func (m *MsgSetListingVaultDepositParamsResponse) Reset() {
	*m = MsgSetListingVaultDepositParamsResponse{}
}
func (m *MsgSetListingVaultDepositParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetListingVaultDepositParamsResponse) ProtoMessage()    {}
func (*MsgSetListingVaultDepositParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_144a579c1e2dcb94, []int{5}
}
func (m *MsgSetListingVaultDepositParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetListingVaultDepositParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetListingVaultDepositParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetListingVaultDepositParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetListingVaultDepositParamsResponse.Merge(m, src)
}
func (m *MsgSetListingVaultDepositParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetListingVaultDepositParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetListingVaultDepositParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetListingVaultDepositParamsResponse proto.InternalMessageInfo

// MsgUpgradeIsolatedPerpetualToCross is used to upgrade a market from
// isolated margin to cross margin.
type MsgUpgradeIsolatedPerpetualToCross struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// ID of the perpetual to be upgraded to CROSS
	PerpetualId uint32 `protobuf:"varint,2,opt,name=perpetual_id,json=perpetualId,proto3" json:"perpetual_id,omitempty"`
}

func (m *MsgUpgradeIsolatedPerpetualToCross) Reset()         { *m = MsgUpgradeIsolatedPerpetualToCross{} }
func (m *MsgUpgradeIsolatedPerpetualToCross) String() string { return proto.CompactTextString(m) }
func (*MsgUpgradeIsolatedPerpetualToCross) ProtoMessage()    {}
func (*MsgUpgradeIsolatedPerpetualToCross) Descriptor() ([]byte, []int) {
	return fileDescriptor_144a579c1e2dcb94, []int{6}
}
func (m *MsgUpgradeIsolatedPerpetualToCross) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradeIsolatedPerpetualToCross) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCross.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradeIsolatedPerpetualToCross) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCross.Merge(m, src)
}
func (m *MsgUpgradeIsolatedPerpetualToCross) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradeIsolatedPerpetualToCross) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCross.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCross proto.InternalMessageInfo

func (m *MsgUpgradeIsolatedPerpetualToCross) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpgradeIsolatedPerpetualToCross) GetPerpetualId() uint32 {
	if m != nil {
		return m.PerpetualId
	}
	return 0
}

// MsgUpgradeIsolatedPerpetualToCrossResponse defines the
// UpgradeIsolatedPerpetualToCross response type.
type MsgUpgradeIsolatedPerpetualToCrossResponse struct {
}

func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) Reset() {
	*m = MsgUpgradeIsolatedPerpetualToCrossResponse{}
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpgradeIsolatedPerpetualToCrossResponse) ProtoMessage() {}
func (*MsgUpgradeIsolatedPerpetualToCrossResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_144a579c1e2dcb94, []int{7}
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCrossResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCrossResponse.Merge(m, src)
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCrossResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCrossResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSetMarketsHardCap)(nil), "dydxprotocol.listing.MsgSetMarketsHardCap")
	proto.RegisterType((*MsgSetMarketsHardCapResponse)(nil), "dydxprotocol.listing.MsgSetMarketsHardCapResponse")
	proto.RegisterType((*MsgCreateMarketPermissionless)(nil), "dydxprotocol.listing.MsgCreateMarketPermissionless")
	proto.RegisterType((*MsgCreateMarketPermissionlessResponse)(nil), "dydxprotocol.listing.MsgCreateMarketPermissionlessResponse")
	proto.RegisterType((*MsgSetListingVaultDepositParams)(nil), "dydxprotocol.listing.MsgSetListingVaultDepositParams")
	proto.RegisterType((*MsgSetListingVaultDepositParamsResponse)(nil), "dydxprotocol.listing.MsgSetListingVaultDepositParamsResponse")
	proto.RegisterType((*MsgUpgradeIsolatedPerpetualToCross)(nil), "dydxprotocol.listing.MsgUpgradeIsolatedPerpetualToCross")
	proto.RegisterType((*MsgUpgradeIsolatedPerpetualToCrossResponse)(nil), "dydxprotocol.listing.MsgUpgradeIsolatedPerpetualToCrossResponse")
}

func init() { proto.RegisterFile("dydxprotocol/listing/tx.proto", fileDescriptor_144a579c1e2dcb94) }

var fileDescriptor_144a579c1e2dcb94 = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0xcf, 0x41, 0x55, 0xa9, 0xd7, 0x06, 0xa9, 0x56, 0x04, 0xc1, 0x6a, 0x9d, 0x36, 0x12, 0xb4,
	0x8d, 0xa8, 0x2d, 0x52, 0x40, 0x50, 0x84, 0x04, 0x09, 0x42, 0x44, 0x60, 0x29, 0x72, 0x80, 0x81,
	0x25, 0xba, 0xd8, 0x87, 0x63, 0xd5, 0xf6, 0x59, 0xf7, 0xce, 0x55, 0xb2, 0xf2, 0x01, 0x28, 0x03,
	0x03, 0x0b, 0xdf, 0x81, 0x81, 0x81, 0x99, 0xa9, 0x63, 0xc5, 0xc4, 0x84, 0x50, 0x32, 0xf0, 0x35,
	0x50, 0x62, 0xc7, 0x49, 0x94, 0x7f, 0x28, 0x93, 0xef, 0xfd, 0xf9, 0xbd, 0xf7, 0x7b, 0xf7, 0x7b,
	0xb6, 0xf1, 0xb6, 0xd5, 0xb6, 0x5a, 0x01, 0x67, 0x82, 0x99, 0xcc, 0xd5, 0x5c, 0x07, 0x84, 0xe3,
	0xdb, 0x9a, 0x68, 0xa9, 0x7d, 0x9f, 0x94, 0x19, 0x0d, 0xab, 0x71, 0x58, 0xbe, 0x6e, 0x32, 0xf0,
	0x18, 0xd4, 0xfb, 0x01, 0x2d, 0x32, 0x22, 0x80, 0x7c, 0x2d, 0xb2, 0x34, 0x0f, 0x6c, 0xed, 0xf4,
	0x76, 0xef, 0x11, 0x07, 0x32, 0x36, 0xb3, 0x59, 0x04, 0xe8, 0x9d, 0x62, 0xef, 0xc1, 0x58, 0x7b,
	0x08, 0x1b, 0xc4, 0x34, 0x59, 0xe8, 0x0b, 0x18, 0x39, 0xc7, 0xa9, 0xbb, 0x53, 0x99, 0x06, 0x84,
	0x13, 0x2f, 0x6e, 0x9e, 0x3f, 0x43, 0x38, 0xa3, 0x83, 0x5d, 0xa3, 0x42, 0x27, 0xfc, 0x84, 0x0a,
	0x78, 0x4e, 0xb8, 0x55, 0x26, 0x81, 0x74, 0x0f, 0xaf, 0x91, 0x50, 0x34, 0x19, 0x77, 0x44, 0x3b,
	0x8b, 0x76, 0xd0, 0xfe, 0x5a, 0x29, 0xfb, 0xf3, 0xdb, 0x61, 0x26, 0xa6, 0xfe, 0xc4, 0xb2, 0x38,
	0x05, 0xa8, 0x09, 0xee, 0xf8, 0xb6, 0x31, 0x4c, 0x95, 0x34, 0x9c, 0x69, 0x12, 0x6e, 0xd5, 0x4d,
	0x12, 0xd4, 0xdf, 0x31, 0x5e, 0xf7, 0xa2, 0xb2, 0xd9, 0x4b, 0x3b, 0x68, 0x3f, 0x6d, 0x6c, 0x36,
	0xa3, 0xf2, 0xcf, 0x18, 0x8f, 0xfb, 0x1d, 0x5f, 0x79, 0xff, 0xf7, 0x6b, 0x61, 0x58, 0x20, 0xaf,
	0xe0, 0xad, 0x69, 0x84, 0x0c, 0x0a, 0x01, 0xf3, 0x81, 0xe6, 0x3f, 0x23, 0xbc, 0xad, 0x83, 0x5d,
	0xe6, 0x94, 0x08, 0x1a, 0xe5, 0x54, 0x29, 0xf7, 0x1c, 0x00, 0x87, 0xf9, 0x2e, 0x05, 0x90, 0xae,
	0xe2, 0x55, 0xe1, 0x98, 0x27, 0x94, 0x47, 0xbc, 0x8d, 0xd8, 0x92, 0x5e, 0xe0, 0xf4, 0xf0, 0x8a,
	0xea, 0x8e, 0xd5, 0xe7, 0xb4, 0x5e, 0xbc, 0xa9, 0x8e, 0x29, 0x36, 0x72, 0xa3, 0x6a, 0x2d, 0x39,
	0x57, 0x2c, 0x63, 0x03, 0x46, 0xac, 0x63, 0xa9, 0x47, 0x7b, 0xbc, 0x5e, 0x7e, 0x0f, 0xdf, 0x98,
	0xcb, 0x2c, 0x99, 0xe1, 0x3b, 0xc2, 0xb9, 0x68, 0xc8, 0x97, 0x91, 0x28, 0x6f, 0x48, 0xe8, 0x8a,
	0xa7, 0x34, 0x60, 0xe0, 0x88, 0x6a, 0x5f, 0x9f, 0xa5, 0x05, 0xd0, 0xf1, 0x6a, 0xa4, 0x70, 0x3c,
	0x9e, 0xa6, 0x4e, 0x5b, 0x48, 0x75, 0x66, 0xe3, 0xd2, 0xca, 0xf9, 0xef, 0x5c, 0xca, 0x88, 0x8b,
	0x4c, 0xc8, 0x73, 0x80, 0xf7, 0x16, 0x30, 0x4f, 0xa6, 0x3c, 0x43, 0x38, 0xaf, 0x83, 0xfd, 0x3a,
	0xb0, 0x39, 0xb1, 0x68, 0x05, 0x98, 0x4b, 0x04, 0xb5, 0xaa, 0x94, 0x07, 0x54, 0x84, 0xc4, 0x7d,
	0xc5, 0xca, 0x9c, 0xc1, 0xf2, 0x83, 0xee, 0xe2, 0x8d, 0x60, 0x50, 0x6b, 0xa0, 0x66, 0xda, 0x58,
	0x4f, 0x7c, 0x15, 0x6b, 0x82, 0xfc, 0x2d, 0x5c, 0x58, 0x4c, 0x68, 0xc0, 0xbf, 0xf8, 0x63, 0x05,
	0x5f, 0xd6, 0xc1, 0x96, 0x00, 0x6f, 0x4e, 0xbe, 0x1f, 0x85, 0xe9, 0xd7, 0x3a, 0x6d, 0x75, 0xe5,
	0xe2, 0xff, 0xe7, 0x0e, 0x9a, 0x4b, 0x1f, 0x10, 0x96, 0xe7, 0xec, 0xf8, 0xd1, 0xcc, 0x92, 0xb3,
	0x41, 0xf2, 0xc3, 0x25, 0x40, 0x09, 0xa1, 0x4f, 0x08, 0x6f, 0xcd, 0x5d, 0xd8, 0xbb, 0xf3, 0xa6,
	0x9c, 0x09, 0x93, 0x1f, 0x2d, 0x05, 0x4b, 0x68, 0x7d, 0x41, 0x38, 0xb7, 0x68, 0xc3, 0xee, 0xcf,
	0x6c, 0xb1, 0x00, 0x29, 0x3f, 0x5e, 0x16, 0x39, 0xe0, 0x57, 0xaa, 0x9d, 0x77, 0x14, 0x74, 0xd1,
	0x51, 0xd0, 0x9f, 0x8e, 0x82, 0x3e, 0x76, 0x95, 0xd4, 0x45, 0x57, 0x49, 0xfd, 0xea, 0x2a, 0xa9,
	0xb7, 0x0f, 0x6c, 0x47, 0x34, 0xc3, 0x86, 0x6a, 0x32, 0x4f, 0x1b, 0xfb, 0x50, 0x9f, 0xde, 0x39,
	0x34, 0x9b, 0xc4, 0xf1, 0xb5, 0xc4, 0xd3, 0x1a, 0xfe, 0x66, 0xda, 0x01, 0x85, 0xc6, 0x6a, 0x3f,
	0x72, 0xf4, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x92, 0xf4, 0x1f, 0x1d, 0x8b, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SetMarketsHardCap sets a hard cap on the number of markets listed
	SetMarketsHardCap(ctx context.Context, in *MsgSetMarketsHardCap, opts ...grpc.CallOption) (*MsgSetMarketsHardCapResponse, error)
	// CreateMarketPermissionless creates a new market without going through x/gov
	CreateMarketPermissionless(ctx context.Context, in *MsgCreateMarketPermissionless, opts ...grpc.CallOption) (*MsgCreateMarketPermissionlessResponse, error)
	// SetListingVaultDepositParams sets PML megavault deposit params
	SetListingVaultDepositParams(ctx context.Context, in *MsgSetListingVaultDepositParams, opts ...grpc.CallOption) (*MsgSetListingVaultDepositParamsResponse, error)
	// UpgradeIsolatedPerpetualToCross upgrades a perpetual from isolated to cross
	// margin
	UpgradeIsolatedPerpetualToCross(ctx context.Context, in *MsgUpgradeIsolatedPerpetualToCross, opts ...grpc.CallOption) (*MsgUpgradeIsolatedPerpetualToCrossResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetMarketsHardCap(ctx context.Context, in *MsgSetMarketsHardCap, opts ...grpc.CallOption) (*MsgSetMarketsHardCapResponse, error) {
	out := new(MsgSetMarketsHardCapResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.listing.Msg/SetMarketsHardCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMarketPermissionless(ctx context.Context, in *MsgCreateMarketPermissionless, opts ...grpc.CallOption) (*MsgCreateMarketPermissionlessResponse, error) {
	out := new(MsgCreateMarketPermissionlessResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.listing.Msg/CreateMarketPermissionless", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetListingVaultDepositParams(ctx context.Context, in *MsgSetListingVaultDepositParams, opts ...grpc.CallOption) (*MsgSetListingVaultDepositParamsResponse, error) {
	out := new(MsgSetListingVaultDepositParamsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.listing.Msg/SetListingVaultDepositParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpgradeIsolatedPerpetualToCross(ctx context.Context, in *MsgUpgradeIsolatedPerpetualToCross, opts ...grpc.CallOption) (*MsgUpgradeIsolatedPerpetualToCrossResponse, error) {
	out := new(MsgUpgradeIsolatedPerpetualToCrossResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.listing.Msg/UpgradeIsolatedPerpetualToCross", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SetMarketsHardCap sets a hard cap on the number of markets listed
	SetMarketsHardCap(context.Context, *MsgSetMarketsHardCap) (*MsgSetMarketsHardCapResponse, error)
	// CreateMarketPermissionless creates a new market without going through x/gov
	CreateMarketPermissionless(context.Context, *MsgCreateMarketPermissionless) (*MsgCreateMarketPermissionlessResponse, error)
	// SetListingVaultDepositParams sets PML megavault deposit params
	SetListingVaultDepositParams(context.Context, *MsgSetListingVaultDepositParams) (*MsgSetListingVaultDepositParamsResponse, error)
	// UpgradeIsolatedPerpetualToCross upgrades a perpetual from isolated to cross
	// margin
	UpgradeIsolatedPerpetualToCross(context.Context, *MsgUpgradeIsolatedPerpetualToCross) (*MsgUpgradeIsolatedPerpetualToCrossResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetMarketsHardCap(ctx context.Context, req *MsgSetMarketsHardCap) (*MsgSetMarketsHardCapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMarketsHardCap not implemented")
}
func (*UnimplementedMsgServer) CreateMarketPermissionless(ctx context.Context, req *MsgCreateMarketPermissionless) (*MsgCreateMarketPermissionlessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMarketPermissionless not implemented")
}
func (*UnimplementedMsgServer) SetListingVaultDepositParams(ctx context.Context, req *MsgSetListingVaultDepositParams) (*MsgSetListingVaultDepositParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListingVaultDepositParams not implemented")
}
func (*UnimplementedMsgServer) UpgradeIsolatedPerpetualToCross(ctx context.Context, req *MsgUpgradeIsolatedPerpetualToCross) (*MsgUpgradeIsolatedPerpetualToCrossResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeIsolatedPerpetualToCross not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetMarketsHardCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMarketsHardCap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMarketsHardCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.listing.Msg/SetMarketsHardCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMarketsHardCap(ctx, req.(*MsgSetMarketsHardCap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMarketPermissionless_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMarketPermissionless)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMarketPermissionless(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.listing.Msg/CreateMarketPermissionless",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMarketPermissionless(ctx, req.(*MsgCreateMarketPermissionless))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetListingVaultDepositParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetListingVaultDepositParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetListingVaultDepositParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.listing.Msg/SetListingVaultDepositParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetListingVaultDepositParams(ctx, req.(*MsgSetListingVaultDepositParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpgradeIsolatedPerpetualToCross_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpgradeIsolatedPerpetualToCross)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpgradeIsolatedPerpetualToCross(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.listing.Msg/UpgradeIsolatedPerpetualToCross",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpgradeIsolatedPerpetualToCross(ctx, req.(*MsgUpgradeIsolatedPerpetualToCross))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dydxprotocol.listing.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMarketsHardCap",
			Handler:    _Msg_SetMarketsHardCap_Handler,
		},
		{
			MethodName: "CreateMarketPermissionless",
			Handler:    _Msg_CreateMarketPermissionless_Handler,
		},
		{
			MethodName: "SetListingVaultDepositParams",
			Handler:    _Msg_SetListingVaultDepositParams_Handler,
		},
		{
			MethodName: "UpgradeIsolatedPerpetualToCross",
			Handler:    _Msg_UpgradeIsolatedPerpetualToCross_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dydxprotocol/listing/tx.proto",
}

func (m *MsgSetMarketsHardCap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMarketsHardCap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMarketsHardCap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HardCapForMarkets != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.HardCapForMarkets))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMarketsHardCapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMarketsHardCapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMarketsHardCapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateMarketPermissionless) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMarketPermissionless) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMarketPermissionless) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubaccountId != nil {
		{
			size, err := m.SubaccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMarketPermissionlessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMarketPermissionlessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMarketPermissionlessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetListingVaultDepositParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetListingVaultDepositParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetListingVaultDepositParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetListingVaultDepositParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetListingVaultDepositParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetListingVaultDepositParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpgradeIsolatedPerpetualToCross) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradeIsolatedPerpetualToCross) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradeIsolatedPerpetualToCross) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerpetualId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PerpetualId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetMarketsHardCap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.HardCapForMarkets != 0 {
		n += 1 + sovTx(uint64(m.HardCapForMarkets))
	}
	return n
}

func (m *MsgSetMarketsHardCapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateMarketPermissionless) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SubaccountId != nil {
		l = m.SubaccountId.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMarketPermissionlessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetListingVaultDepositParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetListingVaultDepositParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpgradeIsolatedPerpetualToCross) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PerpetualId != 0 {
		n += 1 + sovTx(uint64(m.PerpetualId))
	}
	return n
}

func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetMarketsHardCap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMarketsHardCap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMarketsHardCap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardCapForMarkets", wireType)
			}
			m.HardCapForMarkets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardCapForMarkets |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMarketsHardCapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMarketsHardCapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMarketsHardCapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMarketPermissionless) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMarketPermissionless: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMarketPermissionless: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubaccountId == nil {
				m.SubaccountId = &types.SubaccountId{}
			}
			if err := m.SubaccountId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMarketPermissionlessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMarketPermissionlessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMarketPermissionlessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetListingVaultDepositParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetListingVaultDepositParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetListingVaultDepositParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetListingVaultDepositParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetListingVaultDepositParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetListingVaultDepositParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradeIsolatedPerpetualToCross) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradeIsolatedPerpetualToCross: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradeIsolatedPerpetualToCross: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualId", wireType)
			}
			m.PerpetualId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradeIsolatedPerpetualToCrossResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradeIsolatedPerpetualToCrossResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
