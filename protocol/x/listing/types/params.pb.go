// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/listing/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_dydxprotocol_v4_chain_protocol_dtypes "github.com/dydxprotocol/v4-chain/protocol/dtypes"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ListingVaultDepositParams represents the params for PML megavault deposits
type ListingVaultDepositParams struct {
	// Amount that will be deposited into the new market vault exclusively
	NewVaultDepositAmount github_com_dydxprotocol_v4_chain_protocol_dtypes.SerializableInt `protobuf:"bytes,1,opt,name=new_vault_deposit_amount,json=newVaultDepositAmount,proto3,customtype=github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt" json:"new_vault_deposit_amount"`
	// Amount deposited into the main vault exclusively. This amount does not
	// include the amount deposited into the new vault.
	MainVaultDepositAmount github_com_dydxprotocol_v4_chain_protocol_dtypes.SerializableInt `protobuf:"bytes,2,opt,name=main_vault_deposit_amount,json=mainVaultDepositAmount,proto3,customtype=github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt" json:"main_vault_deposit_amount"`
	// Lockup period for this deposit
	NumBlocksToLockShares uint32 `protobuf:"varint,3,opt,name=num_blocks_to_lock_shares,json=numBlocksToLockShares,proto3" json:"num_blocks_to_lock_shares,omitempty"`
}

func (m *ListingVaultDepositParams) Reset()         { *m = ListingVaultDepositParams{} }
func (m *ListingVaultDepositParams) String() string { return proto.CompactTextString(m) }
func (*ListingVaultDepositParams) ProtoMessage()    {}
func (*ListingVaultDepositParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_051852a22a035387, []int{0}
}
func (m *ListingVaultDepositParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListingVaultDepositParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListingVaultDepositParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListingVaultDepositParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListingVaultDepositParams.Merge(m, src)
}
func (m *ListingVaultDepositParams) XXX_Size() int {
	return m.Size()
}
func (m *ListingVaultDepositParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ListingVaultDepositParams.DiscardUnknown(m)
}

var xxx_messageInfo_ListingVaultDepositParams proto.InternalMessageInfo

func (m *ListingVaultDepositParams) GetNumBlocksToLockShares() uint32 {
	if m != nil {
		return m.NumBlocksToLockShares
	}
	return 0
}

func init() {
	proto.RegisterType((*ListingVaultDepositParams)(nil), "dydxprotocol.listing.ListingVaultDepositParams")
}

func init() { proto.RegisterFile("dydxprotocol/listing/params.proto", fileDescriptor_051852a22a035387) }

var fileDescriptor_051852a22a035387 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xa9, 0x4c, 0xa9,
	0x28, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0xcf, 0xc9, 0x2c, 0x2e, 0xc9, 0xcc, 0x4b,
	0xd7, 0x2f, 0x48, 0x2c, 0x4a, 0xcc, 0x2d, 0xd6, 0x03, 0x8b, 0x0b, 0x89, 0x20, 0x2b, 0xd1, 0x83,
	0x2a, 0x91, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x8b, 0xea, 0x83, 0x58, 0x10, 0xb5, 0x4a, 0xf7,
	0x99, 0xb8, 0x24, 0x7d, 0x20, 0x2a, 0xc2, 0x12, 0x4b, 0x73, 0x4a, 0x5c, 0x52, 0x0b, 0xf2, 0x8b,
	0x33, 0x4b, 0x02, 0xc0, 0xe6, 0x09, 0x35, 0x32, 0x72, 0x49, 0xe4, 0xa5, 0x96, 0xc7, 0x97, 0x81,
	0xa4, 0xe2, 0x53, 0x20, 0x72, 0xf1, 0x89, 0xb9, 0xf9, 0xa5, 0x79, 0x25, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x3c, 0x4e, 0x1e, 0x27, 0xee, 0xc9, 0x33, 0xdc, 0xba, 0x27, 0xef, 0x90, 0x9e, 0x59, 0x92,
	0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x8f, 0xe2, 0xc4, 0x32, 0x13, 0xdd, 0xe4, 0x8c, 0xc4,
	0xcc, 0x3c, 0x7d, 0xb8, 0x48, 0x4a, 0x49, 0x65, 0x41, 0x6a, 0xb1, 0x5e, 0x70, 0x6a, 0x51, 0x66,
	0x62, 0x4e, 0x66, 0x55, 0x62, 0x52, 0x4e, 0xaa, 0x67, 0x5e, 0x49, 0x90, 0x68, 0x5e, 0x6a, 0x39,
	0xb2, 0x1b, 0x1c, 0xc1, 0xd6, 0x08, 0x35, 0x33, 0x72, 0x49, 0xe6, 0x26, 0x66, 0xe6, 0x61, 0x77,
	0x04, 0x13, 0x95, 0x1d, 0x21, 0x06, 0xb2, 0x0a, 0x8b, 0x2b, 0x2c, 0xb8, 0x24, 0xf3, 0x4a, 0x73,
	0xe3, 0x93, 0x72, 0xf2, 0x93, 0xb3, 0x8b, 0xe3, 0x4b, 0xf2, 0xe3, 0x41, 0x8c, 0xf8, 0xe2, 0x8c,
	0xc4, 0xa2, 0xd4, 0x62, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xde, 0x20, 0xd1, 0xbc, 0xd2, 0x5c, 0x27,
	0xb0, 0x7c, 0x48, 0xbe, 0x4f, 0x7e, 0x72, 0x76, 0x30, 0x58, 0xd2, 0x29, 0xf8, 0xc4, 0x23, 0x39,
	0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63,
	0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x2c, 0x89, 0x77, 0x6d, 0x05, 0x3c, 0xa6, 0xc1, 0xce,
	0x4e, 0x62, 0x03, 0xcb, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x77, 0x56, 0x05, 0x0e,
	0x02, 0x00, 0x00,
}

func (m *ListingVaultDepositParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListingVaultDepositParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListingVaultDepositParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumBlocksToLockShares != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.NumBlocksToLockShares))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.MainVaultDepositAmount.Size()
		i -= size
		if _, err := m.MainVaultDepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.NewVaultDepositAmount.Size()
		i -= size
		if _, err := m.NewVaultDepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListingVaultDepositParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NewVaultDepositAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MainVaultDepositAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.NumBlocksToLockShares != 0 {
		n += 1 + sovParams(uint64(m.NumBlocksToLockShares))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListingVaultDepositParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListingVaultDepositParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListingVaultDepositParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewVaultDepositAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewVaultDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainVaultDepositAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MainVaultDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocksToLockShares", wireType)
			}
			m.NumBlocksToLockShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocksToLockShares |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
