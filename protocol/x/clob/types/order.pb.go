// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/clob/order.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/dydxprotocol/v4-chain/protocol/x/subaccounts/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Represents the side of the orderbook the order will be placed on.
// Note that Side.SIDE_UNSPECIFIED is an invalid order and cannot be
// placed on the orderbook.
type Order_Side int32

const (
	// Default value. This value is invalid and unused.
	Order_SIDE_UNSPECIFIED Order_Side = 0
	// SIDE_BUY is used to represent a BUY order.
	Order_SIDE_BUY Order_Side = 1
	// SIDE_SELL is used to represent a SELL order.
	Order_SIDE_SELL Order_Side = 2
)

var Order_Side_name = map[int32]string{
	0: "SIDE_UNSPECIFIED",
	1: "SIDE_BUY",
	2: "SIDE_SELL",
}

var Order_Side_value = map[string]int32{
	"SIDE_UNSPECIFIED": 0,
	"SIDE_BUY":         1,
	"SIDE_SELL":        2,
}

func (x Order_Side) String() string {
	return proto.EnumName(Order_Side_name, int32(x))
}

func (Order_Side) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{9, 0}
}

// TimeInForce indicates how long an order will remain active before it
// is executed or expires.
type Order_TimeInForce int32

const (
	// TIME_IN_FORCE_UNSPECIFIED represents the default behavior where an
	// order will first match with existing orders on the book, and any
	// remaining size will be added to the book as a maker order.
	Order_TIME_IN_FORCE_UNSPECIFIED Order_TimeInForce = 0
	// TIME_IN_FORCE_IOC enforces that an order only be matched with
	// maker orders on the book. If the order has remaining size after
	// matching with existing orders on the book, the remaining size
	// is not placed on the book.
	Order_TIME_IN_FORCE_IOC Order_TimeInForce = 1
	// TIME_IN_FORCE_POST_ONLY enforces that an order only be placed
	// on the book as a maker order. Note this means that validators will cancel
	// any newly-placed post only orders that would cross with other maker
	// orders.
	Order_TIME_IN_FORCE_POST_ONLY Order_TimeInForce = 2
	// TIME_IN_FORCE_FILL_OR_KILL has been deprecated and will be removed in
	// future versions.
	Order_TIME_IN_FORCE_FILL_OR_KILL Order_TimeInForce = 3 // Deprecated: Do not use.
)

var Order_TimeInForce_name = map[int32]string{
	0: "TIME_IN_FORCE_UNSPECIFIED",
	1: "TIME_IN_FORCE_IOC",
	2: "TIME_IN_FORCE_POST_ONLY",
	3: "TIME_IN_FORCE_FILL_OR_KILL",
}

var Order_TimeInForce_value = map[string]int32{
	"TIME_IN_FORCE_UNSPECIFIED":  0,
	"TIME_IN_FORCE_IOC":          1,
	"TIME_IN_FORCE_POST_ONLY":    2,
	"TIME_IN_FORCE_FILL_OR_KILL": 3,
}

func (x Order_TimeInForce) String() string {
	return proto.EnumName(Order_TimeInForce_name, int32(x))
}

func (Order_TimeInForce) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{9, 1}
}

type Order_ConditionType int32

const (
	// CONDITION_TYPE_UNSPECIFIED represents the default behavior where an
	// order will be placed immediately on the orderbook.
	Order_CONDITION_TYPE_UNSPECIFIED Order_ConditionType = 0
	// CONDITION_TYPE_STOP_LOSS represents a stop order. A stop order will
	// trigger when the oracle price moves at or above the trigger price for
	// buys, and at or below the trigger price for sells.
	Order_CONDITION_TYPE_STOP_LOSS Order_ConditionType = 1
	// CONDITION_TYPE_TAKE_PROFIT represents a take profit order. A take profit
	// order will trigger when the oracle price moves at or below the trigger
	// price for buys and at or above the trigger price for sells.
	Order_CONDITION_TYPE_TAKE_PROFIT Order_ConditionType = 2
)

var Order_ConditionType_name = map[int32]string{
	0: "CONDITION_TYPE_UNSPECIFIED",
	1: "CONDITION_TYPE_STOP_LOSS",
	2: "CONDITION_TYPE_TAKE_PROFIT",
}

var Order_ConditionType_value = map[string]int32{
	"CONDITION_TYPE_UNSPECIFIED": 0,
	"CONDITION_TYPE_STOP_LOSS":   1,
	"CONDITION_TYPE_TAKE_PROFIT": 2,
}

func (x Order_ConditionType) String() string {
	return proto.EnumName(Order_ConditionType_name, int32(x))
}

func (Order_ConditionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{9, 2}
}

// OrderId refers to a single order belonging to a Subaccount.
type OrderId struct {
	// The subaccount ID that opened this order.
	// Note that this field has `gogoproto.nullable = false` so that it is
	// generated as a value instead of a pointer. This is because the `OrderId`
	// proto is used as a key within maps, and map comparisons will compare
	// pointers for equality (when the desired behavior is to compare the values).
	SubaccountId types.SubaccountId `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id"`
	// The client ID of this order, unique with respect to the specific
	// sub account (I.E., the same subaccount can't have two orders with
	// the same ClientId).
	ClientId uint32 `protobuf:"fixed32,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// order_flags represent order flags for the order. This field is invalid if
	// it's greater than 127 (larger than one byte). Each bit in the first byte
	// represents a different flag. Currently only two flags are supported.
	//
	// Starting from the bit after the most MSB (note that the MSB is used in
	// proto varint encoding, and therefore cannot be used): Bit 1 is set if this
	// order is a Long-Term order (0x40, or 64 as a uint8). Bit 2 is set if this
	// order is a Conditional order (0x20, or 32 as a uint8).
	//
	// If neither bit is set, the order is assumed to be a Short-Term order.
	//
	// If both bits are set or bits other than the 2nd and 3rd are set, the order
	// ID is invalid.
	OrderFlags uint32 `protobuf:"varint,3,opt,name=order_flags,json=orderFlags,proto3" json:"order_flags,omitempty"`
	// ID of the CLOB the order is created for.
	ClobPairId uint32 `protobuf:"varint,4,opt,name=clob_pair_id,json=clobPairId,proto3" json:"clob_pair_id,omitempty"`
	// sequence number of the order. Used for matching generated suborders to parent TWAP orders.
	SequenceNumber uint64 `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (m *OrderId) Reset()         { *m = OrderId{} }
func (m *OrderId) String() string { return proto.CompactTextString(m) }
func (*OrderId) ProtoMessage()    {}
func (*OrderId) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{0}
}
func (m *OrderId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderId.Merge(m, src)
}
func (m *OrderId) XXX_Size() int {
	return m.Size()
}
func (m *OrderId) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderId.DiscardUnknown(m)
}

var xxx_messageInfo_OrderId proto.InternalMessageInfo

func (m *OrderId) GetSubaccountId() types.SubaccountId {
	if m != nil {
		return m.SubaccountId
	}
	return types.SubaccountId{}
}

func (m *OrderId) GetClientId() uint32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OrderId) GetOrderFlags() uint32 {
	if m != nil {
		return m.OrderFlags
	}
	return 0
}

func (m *OrderId) GetClobPairId() uint32 {
	if m != nil {
		return m.ClobPairId
	}
	return 0
}

func (m *OrderId) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

// OrdersFilledDuringLatestBlock represents a list of `OrderIds` that were
// filled by any non-zero amount in the latest block.
type OrdersFilledDuringLatestBlock struct {
	// A list of unique order_ids that were filled by any non-zero amount in the
	// latest block.
	OrderIds []OrderId `protobuf:"bytes,1,rep,name=order_ids,json=orderIds,proto3" json:"order_ids"`
}

func (m *OrdersFilledDuringLatestBlock) Reset()         { *m = OrdersFilledDuringLatestBlock{} }
func (m *OrdersFilledDuringLatestBlock) String() string { return proto.CompactTextString(m) }
func (*OrdersFilledDuringLatestBlock) ProtoMessage()    {}
func (*OrdersFilledDuringLatestBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{1}
}
func (m *OrdersFilledDuringLatestBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrdersFilledDuringLatestBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrdersFilledDuringLatestBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrdersFilledDuringLatestBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersFilledDuringLatestBlock.Merge(m, src)
}
func (m *OrdersFilledDuringLatestBlock) XXX_Size() int {
	return m.Size()
}
func (m *OrdersFilledDuringLatestBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersFilledDuringLatestBlock.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersFilledDuringLatestBlock proto.InternalMessageInfo

func (m *OrdersFilledDuringLatestBlock) GetOrderIds() []OrderId {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

// PotentiallyPrunableOrders represents a list of orders that may be prunable
// from state at a future block height.
type PotentiallyPrunableOrders struct {
	// A list of unique order_ids that may potentially be pruned from state at a
	// future block height.
	OrderIds []OrderId `protobuf:"bytes,1,rep,name=order_ids,json=orderIds,proto3" json:"order_ids"`
}

func (m *PotentiallyPrunableOrders) Reset()         { *m = PotentiallyPrunableOrders{} }
func (m *PotentiallyPrunableOrders) String() string { return proto.CompactTextString(m) }
func (*PotentiallyPrunableOrders) ProtoMessage()    {}
func (*PotentiallyPrunableOrders) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{2}
}
func (m *PotentiallyPrunableOrders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PotentiallyPrunableOrders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PotentiallyPrunableOrders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PotentiallyPrunableOrders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PotentiallyPrunableOrders.Merge(m, src)
}
func (m *PotentiallyPrunableOrders) XXX_Size() int {
	return m.Size()
}
func (m *PotentiallyPrunableOrders) XXX_DiscardUnknown() {
	xxx_messageInfo_PotentiallyPrunableOrders.DiscardUnknown(m)
}

var xxx_messageInfo_PotentiallyPrunableOrders proto.InternalMessageInfo

func (m *PotentiallyPrunableOrders) GetOrderIds() []OrderId {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

// OrderFillState represents the fill amount of an order according to on-chain
// state. This proto includes both the current on-chain fill amount of the
// order, as well as the block at which this information can be pruned from
// state.
type OrderFillState struct {
	// The current fillAmount of the order according to on-chain state.
	FillAmount uint64 `protobuf:"varint,1,opt,name=fill_amount,json=fillAmount,proto3" json:"fill_amount,omitempty"`
	// The block height at which the fillAmount state for this order can be
	// pruned.
	PrunableBlockHeight uint32 `protobuf:"varint,2,opt,name=prunable_block_height,json=prunableBlockHeight,proto3" json:"prunable_block_height,omitempty"`
}

func (m *OrderFillState) Reset()         { *m = OrderFillState{} }
func (m *OrderFillState) String() string { return proto.CompactTextString(m) }
func (*OrderFillState) ProtoMessage()    {}
func (*OrderFillState) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{3}
}
func (m *OrderFillState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderFillState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderFillState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderFillState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFillState.Merge(m, src)
}
func (m *OrderFillState) XXX_Size() int {
	return m.Size()
}
func (m *OrderFillState) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFillState.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFillState proto.InternalMessageInfo

func (m *OrderFillState) GetFillAmount() uint64 {
	if m != nil {
		return m.FillAmount
	}
	return 0
}

func (m *OrderFillState) GetPrunableBlockHeight() uint32 {
	if m != nil {
		return m.PrunableBlockHeight
	}
	return 0
}

// StatefulOrderTimeSliceValue represents the type of the value of the
// `StatefulOrdersTimeSlice` in state. The `StatefulOrdersTimeSlice`
// in state consists of key/value pairs where the keys are UTF-8-encoded
// `RFC3339NANO` timestamp strings with right-padded zeroes and no
// time zone info, and the values are of type `StatefulOrderTimeSliceValue`.
// This `StatefulOrderTimeSliceValue` in state is used for managing stateful
// order expiration. Stateful order expirations can be for either long term
// or conditional orders.
type StatefulOrderTimeSliceValue struct {
	// A unique list of order_ids that expire at this timestamp, sorted in
	// ascending order by block height and transaction index of each stateful
	// order.
	OrderIds []OrderId `protobuf:"bytes,1,rep,name=order_ids,json=orderIds,proto3" json:"order_ids"`
}

func (m *StatefulOrderTimeSliceValue) Reset()         { *m = StatefulOrderTimeSliceValue{} }
func (m *StatefulOrderTimeSliceValue) String() string { return proto.CompactTextString(m) }
func (*StatefulOrderTimeSliceValue) ProtoMessage()    {}
func (*StatefulOrderTimeSliceValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{4}
}
func (m *StatefulOrderTimeSliceValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatefulOrderTimeSliceValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatefulOrderTimeSliceValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatefulOrderTimeSliceValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatefulOrderTimeSliceValue.Merge(m, src)
}
func (m *StatefulOrderTimeSliceValue) XXX_Size() int {
	return m.Size()
}
func (m *StatefulOrderTimeSliceValue) XXX_DiscardUnknown() {
	xxx_messageInfo_StatefulOrderTimeSliceValue.DiscardUnknown(m)
}

var xxx_messageInfo_StatefulOrderTimeSliceValue proto.InternalMessageInfo

func (m *StatefulOrderTimeSliceValue) GetOrderIds() []OrderId {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

// LongTermOrderPlacement represents the placement of a stateful order in
// state. It stores the stateful order itself and the `BlockHeight` and
// `TransactionIndex` at which the order was placed.
type LongTermOrderPlacement struct {
	Order Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order"`
	// The block height and transaction index at which the order was placed.
	// Used for ordering by time priority when the chain is restarted.
	PlacementIndex TransactionOrdering `protobuf:"bytes,2,opt,name=placement_index,json=placementIndex,proto3" json:"placement_index"`
}

func (m *LongTermOrderPlacement) Reset()         { *m = LongTermOrderPlacement{} }
func (m *LongTermOrderPlacement) String() string { return proto.CompactTextString(m) }
func (*LongTermOrderPlacement) ProtoMessage()    {}
func (*LongTermOrderPlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{5}
}
func (m *LongTermOrderPlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongTermOrderPlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LongTermOrderPlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LongTermOrderPlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongTermOrderPlacement.Merge(m, src)
}
func (m *LongTermOrderPlacement) XXX_Size() int {
	return m.Size()
}
func (m *LongTermOrderPlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_LongTermOrderPlacement.DiscardUnknown(m)
}

var xxx_messageInfo_LongTermOrderPlacement proto.InternalMessageInfo

func (m *LongTermOrderPlacement) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return Order{}
}

func (m *LongTermOrderPlacement) GetPlacementIndex() TransactionOrdering {
	if m != nil {
		return m.PlacementIndex
	}
	return TransactionOrdering{}
}

type TWAPOrderPlacement struct {
	Order Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order"`
	// The number of legs remaining to be executed.
	RemainingLegs uint32 `protobuf:"varint,2,opt,name=remaining_legs,json=remainingLegs,proto3" json:"remaining_legs,omitempty"`
	// The number of quantums remaining to be executed.
	RemainingQuantums uint64 `protobuf:"varint,3,opt,name=remaining_quantums,json=remainingQuantums,proto3" json:"remaining_quantums,omitempty"`
	// The block height at which the order was placed.
	BlockHeight uint32 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *TWAPOrderPlacement) Reset()         { *m = TWAPOrderPlacement{} }
func (m *TWAPOrderPlacement) String() string { return proto.CompactTextString(m) }
func (*TWAPOrderPlacement) ProtoMessage()    {}
func (*TWAPOrderPlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{6}
}
func (m *TWAPOrderPlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TWAPOrderPlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TWAPOrderPlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TWAPOrderPlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TWAPOrderPlacement.Merge(m, src)
}
func (m *TWAPOrderPlacement) XXX_Size() int {
	return m.Size()
}
func (m *TWAPOrderPlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_TWAPOrderPlacement.DiscardUnknown(m)
}

var xxx_messageInfo_TWAPOrderPlacement proto.InternalMessageInfo

func (m *TWAPOrderPlacement) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return Order{}
}

func (m *TWAPOrderPlacement) GetRemainingLegs() uint32 {
	if m != nil {
		return m.RemainingLegs
	}
	return 0
}

func (m *TWAPOrderPlacement) GetRemainingQuantums() uint64 {
	if m != nil {
		return m.RemainingQuantums
	}
	return 0
}

func (m *TWAPOrderPlacement) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// TWAPTriggerPlacement represents the placement of a TWAP suborder in
// state. It stores the stateful order itself, the `BlockHeight` and
// `TransactionIndex` at which the order was placed and triggered.
type TWAPTriggerPlacement struct {
	// The generated suborder given a TWAP order.
	Order Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order"`
	// The block height at which the order was triggered.
	TriggerBlockHeight uint64 `protobuf:"varint,2,opt,name=trigger_block_height,json=triggerBlockHeight,proto3" json:"trigger_block_height,omitempty"`
}

func (m *TWAPTriggerPlacement) Reset()         { *m = TWAPTriggerPlacement{} }
func (m *TWAPTriggerPlacement) String() string { return proto.CompactTextString(m) }
func (*TWAPTriggerPlacement) ProtoMessage()    {}
func (*TWAPTriggerPlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{7}
}
func (m *TWAPTriggerPlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TWAPTriggerPlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TWAPTriggerPlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TWAPTriggerPlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TWAPTriggerPlacement.Merge(m, src)
}
func (m *TWAPTriggerPlacement) XXX_Size() int {
	return m.Size()
}
func (m *TWAPTriggerPlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_TWAPTriggerPlacement.DiscardUnknown(m)
}

var xxx_messageInfo_TWAPTriggerPlacement proto.InternalMessageInfo

func (m *TWAPTriggerPlacement) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return Order{}
}

func (m *TWAPTriggerPlacement) GetTriggerBlockHeight() uint64 {
	if m != nil {
		return m.TriggerBlockHeight
	}
	return 0
}

// ConditionalOrderPlacement represents the placement of a conditional order in
// state. It stores the stateful order itself, the `BlockHeight` and
// `TransactionIndex` at which the order was placed and triggered.
type ConditionalOrderPlacement struct {
	Order Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order"`
	// The block height and transaction index at which the order was placed.
	PlacementIndex TransactionOrdering `protobuf:"bytes,2,opt,name=placement_index,json=placementIndex,proto3" json:"placement_index"`
	// The block height and transaction index at which the order was triggered.
	// Set to be nil if the transaction has not been triggered.
	// Used for ordering by time priority when the chain is restarted.
	TriggerIndex *TransactionOrdering `protobuf:"bytes,3,opt,name=trigger_index,json=triggerIndex,proto3" json:"trigger_index,omitempty"`
}

func (m *ConditionalOrderPlacement) Reset()         { *m = ConditionalOrderPlacement{} }
func (m *ConditionalOrderPlacement) String() string { return proto.CompactTextString(m) }
func (*ConditionalOrderPlacement) ProtoMessage()    {}
func (*ConditionalOrderPlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{8}
}
func (m *ConditionalOrderPlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConditionalOrderPlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConditionalOrderPlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConditionalOrderPlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionalOrderPlacement.Merge(m, src)
}
func (m *ConditionalOrderPlacement) XXX_Size() int {
	return m.Size()
}
func (m *ConditionalOrderPlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionalOrderPlacement.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionalOrderPlacement proto.InternalMessageInfo

func (m *ConditionalOrderPlacement) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return Order{}
}

func (m *ConditionalOrderPlacement) GetPlacementIndex() TransactionOrdering {
	if m != nil {
		return m.PlacementIndex
	}
	return TransactionOrdering{}
}

func (m *ConditionalOrderPlacement) GetTriggerIndex() *TransactionOrdering {
	if m != nil {
		return m.TriggerIndex
	}
	return nil
}

// Order represents a single order belonging to a `Subaccount`
// for a particular `ClobPair`.
type Order struct {
	// The unique ID of this order. Meant to be unique across all orders.
	OrderId OrderId    `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id"`
	Side    Order_Side `protobuf:"varint,2,opt,name=side,proto3,enum=dydxprotocol.clob.Order_Side" json:"side,omitempty"`
	// The size of this order in base quantums. Must be a multiple of
	// `ClobPair.StepBaseQuantums` (where `ClobPair.Id = orderId.ClobPairId`).
	Quantums uint64 `protobuf:"varint,3,opt,name=quantums,proto3" json:"quantums,omitempty"`
	// The price level that this order will be placed at on the orderbook,
	// in subticks. Must be a multiple of ClobPair.SubticksPerTick
	// (where `ClobPair.Id = orderId.ClobPairId`).
	Subticks uint64 `protobuf:"varint,4,opt,name=subticks,proto3" json:"subticks,omitempty"`
	// Information about when the order expires.
	//
	// Types that are valid to be assigned to GoodTilOneof:
	//
	//	*Order_GoodTilBlock
	//	*Order_GoodTilBlockTime
	GoodTilOneof isOrder_GoodTilOneof `protobuf_oneof:"good_til_oneof"`
	// The time in force of this order.
	TimeInForce Order_TimeInForce `protobuf:"varint,7,opt,name=time_in_force,json=timeInForce,proto3,enum=dydxprotocol.clob.Order_TimeInForce" json:"time_in_force,omitempty"`
	// Enforces that the order can only reduce the size of an existing position.
	// If a ReduceOnly order would change the side of the existing position,
	// its size is reduced to that of the remaining size of the position.
	// If existing orders on the book with ReduceOnly
	// would already close the position, the least aggressive (out-of-the-money)
	// ReduceOnly orders are resized and canceled first.
	ReduceOnly bool `protobuf:"varint,8,opt,name=reduce_only,json=reduceOnly,proto3" json:"reduce_only,omitempty"`
	// Set of bit flags set arbitrarily by clients and ignored by the protocol.
	// Used by indexer to infer information about a placed order.
	ClientMetadata uint32              `protobuf:"varint,9,opt,name=client_metadata,json=clientMetadata,proto3" json:"client_metadata,omitempty"`
	ConditionType  Order_ConditionType `protobuf:"varint,10,opt,name=condition_type,json=conditionType,proto3,enum=dydxprotocol.clob.Order_ConditionType" json:"condition_type,omitempty"`
	// conditional_order_trigger_subticks represents the price at which this order
	// will be triggered. If the condition_type is CONDITION_TYPE_UNSPECIFIED,
	// this value is enforced to be 0. If this value is nonzero, condition_type
	// cannot be CONDITION_TYPE_UNSPECIFIED. Value is in subticks.
	// Must be a multiple of ClobPair.SubticksPerTick (where `ClobPair.Id =
	// orderId.ClobPairId`).
	ConditionalOrderTriggerSubticks uint64 `protobuf:"varint,11,opt,name=conditional_order_trigger_subticks,json=conditionalOrderTriggerSubticks,proto3" json:"conditional_order_trigger_subticks,omitempty"`
	// twap_config represents the configuration for a TWAP order. This must be present
	// for twap orders and will be ignored for all other order types.
	TwapConfig *TWAPOrderConfig `protobuf:"bytes,12,opt,name=twap_config,json=twapConfig,proto3" json:"twap_config,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{9}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

type isOrder_GoodTilOneof interface {
	isOrder_GoodTilOneof()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Order_GoodTilBlock struct {
	GoodTilBlock uint32 `protobuf:"varint,5,opt,name=good_til_block,json=goodTilBlock,proto3,oneof" json:"good_til_block,omitempty"`
}
type Order_GoodTilBlockTime struct {
	GoodTilBlockTime uint32 `protobuf:"fixed32,6,opt,name=good_til_block_time,json=goodTilBlockTime,proto3,oneof" json:"good_til_block_time,omitempty"`
}

func (*Order_GoodTilBlock) isOrder_GoodTilOneof()     {}
func (*Order_GoodTilBlockTime) isOrder_GoodTilOneof() {}

func (m *Order) GetGoodTilOneof() isOrder_GoodTilOneof {
	if m != nil {
		return m.GoodTilOneof
	}
	return nil
}

func (m *Order) GetOrderId() OrderId {
	if m != nil {
		return m.OrderId
	}
	return OrderId{}
}

func (m *Order) GetSide() Order_Side {
	if m != nil {
		return m.Side
	}
	return Order_SIDE_UNSPECIFIED
}

func (m *Order) GetQuantums() uint64 {
	if m != nil {
		return m.Quantums
	}
	return 0
}

func (m *Order) GetSubticks() uint64 {
	if m != nil {
		return m.Subticks
	}
	return 0
}

func (m *Order) GetGoodTilBlock() uint32 {
	if x, ok := m.GetGoodTilOneof().(*Order_GoodTilBlock); ok {
		return x.GoodTilBlock
	}
	return 0
}

func (m *Order) GetGoodTilBlockTime() uint32 {
	if x, ok := m.GetGoodTilOneof().(*Order_GoodTilBlockTime); ok {
		return x.GoodTilBlockTime
	}
	return 0
}

func (m *Order) GetTimeInForce() Order_TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return Order_TIME_IN_FORCE_UNSPECIFIED
}

func (m *Order) GetReduceOnly() bool {
	if m != nil {
		return m.ReduceOnly
	}
	return false
}

func (m *Order) GetClientMetadata() uint32 {
	if m != nil {
		return m.ClientMetadata
	}
	return 0
}

func (m *Order) GetConditionType() Order_ConditionType {
	if m != nil {
		return m.ConditionType
	}
	return Order_CONDITION_TYPE_UNSPECIFIED
}

func (m *Order) GetConditionalOrderTriggerSubticks() uint64 {
	if m != nil {
		return m.ConditionalOrderTriggerSubticks
	}
	return 0
}

func (m *Order) GetTwapConfig() *TWAPOrderConfig {
	if m != nil {
		return m.TwapConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Order) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Order_GoodTilBlock)(nil),
		(*Order_GoodTilBlockTime)(nil),
	}
}

type TWAPOrderConfig struct {
	// Duration of the TWAP order execution in seconds. Must be between 300 (5 minutes)
	// and 86400 (24 hours).
	Duration uint32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// Interval in seconds for each suborder to execute. Must be a whole number and
	// a factor of the duration.
	Interval uint32 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *TWAPOrderConfig) Reset()         { *m = TWAPOrderConfig{} }
func (m *TWAPOrderConfig) String() string { return proto.CompactTextString(m) }
func (*TWAPOrderConfig) ProtoMessage()    {}
func (*TWAPOrderConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{10}
}
func (m *TWAPOrderConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TWAPOrderConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TWAPOrderConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TWAPOrderConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TWAPOrderConfig.Merge(m, src)
}
func (m *TWAPOrderConfig) XXX_Size() int {
	return m.Size()
}
func (m *TWAPOrderConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TWAPOrderConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TWAPOrderConfig proto.InternalMessageInfo

func (m *TWAPOrderConfig) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TWAPOrderConfig) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// TransactionOrdering represents a unique location in the block where a
// transaction was placed. This proto includes both block height and the
// transaction index that the specific transaction was placed. This information
// is used for ordering by time priority when the chain is restarted.
type TransactionOrdering struct {
	// Block height in which the transaction was placed.
	BlockHeight uint32 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Within the block, the unique transaction index.
	TransactionIndex uint32 `protobuf:"varint,2,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
}

func (m *TransactionOrdering) Reset()         { *m = TransactionOrdering{} }
func (m *TransactionOrdering) String() string { return proto.CompactTextString(m) }
func (*TransactionOrdering) ProtoMessage()    {}
func (*TransactionOrdering) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{11}
}
func (m *TransactionOrdering) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionOrdering) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionOrdering.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionOrdering) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionOrdering.Merge(m, src)
}
func (m *TransactionOrdering) XXX_Size() int {
	return m.Size()
}
func (m *TransactionOrdering) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionOrdering.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionOrdering proto.InternalMessageInfo

func (m *TransactionOrdering) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TransactionOrdering) GetTransactionIndex() uint32 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

// StreamLiquidationOrder represents an protocol-generated IOC liquidation
// order. Used in full node streaming.
type StreamLiquidationOrder struct {
	// Information about this liquidation order.
	LiquidationInfo *PerpetualLiquidationInfo `protobuf:"bytes,1,opt,name=liquidation_info,json=liquidationInfo,proto3" json:"liquidation_info,omitempty"`
	// CLOB pair ID of the CLOB pair the liquidation order will be matched
	// against.
	ClobPairId uint32 `protobuf:"varint,2,opt,name=clob_pair_id,json=clobPairId,proto3" json:"clob_pair_id,omitempty"`
	// True if this is a buy order liquidating a short position, false if vice
	// versa.
	IsBuy bool `protobuf:"varint,3,opt,name=is_buy,json=isBuy,proto3" json:"is_buy,omitempty"`
	// The number of base quantums for this liquidation order.
	Quantums uint64 `protobuf:"varint,4,opt,name=quantums,proto3" json:"quantums,omitempty"`
	// The subticks this liquidation order will be submitted at.
	Subticks uint64 `protobuf:"varint,5,opt,name=subticks,proto3" json:"subticks,omitempty"`
}

func (m *StreamLiquidationOrder) Reset()         { *m = StreamLiquidationOrder{} }
func (m *StreamLiquidationOrder) String() string { return proto.CompactTextString(m) }
func (*StreamLiquidationOrder) ProtoMessage()    {}
func (*StreamLiquidationOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_673c6f4faa93736b, []int{12}
}
func (m *StreamLiquidationOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamLiquidationOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamLiquidationOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamLiquidationOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamLiquidationOrder.Merge(m, src)
}
func (m *StreamLiquidationOrder) XXX_Size() int {
	return m.Size()
}
func (m *StreamLiquidationOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamLiquidationOrder.DiscardUnknown(m)
}

var xxx_messageInfo_StreamLiquidationOrder proto.InternalMessageInfo

func (m *StreamLiquidationOrder) GetLiquidationInfo() *PerpetualLiquidationInfo {
	if m != nil {
		return m.LiquidationInfo
	}
	return nil
}

func (m *StreamLiquidationOrder) GetClobPairId() uint32 {
	if m != nil {
		return m.ClobPairId
	}
	return 0
}

func (m *StreamLiquidationOrder) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

func (m *StreamLiquidationOrder) GetQuantums() uint64 {
	if m != nil {
		return m.Quantums
	}
	return 0
}

func (m *StreamLiquidationOrder) GetSubticks() uint64 {
	if m != nil {
		return m.Subticks
	}
	return 0
}

func init() {
	proto.RegisterEnum("dydxprotocol.clob.Order_Side", Order_Side_name, Order_Side_value)
	proto.RegisterEnum("dydxprotocol.clob.Order_TimeInForce", Order_TimeInForce_name, Order_TimeInForce_value)
	proto.RegisterEnum("dydxprotocol.clob.Order_ConditionType", Order_ConditionType_name, Order_ConditionType_value)
	proto.RegisterType((*OrderId)(nil), "dydxprotocol.clob.OrderId")
	proto.RegisterType((*OrdersFilledDuringLatestBlock)(nil), "dydxprotocol.clob.OrdersFilledDuringLatestBlock")
	proto.RegisterType((*PotentiallyPrunableOrders)(nil), "dydxprotocol.clob.PotentiallyPrunableOrders")
	proto.RegisterType((*OrderFillState)(nil), "dydxprotocol.clob.OrderFillState")
	proto.RegisterType((*StatefulOrderTimeSliceValue)(nil), "dydxprotocol.clob.StatefulOrderTimeSliceValue")
	proto.RegisterType((*LongTermOrderPlacement)(nil), "dydxprotocol.clob.LongTermOrderPlacement")
	proto.RegisterType((*TWAPOrderPlacement)(nil), "dydxprotocol.clob.TWAPOrderPlacement")
	proto.RegisterType((*TWAPTriggerPlacement)(nil), "dydxprotocol.clob.TWAPTriggerPlacement")
	proto.RegisterType((*ConditionalOrderPlacement)(nil), "dydxprotocol.clob.ConditionalOrderPlacement")
	proto.RegisterType((*Order)(nil), "dydxprotocol.clob.Order")
	proto.RegisterType((*TWAPOrderConfig)(nil), "dydxprotocol.clob.TWAPOrderConfig")
	proto.RegisterType((*TransactionOrdering)(nil), "dydxprotocol.clob.TransactionOrdering")
	proto.RegisterType((*StreamLiquidationOrder)(nil), "dydxprotocol.clob.StreamLiquidationOrder")
}

func init() { proto.RegisterFile("dydxprotocol/clob/order.proto", fileDescriptor_673c6f4faa93736b) }

var fileDescriptor_673c6f4faa93736b = []byte{
	// 1245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x6f, 0x1b, 0xc5,
	0x1b, 0xf6, 0x26, 0x4e, 0xe3, 0xbc, 0xfe, 0x13, 0x67, 0x9a, 0xf6, 0xe7, 0xba, 0xbf, 0xb8, 0x66,
	0x55, 0x4a, 0x50, 0x55, 0x07, 0x42, 0x85, 0x84, 0x10, 0x87, 0xc6, 0x89, 0x95, 0x55, 0xdc, 0xd8,
	0xdd, 0xdd, 0x16, 0xb5, 0x42, 0x8c, 0xd6, 0xbb, 0xe3, 0xcd, 0xa8, 0xe3, 0x59, 0x77, 0x77, 0xb6,
	0xd4, 0x17, 0x4e, 0x7c, 0x00, 0xbe, 0x04, 0xdf, 0x03, 0x89, 0x4b, 0x8f, 0x3d, 0x72, 0x42, 0xd0,
	0x8a, 0x8f, 0xc0, 0x1d, 0xcd, 0xec, 0xda, 0x59, 0xc7, 0x09, 0x08, 0x85, 0x03, 0x37, 0xcf, 0xf3,
	0xbe, 0xf3, 0xec, 0xfb, 0xf7, 0xf1, 0xc0, 0x96, 0x37, 0xf1, 0x5e, 0x8d, 0xc3, 0x40, 0x04, 0x6e,
	0xc0, 0x76, 0x5c, 0x16, 0x0c, 0x76, 0x82, 0xd0, 0x23, 0x61, 0x4b, 0x61, 0x68, 0x23, 0x6b, 0x6e,
	0x49, 0x73, 0x7d, 0xd3, 0x0f, 0xfc, 0x40, 0x41, 0x3b, 0xf2, 0x57, 0xe2, 0x58, 0xff, 0x70, 0x8e,
	0x27, 0x8a, 0x07, 0x8e, 0xeb, 0x06, 0x31, 0x17, 0x51, 0xe6, 0x77, 0xea, 0x7a, 0x7b, 0xf1, 0x93,
	0x8c, 0xbe, 0x88, 0xa9, 0xe7, 0x08, 0x1a, 0xf0, 0x28, 0xf1, 0xd2, 0x7f, 0xd7, 0x60, 0xb5, 0x27,
	0x23, 0x31, 0x3c, 0xf4, 0x08, 0xca, 0xa7, 0x2c, 0x98, 0x7a, 0x35, 0xad, 0xa9, 0x6d, 0x17, 0x77,
	0xef, 0xb4, 0xe6, 0xa2, 0xcb, 0x7c, 0xb4, 0x65, 0xcd, 0x7e, 0x1b, 0xde, 0x5e, 0xfe, 0xf5, 0x2f,
	0xb7, 0x72, 0x66, 0x29, 0xca, 0x60, 0xe8, 0x26, 0xac, 0xb9, 0x8c, 0x92, 0x84, 0x6e, 0xa9, 0xa9,
	0x6d, 0xaf, 0x9a, 0x85, 0x04, 0x30, 0x3c, 0x74, 0x0b, 0x8a, 0xaa, 0x08, 0x78, 0xc8, 0x1c, 0x3f,
	0xaa, 0x2d, 0x37, 0xb5, 0xed, 0xb2, 0x09, 0x0a, 0xea, 0x48, 0x04, 0x35, 0xa1, 0x24, 0xe3, 0xc6,
	0x63, 0x87, 0x86, 0x92, 0x20, 0x9f, 0x78, 0x48, 0xac, 0xef, 0x50, 0x19, 0xf2, 0x07, 0xb0, 0x1e,
	0x91, 0x17, 0x31, 0xe1, 0x2e, 0xc1, 0x3c, 0x1e, 0x0d, 0x48, 0x58, 0x5b, 0x69, 0x6a, 0xdb, 0x79,
	0xb3, 0x32, 0x85, 0x8f, 0x15, 0xaa, 0x7f, 0x0d, 0x5b, 0x2a, 0xcd, 0xa8, 0x43, 0x19, 0x23, 0xde,
	0x7e, 0x1c, 0x52, 0xee, 0x77, 0x1d, 0x41, 0x22, 0xb1, 0xc7, 0x02, 0xf7, 0x39, 0xfa, 0x02, 0xd6,
	0x92, 0x60, 0xa8, 0x17, 0xd5, 0xb4, 0xe6, 0xf2, 0x76, 0x71, 0xb7, 0xde, 0x5a, 0x68, 0x4b, 0x2b,
	0xad, 0x55, 0x9a, 0x6c, 0x21, 0x48, 0x8e, 0x91, 0xfe, 0x0c, 0x6e, 0xf4, 0x03, 0x41, 0xb8, 0xa0,
	0x0e, 0x63, 0x93, 0x7e, 0x18, 0x73, 0x67, 0xc0, 0x48, 0xf2, 0xc9, 0xcb, 0x72, 0x13, 0xa8, 0x28,
	0x93, 0x0c, 0xdd, 0x12, 0x8e, 0x20, 0xb2, 0x72, 0x43, 0xca, 0x18, 0x76, 0x46, 0xb2, 0xce, 0xaa,
	0x4f, 0x79, 0x13, 0x24, 0xf4, 0x40, 0x21, 0x68, 0x17, 0xae, 0x8d, 0xd3, 0x18, 0xf0, 0x40, 0xe6,
	0x87, 0x4f, 0x08, 0xf5, 0x4f, 0x84, 0xea, 0x41, 0xd9, 0xbc, 0x3a, 0x35, 0xaa, 0xdc, 0x0f, 0x95,
	0x49, 0xff, 0x0a, 0x6e, 0x2a, 0xf6, 0x61, 0xcc, 0xd4, 0xe7, 0x6c, 0x3a, 0x22, 0x16, 0xa3, 0x2e,
	0x79, 0xe2, 0xb0, 0x98, 0x5c, 0x36, 0x89, 0x1f, 0x34, 0xb8, 0xde, 0x0d, 0xb8, 0x6f, 0x93, 0x70,
	0xa4, 0x7c, 0xfa, 0xcc, 0x71, 0xc9, 0x88, 0x70, 0x81, 0xee, 0xc3, 0x8a, 0x72, 0x4b, 0xe7, 0xad,
	0x76, 0x11, 0x6b, 0xca, 0x99, 0x38, 0xa3, 0xc7, 0xb0, 0x3e, 0x9e, 0x52, 0x60, 0xca, 0x3d, 0xf2,
	0x4a, 0x25, 0xb7, 0x30, 0xaf, 0xea, 0xbe, 0x1d, 0x3a, 0x3c, 0x72, 0x5c, 0x39, 0xf9, 0x8a, 0x8a,
	0x72, 0x3f, 0x65, 0xab, 0xcc, 0x48, 0x0c, 0xc9, 0xa1, 0xff, 0xa4, 0x01, 0xb2, 0xbf, 0x7c, 0xd0,
	0xff, 0x57, 0x62, 0x7c, 0x1f, 0x2a, 0x21, 0x19, 0x39, 0x94, 0x53, 0xee, 0x63, 0x46, 0xfc, 0x28,
	0xad, 0x7f, 0x79, 0x86, 0x76, 0x89, 0x1f, 0xa1, 0x7b, 0x80, 0x4e, 0xdd, 0x5e, 0xc4, 0x0e, 0x17,
	0xf1, 0x28, 0xd9, 0x87, 0xbc, 0xb9, 0x31, 0xb3, 0x3c, 0x4a, 0x0d, 0xe8, 0x3d, 0x28, 0xcd, 0xf5,
	0x34, 0x59, 0x8b, 0xe2, 0x20, 0xd3, 0xcb, 0x6f, 0x61, 0x53, 0x26, 0x61, 0x87, 0xd4, 0xf7, 0x2f,
	0x9f, 0xc6, 0x47, 0xb0, 0x29, 0x12, 0xa6, 0xc5, 0x61, 0xca, 0x9b, 0x28, 0xb5, 0x65, 0x67, 0xe9,
	0x0f, 0x0d, 0x6e, 0xb4, 0x03, 0xee, 0x51, 0x59, 0x71, 0x87, 0xfd, 0x87, 0x1b, 0x8e, 0x8e, 0xa0,
	0x3c, 0x4d, 0x2e, 0x21, 0x5d, 0xfe, 0x27, 0xa4, 0x66, 0x29, 0xbd, 0x9c, 0x4c, 0xcf, 0x8f, 0xab,
	0xb0, 0xa2, 0x4c, 0xe8, 0x73, 0x28, 0x4c, 0xd7, 0x25, 0x4d, 0xf3, 0xef, 0xb7, 0x65, 0x35, 0xdd,
	0x16, 0xf4, 0x31, 0xe4, 0x23, 0xea, 0x11, 0x95, 0x5f, 0x65, 0x77, 0xeb, 0xa2, 0x8b, 0x2d, 0x8b,
	0x7a, 0xc4, 0x54, 0xae, 0xa8, 0x0e, 0x85, 0x33, 0x93, 0x33, 0x3b, 0x4b, 0x5b, 0x14, 0x0f, 0x04,
	0x75, 0x9f, 0x47, 0x6a, 0x58, 0xf2, 0xe6, 0xec, 0x8c, 0xee, 0x40, 0xc5, 0x0f, 0x02, 0x0f, 0x0b,
	0xca, 0x92, 0xe6, 0x2a, 0x01, 0x2d, 0x1f, 0xe6, 0xcc, 0x92, 0xc4, 0x6d, 0xca, 0x12, 0x7d, 0xdc,
	0x81, 0xab, 0xf3, 0x7e, 0x58, 0xd0, 0x11, 0xa9, 0x5d, 0x91, 0x9a, 0x7e, 0x98, 0x33, 0xab, 0x59,
	0x67, 0xa9, 0x1c, 0xe8, 0x10, 0xca, 0xd2, 0x03, 0x53, 0x8e, 0x87, 0x41, 0xe8, 0x92, 0xda, 0xaa,
	0x4a, 0xe6, 0xf6, 0x85, 0xc9, 0xc8, 0x5b, 0x06, 0xef, 0x48, 0x5f, 0xb3, 0x28, 0x4e, 0x0f, 0x52,
	0xed, 0x42, 0xe2, 0xc5, 0x2e, 0xc1, 0x01, 0x67, 0x93, 0x5a, 0xa1, 0xa9, 0x6d, 0x17, 0x4c, 0x48,
	0xa0, 0x1e, 0x67, 0x13, 0xf9, 0x2f, 0x90, 0xfe, 0xcb, 0x8c, 0x88, 0x70, 0x3c, 0x47, 0x38, 0xb5,
	0x35, 0xb5, 0x13, 0x95, 0x04, 0x7e, 0x98, 0xa2, 0xe8, 0x21, 0x54, 0xdc, 0xe9, 0x54, 0x62, 0x31,
	0x19, 0x93, 0x1a, 0xa8, 0xa0, 0xee, 0x5c, 0x18, 0xd4, 0x6c, 0x88, 0xed, 0xc9, 0x98, 0x98, 0x65,
	0x37, 0x7b, 0x44, 0x47, 0xa0, 0xbb, 0xa7, 0x43, 0x8e, 0x93, 0x7e, 0x4f, 0x87, 0x69, 0x56, 0xf1,
	0xa2, 0xaa, 0xf8, 0x2d, 0xf7, 0xcc, 0x3a, 0xa4, 0xbb, 0x69, 0x4d, 0x1b, 0xd1, 0x86, 0xa2, 0xf8,
	0xc6, 0x19, 0x63, 0x37, 0xe0, 0x43, 0xea, 0xd7, 0x4a, 0x6a, 0x66, 0xf4, 0xf3, 0xa6, 0x70, 0xaa,
	0x4e, 0x6d, 0xe5, 0x69, 0x82, 0xbc, 0x96, 0xfc, 0xd6, 0x3f, 0x83, 0xbc, 0x9c, 0x09, 0xb4, 0x09,
	0x55, 0xcb, 0xd8, 0x3f, 0xc0, 0x8f, 0x8f, 0xad, 0xfe, 0x41, 0xdb, 0xe8, 0x18, 0x07, 0xfb, 0xd5,
	0x1c, 0x2a, 0x41, 0x41, 0xa1, 0x7b, 0x8f, 0x9f, 0x56, 0x35, 0x54, 0x86, 0x35, 0x75, 0xb2, 0x0e,
	0xba, 0xdd, 0xea, 0x92, 0xfe, 0x9d, 0x06, 0xc5, 0x4c, 0x0b, 0xd0, 0x16, 0xdc, 0xb0, 0x8d, 0x87,
	0x07, 0xd8, 0x38, 0xc6, 0x9d, 0x9e, 0xd9, 0x3e, 0xcb, 0x75, 0x0d, 0x36, 0xe6, 0xcd, 0x46, 0xaf,
	0x5d, 0xd5, 0xd0, 0x4d, 0xf8, 0xdf, 0x3c, 0xdc, 0xef, 0x59, 0x36, 0xee, 0x1d, 0x77, 0x9f, 0x56,
	0x97, 0x90, 0x0e, 0xf5, 0x79, 0x63, 0xc7, 0xe8, 0x76, 0x71, 0xcf, 0xc4, 0x47, 0x46, 0xb7, 0x5b,
	0x5d, 0xae, 0x2f, 0x15, 0x34, 0x7d, 0x04, 0xe5, 0xb9, 0x9a, 0xa3, 0x06, 0xd4, 0xdb, 0xbd, 0xe3,
	0x7d, 0xc3, 0x36, 0x7a, 0xc7, 0xd8, 0x7e, 0xda, 0x3f, 0x1b, 0xc8, 0xff, 0xa1, 0x76, 0xc6, 0x6e,
	0xd9, 0xbd, 0x3e, 0xee, 0xf6, 0x2c, 0xab, 0xaa, 0x9d, 0x73, 0xdb, 0x7e, 0x70, 0x74, 0x80, 0xfb,
	0x66, 0xaf, 0x63, 0xd8, 0xd5, 0xa5, 0xbd, 0x6a, 0x66, 0xfc, 0x03, 0x4e, 0x82, 0xa1, 0x6e, 0xc0,
	0xfa, 0x99, 0x0a, 0xcb, 0xfd, 0xf1, 0xe2, 0x50, 0xbd, 0x9b, 0xd4, 0x2e, 0x97, 0xcd, 0xd9, 0x59,
	0xda, 0x28, 0x17, 0x24, 0x7c, 0xe9, 0xb0, 0x54, 0xdc, 0x67, 0x67, 0x9d, 0xc0, 0xd5, 0x73, 0x24,
	0x63, 0x41, 0xbf, 0xb5, 0x05, 0xfd, 0x46, 0x77, 0x61, 0x43, 0x9c, 0xde, 0xcc, 0xa8, 0x5d, 0xd9,
	0xac, 0x66, 0x0c, 0x89, 0xe8, 0xfc, 0xa6, 0xc1, 0x75, 0x4b, 0x84, 0xc4, 0x19, 0x75, 0x4f, 0x1f,
	0x78, 0x89, 0x0a, 0x3d, 0x81, 0x6a, 0xe6, 0xd1, 0x87, 0x29, 0x1f, 0x06, 0xa9, 0x1a, 0xdd, 0x3d,
	0x67, 0xb2, 0xfa, 0x24, 0x1c, 0x13, 0x11, 0x3b, 0x2c, 0xc3, 0x63, 0xf0, 0x61, 0x60, 0xae, 0xb3,
	0x79, 0x60, 0xe1, 0x65, 0xb6, 0xb4, 0xf0, 0x32, 0xbb, 0x06, 0x57, 0x68, 0x84, 0x07, 0xf1, 0x44,
	0xa9, 0x51, 0xc1, 0x5c, 0xa1, 0xd1, 0x5e, 0x3c, 0x99, 0x93, 0xa9, 0xfc, 0x5f, 0xc8, 0xd4, 0xca,
	0xbc, 0x4c, 0xed, 0xf5, 0x5f, 0xbf, 0x6d, 0x68, 0x6f, 0xde, 0x36, 0xb4, 0x5f, 0xdf, 0x36, 0xb4,
	0xef, 0xdf, 0x35, 0x72, 0x6f, 0xde, 0x35, 0x72, 0x3f, 0xbf, 0x6b, 0xe4, 0x9e, 0x7d, 0xea, 0x53,
	0x71, 0x12, 0x0f, 0x5a, 0x6e, 0x30, 0xda, 0x99, 0x7b, 0xf2, 0xbe, 0xbc, 0x7f, 0xcf, 0x3d, 0x71,
	0x28, 0xdf, 0x99, 0x21, 0xaf, 0x92, 0x67, 0xb0, 0x5c, 0xfc, 0x68, 0x70, 0x45, 0xc1, 0x9f, 0xfc,
	0x19, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x86, 0x94, 0x79, 0x9b, 0x0b, 0x00, 0x00,
}

func (m *OrderId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x28
	}
	if m.ClobPairId != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.ClobPairId))
		i--
		dAtA[i] = 0x20
	}
	if m.OrderFlags != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.OrderFlags))
		i--
		dAtA[i] = 0x18
	}
	if m.ClientId != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ClientId))
		i--
		dAtA[i] = 0x15
	}
	{
		size, err := m.SubaccountId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OrdersFilledDuringLatestBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrdersFilledDuringLatestBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrdersFilledDuringLatestBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		for iNdEx := len(m.OrderIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PotentiallyPrunableOrders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PotentiallyPrunableOrders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PotentiallyPrunableOrders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		for iNdEx := len(m.OrderIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrderFillState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderFillState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderFillState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrunableBlockHeight != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.PrunableBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.FillAmount != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.FillAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatefulOrderTimeSliceValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatefulOrderTimeSliceValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatefulOrderTimeSliceValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		for iNdEx := len(m.OrderIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LongTermOrderPlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongTermOrderPlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongTermOrderPlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PlacementIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TWAPOrderPlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TWAPOrderPlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TWAPOrderPlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.RemainingQuantums != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.RemainingQuantums))
		i--
		dAtA[i] = 0x18
	}
	if m.RemainingLegs != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.RemainingLegs))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TWAPTriggerPlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TWAPTriggerPlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TWAPTriggerPlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TriggerBlockHeight != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.TriggerBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConditionalOrderPlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConditionalOrderPlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConditionalOrderPlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TriggerIndex != nil {
		{
			size, err := m.TriggerIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.PlacementIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TwapConfig != nil {
		{
			size, err := m.TwapConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.ConditionalOrderTriggerSubticks != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.ConditionalOrderTriggerSubticks))
		i--
		dAtA[i] = 0x58
	}
	if m.ConditionType != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.ConditionType))
		i--
		dAtA[i] = 0x50
	}
	if m.ClientMetadata != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.ClientMetadata))
		i--
		dAtA[i] = 0x48
	}
	if m.ReduceOnly {
		i--
		if m.ReduceOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.TimeInForce != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.TimeInForce))
		i--
		dAtA[i] = 0x38
	}
	if m.GoodTilOneof != nil {
		{
			size := m.GoodTilOneof.Size()
			i -= size
			if _, err := m.GoodTilOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Subticks != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Subticks))
		i--
		dAtA[i] = 0x20
	}
	if m.Quantums != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Quantums))
		i--
		dAtA[i] = 0x18
	}
	if m.Side != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.OrderId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Order_GoodTilBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order_GoodTilBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintOrder(dAtA, i, uint64(m.GoodTilBlock))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *Order_GoodTilBlockTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order_GoodTilBlockTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.GoodTilBlockTime))
	i--
	dAtA[i] = 0x35
	return len(dAtA) - i, nil
}
func (m *TWAPOrderConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TWAPOrderConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TWAPOrderConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x10
	}
	if m.Duration != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionOrdering) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionOrdering) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionOrdering) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransactionIndex != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.TransactionIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockHeight != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamLiquidationOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamLiquidationOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamLiquidationOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subticks != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Subticks))
		i--
		dAtA[i] = 0x28
	}
	if m.Quantums != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Quantums))
		i--
		dAtA[i] = 0x20
	}
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ClobPairId != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.ClobPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.LiquidationInfo != nil {
		{
			size, err := m.LiquidationInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SubaccountId.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.ClientId != 0 {
		n += 5
	}
	if m.OrderFlags != 0 {
		n += 1 + sovOrder(uint64(m.OrderFlags))
	}
	if m.ClobPairId != 0 {
		n += 1 + sovOrder(uint64(m.ClobPairId))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovOrder(uint64(m.SequenceNumber))
	}
	return n
}

func (m *OrdersFilledDuringLatestBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		for _, e := range m.OrderIds {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	return n
}

func (m *PotentiallyPrunableOrders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		for _, e := range m.OrderIds {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	return n
}

func (m *OrderFillState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FillAmount != 0 {
		n += 1 + sovOrder(uint64(m.FillAmount))
	}
	if m.PrunableBlockHeight != 0 {
		n += 1 + sovOrder(uint64(m.PrunableBlockHeight))
	}
	return n
}

func (m *StatefulOrderTimeSliceValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		for _, e := range m.OrderIds {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	return n
}

func (m *LongTermOrderPlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Order.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.PlacementIndex.Size()
	n += 1 + l + sovOrder(uint64(l))
	return n
}

func (m *TWAPOrderPlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Order.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.RemainingLegs != 0 {
		n += 1 + sovOrder(uint64(m.RemainingLegs))
	}
	if m.RemainingQuantums != 0 {
		n += 1 + sovOrder(uint64(m.RemainingQuantums))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovOrder(uint64(m.BlockHeight))
	}
	return n
}

func (m *TWAPTriggerPlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Order.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.TriggerBlockHeight != 0 {
		n += 1 + sovOrder(uint64(m.TriggerBlockHeight))
	}
	return n
}

func (m *ConditionalOrderPlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Order.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.PlacementIndex.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.TriggerIndex != nil {
		l = m.TriggerIndex.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OrderId.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.Side != 0 {
		n += 1 + sovOrder(uint64(m.Side))
	}
	if m.Quantums != 0 {
		n += 1 + sovOrder(uint64(m.Quantums))
	}
	if m.Subticks != 0 {
		n += 1 + sovOrder(uint64(m.Subticks))
	}
	if m.GoodTilOneof != nil {
		n += m.GoodTilOneof.Size()
	}
	if m.TimeInForce != 0 {
		n += 1 + sovOrder(uint64(m.TimeInForce))
	}
	if m.ReduceOnly {
		n += 2
	}
	if m.ClientMetadata != 0 {
		n += 1 + sovOrder(uint64(m.ClientMetadata))
	}
	if m.ConditionType != 0 {
		n += 1 + sovOrder(uint64(m.ConditionType))
	}
	if m.ConditionalOrderTriggerSubticks != 0 {
		n += 1 + sovOrder(uint64(m.ConditionalOrderTriggerSubticks))
	}
	if m.TwapConfig != nil {
		l = m.TwapConfig.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *Order_GoodTilBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOrder(uint64(m.GoodTilBlock))
	return n
}
func (m *Order_GoodTilBlockTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *TWAPOrderConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovOrder(uint64(m.Duration))
	}
	if m.Interval != 0 {
		n += 1 + sovOrder(uint64(m.Interval))
	}
	return n
}

func (m *TransactionOrdering) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovOrder(uint64(m.BlockHeight))
	}
	if m.TransactionIndex != 0 {
		n += 1 + sovOrder(uint64(m.TransactionIndex))
	}
	return n
}

func (m *StreamLiquidationOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiquidationInfo != nil {
		l = m.LiquidationInfo.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.ClobPairId != 0 {
		n += 1 + sovOrder(uint64(m.ClobPairId))
	}
	if m.IsBuy {
		n += 2
	}
	if m.Quantums != 0 {
		n += 1 + sovOrder(uint64(m.Quantums))
	}
	if m.Subticks != 0 {
		n += 1 + sovOrder(uint64(m.Subticks))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SubaccountId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderFlags", wireType)
			}
			m.OrderFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderFlags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClobPairId", wireType)
			}
			m.ClobPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClobPairId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrdersFilledDuringLatestBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrdersFilledDuringLatestBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrdersFilledDuringLatestBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderIds = append(m.OrderIds, OrderId{})
			if err := m.OrderIds[len(m.OrderIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PotentiallyPrunableOrders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PotentiallyPrunableOrders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PotentiallyPrunableOrders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderIds = append(m.OrderIds, OrderId{})
			if err := m.OrderIds[len(m.OrderIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderFillState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderFillState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderFillState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillAmount", wireType)
			}
			m.FillAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FillAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrunableBlockHeight", wireType)
			}
			m.PrunableBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrunableBlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatefulOrderTimeSliceValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatefulOrderTimeSliceValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatefulOrderTimeSliceValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderIds = append(m.OrderIds, OrderId{})
			if err := m.OrderIds[len(m.OrderIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LongTermOrderPlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongTermOrderPlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongTermOrderPlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PlacementIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TWAPOrderPlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TWAPOrderPlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TWAPOrderPlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingLegs", wireType)
			}
			m.RemainingLegs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingLegs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingQuantums", wireType)
			}
			m.RemainingQuantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingQuantums |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TWAPTriggerPlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TWAPTriggerPlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TWAPTriggerPlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerBlockHeight", wireType)
			}
			m.TriggerBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConditionalOrderPlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConditionalOrderPlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConditionalOrderPlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PlacementIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TriggerIndex == nil {
				m.TriggerIndex = &TransactionOrdering{}
			}
			if err := m.TriggerIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= Order_Side(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantums", wireType)
			}
			m.Quantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantums |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subticks", wireType)
			}
			m.Subticks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subticks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodTilBlock", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoodTilOneof = &Order_GoodTilBlock{v}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodTilBlockTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GoodTilOneof = &Order_GoodTilBlockTime{v}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			m.TimeInForce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInForce |= Order_TimeInForce(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReduceOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReduceOnly = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientMetadata", wireType)
			}
			m.ClientMetadata = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientMetadata |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionType", wireType)
			}
			m.ConditionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConditionType |= Order_ConditionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionalOrderTriggerSubticks", wireType)
			}
			m.ConditionalOrderTriggerSubticks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConditionalOrderTriggerSubticks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwapConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TwapConfig == nil {
				m.TwapConfig = &TWAPOrderConfig{}
			}
			if err := m.TwapConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TWAPOrderConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TWAPOrderConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TWAPOrderConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionOrdering) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionOrdering: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionOrdering: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionIndex", wireType)
			}
			m.TransactionIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamLiquidationOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamLiquidationOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamLiquidationOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiquidationInfo == nil {
				m.LiquidationInfo = &PerpetualLiquidationInfo{}
			}
			if err := m.LiquidationInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClobPairId", wireType)
			}
			m.ClobPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClobPairId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantums", wireType)
			}
			m.Quantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantums |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subticks", wireType)
			}
			m.Subticks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subticks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
