// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/clob/block_rate_limit_config.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Defines the block rate limits for CLOB specific operations.
type BlockRateLimitConfiguration struct {
	// How many stateful order attempts (successful and failed) are allowed for
	// an account per N blocks. Note that the rate limits are applied
	// in an AND fashion such that an order placement must pass all rate limit
	// configurations.
	//
	// Specifying 0 values disables this rate limit.
	MaxStatefulOrdersPerNBlocks []MaxPerNBlocksRateLimit `protobuf:"bytes,2,rep,name=max_stateful_orders_per_n_blocks,json=maxStatefulOrdersPerNBlocks,proto3" json:"max_stateful_orders_per_n_blocks"`
	// How many short term order place and cancel attempts (successful and failed)
	// are allowed for an account per N blocks. Note that the rate limits are
	// applied in an AND fashion such that an order placement must pass all rate
	// limit configurations.
	//
	// Specifying 0 values disables this rate limit.
	MaxShortTermOrdersAndCancelsPerNBlocks []MaxPerNBlocksRateLimit `protobuf:"bytes,4,rep,name=max_short_term_orders_and_cancels_per_n_blocks,json=maxShortTermOrdersAndCancelsPerNBlocks,proto3" json:"max_short_term_orders_and_cancels_per_n_blocks"`
}

func (m *BlockRateLimitConfiguration) Reset()         { *m = BlockRateLimitConfiguration{} }
func (m *BlockRateLimitConfiguration) String() string { return proto.CompactTextString(m) }
func (*BlockRateLimitConfiguration) ProtoMessage()    {}
func (*BlockRateLimitConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7d196450032f13, []int{0}
}
func (m *BlockRateLimitConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockRateLimitConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockRateLimitConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockRateLimitConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRateLimitConfiguration.Merge(m, src)
}
func (m *BlockRateLimitConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *BlockRateLimitConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRateLimitConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRateLimitConfiguration proto.InternalMessageInfo

func (m *BlockRateLimitConfiguration) GetMaxStatefulOrdersPerNBlocks() []MaxPerNBlocksRateLimit {
	if m != nil {
		return m.MaxStatefulOrdersPerNBlocks
	}
	return nil
}

func (m *BlockRateLimitConfiguration) GetMaxShortTermOrdersAndCancelsPerNBlocks() []MaxPerNBlocksRateLimit {
	if m != nil {
		return m.MaxShortTermOrdersAndCancelsPerNBlocks
	}
	return nil
}

// Defines a rate limit over a specific number of blocks.
type MaxPerNBlocksRateLimit struct {
	// How many blocks the rate limit is over.
	// Specifying 0 is invalid.
	NumBlocks uint32 `protobuf:"varint,1,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	// What the limit is for `num_blocks`.
	// Specifying 0 is invalid.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *MaxPerNBlocksRateLimit) Reset()         { *m = MaxPerNBlocksRateLimit{} }
func (m *MaxPerNBlocksRateLimit) String() string { return proto.CompactTextString(m) }
func (*MaxPerNBlocksRateLimit) ProtoMessage()    {}
func (*MaxPerNBlocksRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7d196450032f13, []int{1}
}
func (m *MaxPerNBlocksRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaxPerNBlocksRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaxPerNBlocksRateLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaxPerNBlocksRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxPerNBlocksRateLimit.Merge(m, src)
}
func (m *MaxPerNBlocksRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *MaxPerNBlocksRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxPerNBlocksRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MaxPerNBlocksRateLimit proto.InternalMessageInfo

func (m *MaxPerNBlocksRateLimit) GetNumBlocks() uint32 {
	if m != nil {
		return m.NumBlocks
	}
	return 0
}

func (m *MaxPerNBlocksRateLimit) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*BlockRateLimitConfiguration)(nil), "dydxprotocol.clob.BlockRateLimitConfiguration")
	proto.RegisterType((*MaxPerNBlocksRateLimit)(nil), "dydxprotocol.clob.MaxPerNBlocksRateLimit")
}

func init() {
	proto.RegisterFile("dydxprotocol/clob/block_rate_limit_config.proto", fileDescriptor_0b7d196450032f13)
}

var fileDescriptor_0b7d196450032f13 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xbd, 0x4e, 0xeb, 0x30,
	0x14, 0xc7, 0xe3, 0x34, 0xf7, 0xaa, 0xd7, 0x57, 0x48, 0x25, 0xaa, 0x50, 0x45, 0x45, 0xa8, 0x3a,
	0xa0, 0x32, 0x90, 0x48, 0x80, 0xd8, 0x69, 0xb7, 0x8a, 0x42, 0x55, 0x98, 0x58, 0x2c, 0xc7, 0x71,
	0xd3, 0x88, 0xd8, 0xae, 0x1c, 0xa7, 0x4a, 0x9f, 0x02, 0xde, 0x85, 0x97, 0xe8, 0xd8, 0x91, 0x09,
	0xa1, 0xf6, 0x45, 0x50, 0x9c, 0x7e, 0xf0, 0x35, 0xb1, 0x25, 0xc7, 0xe7, 0xfc, 0x7f, 0x3f, 0xcb,
	0x07, 0x7a, 0xc1, 0x34, 0xc8, 0xc6, 0x52, 0x28, 0x41, 0x44, 0xec, 0x91, 0x58, 0xf8, 0x9e, 0x1f,
	0x0b, 0xf2, 0x80, 0x24, 0x56, 0x14, 0xc5, 0x11, 0x8b, 0x14, 0x22, 0x82, 0x0f, 0xa3, 0xd0, 0xd5,
	0x5d, 0xf6, 0xee, 0xc7, 0x01, 0x37, 0x1f, 0xd8, 0xaf, 0x86, 0x22, 0x14, 0xba, 0xe4, 0xe5, 0x5f,
	0x45, 0x63, 0xf3, 0xd9, 0x84, 0xf5, 0x76, 0x1e, 0x35, 0xc0, 0x8a, 0x5e, 0xe5, 0x41, 0x1d, 0x9d,
	0x93, 0x4a, 0xac, 0x22, 0xc1, 0xed, 0x09, 0x6c, 0x30, 0x9c, 0xa1, 0x44, 0x61, 0x45, 0x87, 0x69,
	0x8c, 0x84, 0x0c, 0xa8, 0x4c, 0xd0, 0x98, 0x4a, 0xc4, 0x91, 0x76, 0x48, 0x6a, 0x66, 0xa3, 0xd4,
	0xfa, 0x7f, 0x7a, 0xec, 0x7e, 0x63, 0xba, 0x3d, 0x9c, 0xf5, 0xa9, 0xbc, 0xd6, 0x80, 0x64, 0x43,
	0x68, 0x5b, 0xb3, 0xd7, 0x43, 0x63, 0x50, 0x67, 0x38, 0xbb, 0x5d, 0xe5, 0xde, 0xe8, 0xd8, 0x6d,
	0xaf, 0xfd, 0x08, 0xa0, 0xab, 0xc1, 0x23, 0x21, 0x15, 0x52, 0x54, 0xb2, 0x35, 0x1a, 0xf3, 0x00,
	0x11, 0xcc, 0x09, 0x8d, 0xbf, 0x68, 0x58, 0xbf, 0xd3, 0x38, 0xca, 0x35, 0x72, 0xca, 0x1d, 0x95,
	0xac, 0xf0, 0xb8, 0xe4, 0x41, 0xa7, 0x20, 0x6c, 0xc7, 0xba, 0x56, 0x19, 0x54, 0xcc, 0xae, 0x55,
	0x2e, 0x55, 0xac, 0x66, 0x0f, 0xee, 0xfd, 0x9c, 0x69, 0x1f, 0x40, 0xc8, 0x53, 0xb6, 0x56, 0x02,
	0x0d, 0xd0, 0xda, 0x19, 0xfc, 0xe3, 0x29, 0x5b, 0x5d, 0xab, 0x0a, 0xff, 0xe8, 0xd7, 0xaa, 0x99,
	0xfa, 0xa4, 0xf8, 0x69, 0xf7, 0x67, 0x0b, 0x07, 0xcc, 0x17, 0x0e, 0x78, 0x5b, 0x38, 0xe0, 0x69,
	0xe9, 0x18, 0xf3, 0xa5, 0x63, 0xbc, 0x2c, 0x1d, 0xe3, 0xfe, 0x22, 0x8c, 0xd4, 0x28, 0xf5, 0x5d,
	0x22, 0xd8, 0xe7, 0x1d, 0x98, 0x9c, 0x9f, 0x90, 0x11, 0x8e, 0xb8, 0xb7, 0xa9, 0x64, 0xc5, 0x5e,
	0xa8, 0xe9, 0x98, 0x26, 0xfe, 0x5f, 0x5d, 0x3e, 0x7b, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x39, 0xbe,
	0x02, 0x52, 0x39, 0x02, 0x00, 0x00,
}

func (m *BlockRateLimitConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockRateLimitConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockRateLimitConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxShortTermOrdersAndCancelsPerNBlocks) > 0 {
		for iNdEx := len(m.MaxShortTermOrdersAndCancelsPerNBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxShortTermOrdersAndCancelsPerNBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlockRateLimitConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MaxStatefulOrdersPerNBlocks) > 0 {
		for iNdEx := len(m.MaxStatefulOrdersPerNBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxStatefulOrdersPerNBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlockRateLimitConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *MaxPerNBlocksRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxPerNBlocksRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxPerNBlocksRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintBlockRateLimitConfig(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.NumBlocks != 0 {
		i = encodeVarintBlockRateLimitConfig(dAtA, i, uint64(m.NumBlocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlockRateLimitConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlockRateLimitConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockRateLimitConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MaxStatefulOrdersPerNBlocks) > 0 {
		for _, e := range m.MaxStatefulOrdersPerNBlocks {
			l = e.Size()
			n += 1 + l + sovBlockRateLimitConfig(uint64(l))
		}
	}
	if len(m.MaxShortTermOrdersAndCancelsPerNBlocks) > 0 {
		for _, e := range m.MaxShortTermOrdersAndCancelsPerNBlocks {
			l = e.Size()
			n += 1 + l + sovBlockRateLimitConfig(uint64(l))
		}
	}
	return n
}

func (m *MaxPerNBlocksRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumBlocks != 0 {
		n += 1 + sovBlockRateLimitConfig(uint64(m.NumBlocks))
	}
	if m.Limit != 0 {
		n += 1 + sovBlockRateLimitConfig(uint64(m.Limit))
	}
	return n
}

func sovBlockRateLimitConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlockRateLimitConfig(x uint64) (n int) {
	return sovBlockRateLimitConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockRateLimitConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockRateLimitConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockRateLimitConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockRateLimitConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStatefulOrdersPerNBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockRateLimitConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockRateLimitConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockRateLimitConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxStatefulOrdersPerNBlocks = append(m.MaxStatefulOrdersPerNBlocks, MaxPerNBlocksRateLimit{})
			if err := m.MaxStatefulOrdersPerNBlocks[len(m.MaxStatefulOrdersPerNBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxShortTermOrdersAndCancelsPerNBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockRateLimitConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockRateLimitConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockRateLimitConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxShortTermOrdersAndCancelsPerNBlocks = append(m.MaxShortTermOrdersAndCancelsPerNBlocks, MaxPerNBlocksRateLimit{})
			if err := m.MaxShortTermOrdersAndCancelsPerNBlocks[len(m.MaxShortTermOrdersAndCancelsPerNBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockRateLimitConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockRateLimitConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxPerNBlocksRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockRateLimitConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxPerNBlocksRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxPerNBlocksRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocks", wireType)
			}
			m.NumBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockRateLimitConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockRateLimitConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlockRateLimitConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockRateLimitConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockRateLimitConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockRateLimitConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockRateLimitConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockRateLimitConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlockRateLimitConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlockRateLimitConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlockRateLimitConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlockRateLimitConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockRateLimitConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlockRateLimitConfig = fmt.Errorf("proto: unexpected end of group")
)
