// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/accountplus/accountplus.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Account State
type AccountState struct {
	Address               string                `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TimestampNonceDetails TimestampNonceDetails `protobuf:"bytes,2,opt,name=timestamp_nonce_details,json=timestampNonceDetails,proto3" json:"timestamp_nonce_details"`
}

func (m *AccountState) Reset()         { *m = AccountState{} }
func (m *AccountState) String() string { return proto.CompactTextString(m) }
func (*AccountState) ProtoMessage()    {}
func (*AccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_391b06af1cfe6fb0, []int{0}
}
func (m *AccountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountState.Merge(m, src)
}
func (m *AccountState) XXX_Size() int {
	return m.Size()
}
func (m *AccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountState.DiscardUnknown(m)
}

var xxx_messageInfo_AccountState proto.InternalMessageInfo

func (m *AccountState) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AccountState) GetTimestampNonceDetails() TimestampNonceDetails {
	if m != nil {
		return m.TimestampNonceDetails
	}
	return TimestampNonceDetails{}
}

// Timestamp nonce details
type TimestampNonceDetails struct {
	// unsorted list of n most recent timestamp nonces
	TimestampNonces []uint64 `protobuf:"varint,1,rep,packed,name=timestamp_nonces,json=timestampNonces,proto3" json:"timestamp_nonces,omitempty"`
	// max timestamp nonce that was ejected from list above
	MaxEjectedNonce uint64 `protobuf:"varint,2,opt,name=max_ejected_nonce,json=maxEjectedNonce,proto3" json:"max_ejected_nonce,omitempty"`
}

func (m *TimestampNonceDetails) Reset()         { *m = TimestampNonceDetails{} }
func (m *TimestampNonceDetails) String() string { return proto.CompactTextString(m) }
func (*TimestampNonceDetails) ProtoMessage()    {}
func (*TimestampNonceDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_391b06af1cfe6fb0, []int{1}
}
func (m *TimestampNonceDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimestampNonceDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimestampNonceDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimestampNonceDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimestampNonceDetails.Merge(m, src)
}
func (m *TimestampNonceDetails) XXX_Size() int {
	return m.Size()
}
func (m *TimestampNonceDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_TimestampNonceDetails.DiscardUnknown(m)
}

var xxx_messageInfo_TimestampNonceDetails proto.InternalMessageInfo

func (m *TimestampNonceDetails) GetTimestampNonces() []uint64 {
	if m != nil {
		return m.TimestampNonces
	}
	return nil
}

func (m *TimestampNonceDetails) GetMaxEjectedNonce() uint64 {
	if m != nil {
		return m.MaxEjectedNonce
	}
	return 0
}

func init() {
	proto.RegisterType((*AccountState)(nil), "dydxprotocol.accountplus.AccountState")
	proto.RegisterType((*TimestampNonceDetails)(nil), "dydxprotocol.accountplus.TimestampNonceDetails")
}

func init() {
	proto.RegisterFile("dydxprotocol/accountplus/accountplus.proto", fileDescriptor_391b06af1cfe6fb0)
}

var fileDescriptor_391b06af1cfe6fb0 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4a, 0xa9, 0x4c, 0xa9,
	0x28, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x4f, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b,
	0x29, 0xc8, 0x29, 0x2d, 0x46, 0x66, 0xeb, 0x81, 0x15, 0x08, 0x49, 0x20, 0xab, 0xd5, 0x43, 0x92,
	0x97, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0xcb, 0xe8, 0x83, 0x58, 0x10, 0xf5, 0x4a, 0xd3, 0x19,
	0xb9, 0x78, 0x1c, 0x21, 0xaa, 0x82, 0x4b, 0x12, 0x4b, 0x52, 0x85, 0x24, 0xb8, 0xd8, 0x13, 0x53,
	0x52, 0x8a, 0x52, 0x8b, 0x8b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0xa1, 0x5c,
	0x2e, 0xf1, 0x92, 0xcc, 0xdc, 0xd4, 0xe2, 0x92, 0xc4, 0xdc, 0x82, 0xf8, 0xbc, 0xfc, 0xbc, 0xe4,
	0xd4, 0xf8, 0x94, 0xd4, 0x92, 0xc4, 0xcc, 0x9c, 0x62, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x6e, 0x23,
	0x7d, 0x3d, 0x5c, 0x96, 0xeb, 0x85, 0xc0, 0x34, 0xfa, 0x81, 0xf4, 0xb9, 0x40, 0xb4, 0x39, 0xb1,
	0x9c, 0xb8, 0x27, 0xcf, 0x10, 0x24, 0x5a, 0x82, 0x4d, 0x52, 0x29, 0x8f, 0x4b, 0x14, 0xab, 0x2e,
	0x21, 0x4d, 0x2e, 0x01, 0x34, 0x77, 0x80, 0x9c, 0xca, 0xac, 0xc1, 0x12, 0xc4, 0x8f, 0x6a, 0x52,
	0xb1, 0x90, 0x16, 0x97, 0x60, 0x6e, 0x62, 0x45, 0x7c, 0x6a, 0x56, 0x6a, 0x72, 0x49, 0x6a, 0x0a,
	0x44, 0x31, 0xd8, 0xb1, 0x2c, 0x41, 0xfc, 0xb9, 0x89, 0x15, 0xae, 0x10, 0x71, 0xb0, 0x62, 0xa7,
	0xf0, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63,
	0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xb2, 0x4d, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x47, 0x89, 0x8a, 0x32, 0x13, 0xdd, 0xe4, 0x8c, 0xc4,
	0xcc, 0x3c, 0x7d, 0xb8, 0x48, 0x05, 0x4a, 0xf4, 0x94, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81,
	0x65, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xed, 0x5d, 0xef, 0x80, 0xc7, 0x01, 0x00, 0x00,
}

func (m *AccountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TimestampNonceDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAccountplus(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAccountplus(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimestampNonceDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimestampNonceDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimestampNonceDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxEjectedNonce != 0 {
		i = encodeVarintAccountplus(dAtA, i, uint64(m.MaxEjectedNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TimestampNonces) > 0 {
		dAtA3 := make([]byte, len(m.TimestampNonces)*10)
		var j2 int
		for _, num := range m.TimestampNonces {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintAccountplus(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccountplus(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccountplus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccountplus(uint64(l))
	}
	l = m.TimestampNonceDetails.Size()
	n += 1 + l + sovAccountplus(uint64(l))
	return n
}

func (m *TimestampNonceDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TimestampNonces) > 0 {
		l = 0
		for _, e := range m.TimestampNonces {
			l += sovAccountplus(uint64(e))
		}
		n += 1 + sovAccountplus(uint64(l)) + l
	}
	if m.MaxEjectedNonce != 0 {
		n += 1 + sovAccountplus(uint64(m.MaxEjectedNonce))
	}
	return n
}

func sovAccountplus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccountplus(x uint64) (n int) {
	return sovAccountplus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountplus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountplus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountplus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountplus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampNonceDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountplus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountplus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccountplus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimestampNonceDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountplus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountplus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimestampNonceDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountplus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimestampNonceDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimestampNonceDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAccountplus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TimestampNonces = append(m.TimestampNonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAccountplus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAccountplus
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAccountplus
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TimestampNonces) == 0 {
					m.TimestampNonces = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAccountplus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TimestampNonces = append(m.TimestampNonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampNonces", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEjectedNonce", wireType)
			}
			m.MaxEjectedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountplus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEjectedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAccountplus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountplus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccountplus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccountplus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountplus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountplus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccountplus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccountplus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccountplus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccountplus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccountplus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccountplus = fmt.Errorf("proto: unexpected end of group")
)
