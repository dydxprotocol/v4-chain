// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/vault/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_dydxprotocol_v4_chain_protocol_dtypes "github.com/dydxprotocol/v4-chain/protocol/dtypes"
	types "github.com/dydxprotocol/v4-chain/protocol/x/subaccounts/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgDepositToMegavault deposits the specified asset from the subaccount to
// megavault.
type MsgDepositToMegavault struct {
	// The subaccount to deposit from.
	SubaccountId *types.SubaccountId `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// Number of quote quantums to deposit.
	QuoteQuantums github_com_dydxprotocol_v4_chain_protocol_dtypes.SerializableInt `protobuf:"bytes,2,opt,name=quote_quantums,json=quoteQuantums,proto3,customtype=github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt" json:"quote_quantums"`
}

func (m *MsgDepositToMegavault) Reset()         { *m = MsgDepositToMegavault{} }
func (m *MsgDepositToMegavault) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToMegavault) ProtoMessage()    {}
func (*MsgDepositToMegavault) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{0}
}
func (m *MsgDepositToMegavault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToMegavault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToMegavault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToMegavault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToMegavault.Merge(m, src)
}
func (m *MsgDepositToMegavault) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToMegavault) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToMegavault.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToMegavault proto.InternalMessageInfo

func (m *MsgDepositToMegavault) GetSubaccountId() *types.SubaccountId {
	if m != nil {
		return m.SubaccountId
	}
	return nil
}

// MsgDepositToMegavaultResponse is the Msg/DepositToMegavault response type.
type MsgDepositToMegavaultResponse struct {
	// The number of shares minted from the deposit.
	MintedShares NumShares `protobuf:"bytes,1,opt,name=minted_shares,json=mintedShares,proto3" json:"minted_shares"`
}

func (m *MsgDepositToMegavaultResponse) Reset()         { *m = MsgDepositToMegavaultResponse{} }
func (m *MsgDepositToMegavaultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToMegavaultResponse) ProtoMessage()    {}
func (*MsgDepositToMegavaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{1}
}
func (m *MsgDepositToMegavaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToMegavaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToMegavaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToMegavaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToMegavaultResponse.Merge(m, src)
}
func (m *MsgDepositToMegavaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToMegavaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToMegavaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToMegavaultResponse proto.InternalMessageInfo

func (m *MsgDepositToMegavaultResponse) GetMintedShares() NumShares {
	if m != nil {
		return m.MintedShares
	}
	return NumShares{}
}

// MsgUpdateDefaultQuotingParams is the Msg/UpdateDefaultQuotingParams request
// type.
type MsgUpdateDefaultQuotingParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The quoting parameters to update to. Every field must be set.
	DefaultQuotingParams QuotingParams `protobuf:"bytes,2,opt,name=default_quoting_params,json=defaultQuotingParams,proto3" json:"default_quoting_params"`
}

func (m *MsgUpdateDefaultQuotingParams) Reset()         { *m = MsgUpdateDefaultQuotingParams{} }
func (m *MsgUpdateDefaultQuotingParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDefaultQuotingParams) ProtoMessage()    {}
func (*MsgUpdateDefaultQuotingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{2}
}
func (m *MsgUpdateDefaultQuotingParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDefaultQuotingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDefaultQuotingParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDefaultQuotingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDefaultQuotingParams.Merge(m, src)
}
func (m *MsgUpdateDefaultQuotingParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDefaultQuotingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDefaultQuotingParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDefaultQuotingParams proto.InternalMessageInfo

func (m *MsgUpdateDefaultQuotingParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateDefaultQuotingParams) GetDefaultQuotingParams() QuotingParams {
	if m != nil {
		return m.DefaultQuotingParams
	}
	return QuotingParams{}
}

// MsgUpdateDefaultQuotingParamsResponse is the Msg/UpdateDefaultQuotingParams
// response type.
type MsgUpdateDefaultQuotingParamsResponse struct {
}

func (m *MsgUpdateDefaultQuotingParamsResponse) Reset()         { *m = MsgUpdateDefaultQuotingParamsResponse{} }
func (m *MsgUpdateDefaultQuotingParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDefaultQuotingParamsResponse) ProtoMessage()    {}
func (*MsgUpdateDefaultQuotingParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{3}
}
func (m *MsgUpdateDefaultQuotingParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDefaultQuotingParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDefaultQuotingParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDefaultQuotingParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDefaultQuotingParamsResponse.Merge(m, src)
}
func (m *MsgUpdateDefaultQuotingParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDefaultQuotingParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDefaultQuotingParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDefaultQuotingParamsResponse proto.InternalMessageInfo

// MsgSetVaultParams is the Msg/SetVaultParams request type.
type MsgSetVaultParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The vault to set params of.
	VaultId VaultId `protobuf:"bytes,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id"`
	// The parameters to set.
	VaultParams VaultParams `protobuf:"bytes,3,opt,name=vault_params,json=vaultParams,proto3" json:"vault_params"`
}

func (m *MsgSetVaultParams) Reset()         { *m = MsgSetVaultParams{} }
func (m *MsgSetVaultParams) String() string { return proto.CompactTextString(m) }
func (*MsgSetVaultParams) ProtoMessage()    {}
func (*MsgSetVaultParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{4}
}
func (m *MsgSetVaultParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetVaultParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetVaultParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetVaultParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetVaultParams.Merge(m, src)
}
func (m *MsgSetVaultParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetVaultParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetVaultParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetVaultParams proto.InternalMessageInfo

func (m *MsgSetVaultParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSetVaultParams) GetVaultId() VaultId {
	if m != nil {
		return m.VaultId
	}
	return VaultId{}
}

func (m *MsgSetVaultParams) GetVaultParams() VaultParams {
	if m != nil {
		return m.VaultParams
	}
	return VaultParams{}
}

// MsgSetVaultParamsResponse is the Msg/SetVaultParams response type.
type MsgSetVaultParamsResponse struct {
}

func (m *MsgSetVaultParamsResponse) Reset()         { *m = MsgSetVaultParamsResponse{} }
func (m *MsgSetVaultParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetVaultParamsResponse) ProtoMessage()    {}
func (*MsgSetVaultParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{5}
}
func (m *MsgSetVaultParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetVaultParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetVaultParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetVaultParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetVaultParamsResponse.Merge(m, src)
}
func (m *MsgSetVaultParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetVaultParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetVaultParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetVaultParamsResponse proto.InternalMessageInfo

// MsgUnlockShares is the Msg/UnlockShares request type.
type MsgUnlockShares struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Address of the owner to unlock shares of.
	OwnerAddress string `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
}

func (m *MsgUnlockShares) Reset()         { *m = MsgUnlockShares{} }
func (m *MsgUnlockShares) String() string { return proto.CompactTextString(m) }
func (*MsgUnlockShares) ProtoMessage()    {}
func (*MsgUnlockShares) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{6}
}
func (m *MsgUnlockShares) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlockShares) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlockShares.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlockShares) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlockShares.Merge(m, src)
}
func (m *MsgUnlockShares) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlockShares) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlockShares.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlockShares proto.InternalMessageInfo

func (m *MsgUnlockShares) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUnlockShares) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

// MsgUnlockSharesResponse is the Msg/UnlockShares response type.
type MsgUnlockSharesResponse struct {
	// The number of shares unlocked.
	UnlockedShares NumShares `protobuf:"bytes,1,opt,name=unlocked_shares,json=unlockedShares,proto3" json:"unlocked_shares"`
}

func (m *MsgUnlockSharesResponse) Reset()         { *m = MsgUnlockSharesResponse{} }
func (m *MsgUnlockSharesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnlockSharesResponse) ProtoMessage()    {}
func (*MsgUnlockSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{7}
}
func (m *MsgUnlockSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlockSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlockSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlockSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlockSharesResponse.Merge(m, src)
}
func (m *MsgUnlockSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlockSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlockSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlockSharesResponse proto.InternalMessageInfo

func (m *MsgUnlockSharesResponse) GetUnlockedShares() NumShares {
	if m != nil {
		return m.UnlockedShares
	}
	return NumShares{}
}

// MsgUpdateParams is the Msg/UpdateParams request type.
// Deprecated since v6.x as is replaced by MsgUpdateDefaultQuotingParams.
//
// Deprecated: Do not use.
type MsgUpdateParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The parameters to update. Each field must be set.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{8}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateOperatorParams is the Msg/UpdateOperatorParams request type.
type MsgUpdateOperatorParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Operator parameters to set.
	Params OperatorParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateOperatorParams) Reset()         { *m = MsgUpdateOperatorParams{} }
func (m *MsgUpdateOperatorParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOperatorParams) ProtoMessage()    {}
func (*MsgUpdateOperatorParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{9}
}
func (m *MsgUpdateOperatorParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOperatorParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOperatorParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOperatorParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOperatorParams.Merge(m, src)
}
func (m *MsgUpdateOperatorParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOperatorParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOperatorParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOperatorParams proto.InternalMessageInfo

func (m *MsgUpdateOperatorParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateOperatorParams) GetParams() OperatorParams {
	if m != nil {
		return m.Params
	}
	return OperatorParams{}
}

// MsgUpdateVaultParamsResponse is the Msg/UpdateOperatorParams response type.
type MsgUpdateOperatorParamsResponse struct {
}

func (m *MsgUpdateOperatorParamsResponse) Reset()         { *m = MsgUpdateOperatorParamsResponse{} }
func (m *MsgUpdateOperatorParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOperatorParamsResponse) ProtoMessage()    {}
func (*MsgUpdateOperatorParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{10}
}
func (m *MsgUpdateOperatorParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOperatorParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOperatorParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOperatorParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOperatorParamsResponse.Merge(m, src)
}
func (m *MsgUpdateOperatorParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOperatorParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOperatorParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOperatorParamsResponse proto.InternalMessageInfo

// MsgAllocateToVault is the Msg/AllocateToVault request type.
type MsgAllocateToVault struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The vault to allocate to.
	VaultId VaultId `protobuf:"bytes,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id"`
	// Number of quote quantums to allocate.
	QuoteQuantums github_com_dydxprotocol_v4_chain_protocol_dtypes.SerializableInt `protobuf:"bytes,3,opt,name=quote_quantums,json=quoteQuantums,proto3,customtype=github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt" json:"quote_quantums"`
}

func (m *MsgAllocateToVault) Reset()         { *m = MsgAllocateToVault{} }
func (m *MsgAllocateToVault) String() string { return proto.CompactTextString(m) }
func (*MsgAllocateToVault) ProtoMessage()    {}
func (*MsgAllocateToVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{11}
}
func (m *MsgAllocateToVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAllocateToVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAllocateToVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAllocateToVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllocateToVault.Merge(m, src)
}
func (m *MsgAllocateToVault) XXX_Size() int {
	return m.Size()
}
func (m *MsgAllocateToVault) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllocateToVault.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllocateToVault proto.InternalMessageInfo

func (m *MsgAllocateToVault) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgAllocateToVault) GetVaultId() VaultId {
	if m != nil {
		return m.VaultId
	}
	return VaultId{}
}

// MsgAllocateToVaultResponse is the Msg/AllocateToVault response type.
type MsgAllocateToVaultResponse struct {
}

func (m *MsgAllocateToVaultResponse) Reset()         { *m = MsgAllocateToVaultResponse{} }
func (m *MsgAllocateToVaultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAllocateToVaultResponse) ProtoMessage()    {}
func (*MsgAllocateToVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{12}
}
func (m *MsgAllocateToVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAllocateToVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAllocateToVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAllocateToVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllocateToVaultResponse.Merge(m, src)
}
func (m *MsgAllocateToVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAllocateToVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllocateToVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllocateToVaultResponse proto.InternalMessageInfo

// MsgRetrieveFromVault is the Msg/RetrieveFromVault request type.
type MsgRetrieveFromVault struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The vault to retrieve from.
	VaultId VaultId `protobuf:"bytes,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id"`
	// Number of quote quantums to retrieve.
	QuoteQuantums github_com_dydxprotocol_v4_chain_protocol_dtypes.SerializableInt `protobuf:"bytes,3,opt,name=quote_quantums,json=quoteQuantums,proto3,customtype=github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt" json:"quote_quantums"`
}

func (m *MsgRetrieveFromVault) Reset()         { *m = MsgRetrieveFromVault{} }
func (m *MsgRetrieveFromVault) String() string { return proto.CompactTextString(m) }
func (*MsgRetrieveFromVault) ProtoMessage()    {}
func (*MsgRetrieveFromVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{13}
}
func (m *MsgRetrieveFromVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRetrieveFromVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRetrieveFromVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRetrieveFromVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRetrieveFromVault.Merge(m, src)
}
func (m *MsgRetrieveFromVault) XXX_Size() int {
	return m.Size()
}
func (m *MsgRetrieveFromVault) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRetrieveFromVault.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRetrieveFromVault proto.InternalMessageInfo

func (m *MsgRetrieveFromVault) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRetrieveFromVault) GetVaultId() VaultId {
	if m != nil {
		return m.VaultId
	}
	return VaultId{}
}

// MsgRetrieveFromVaultResponse is the Msg/RetrieveFromVault response type.
type MsgRetrieveFromVaultResponse struct {
}

func (m *MsgRetrieveFromVaultResponse) Reset()         { *m = MsgRetrieveFromVaultResponse{} }
func (m *MsgRetrieveFromVaultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRetrieveFromVaultResponse) ProtoMessage()    {}
func (*MsgRetrieveFromVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ced574c6017ce006, []int{14}
}
func (m *MsgRetrieveFromVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRetrieveFromVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRetrieveFromVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRetrieveFromVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRetrieveFromVaultResponse.Merge(m, src)
}
func (m *MsgRetrieveFromVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRetrieveFromVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRetrieveFromVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRetrieveFromVaultResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDepositToMegavault)(nil), "dydxprotocol.vault.MsgDepositToMegavault")
	proto.RegisterType((*MsgDepositToMegavaultResponse)(nil), "dydxprotocol.vault.MsgDepositToMegavaultResponse")
	proto.RegisterType((*MsgUpdateDefaultQuotingParams)(nil), "dydxprotocol.vault.MsgUpdateDefaultQuotingParams")
	proto.RegisterType((*MsgUpdateDefaultQuotingParamsResponse)(nil), "dydxprotocol.vault.MsgUpdateDefaultQuotingParamsResponse")
	proto.RegisterType((*MsgSetVaultParams)(nil), "dydxprotocol.vault.MsgSetVaultParams")
	proto.RegisterType((*MsgSetVaultParamsResponse)(nil), "dydxprotocol.vault.MsgSetVaultParamsResponse")
	proto.RegisterType((*MsgUnlockShares)(nil), "dydxprotocol.vault.MsgUnlockShares")
	proto.RegisterType((*MsgUnlockSharesResponse)(nil), "dydxprotocol.vault.MsgUnlockSharesResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "dydxprotocol.vault.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateOperatorParams)(nil), "dydxprotocol.vault.MsgUpdateOperatorParams")
	proto.RegisterType((*MsgUpdateOperatorParamsResponse)(nil), "dydxprotocol.vault.MsgUpdateOperatorParamsResponse")
	proto.RegisterType((*MsgAllocateToVault)(nil), "dydxprotocol.vault.MsgAllocateToVault")
	proto.RegisterType((*MsgAllocateToVaultResponse)(nil), "dydxprotocol.vault.MsgAllocateToVaultResponse")
	proto.RegisterType((*MsgRetrieveFromVault)(nil), "dydxprotocol.vault.MsgRetrieveFromVault")
	proto.RegisterType((*MsgRetrieveFromVaultResponse)(nil), "dydxprotocol.vault.MsgRetrieveFromVaultResponse")
}

func init() { proto.RegisterFile("dydxprotocol/vault/tx.proto", fileDescriptor_ced574c6017ce006) }

var fileDescriptor_ced574c6017ce006 = []byte{
	// 881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0xcf, 0x4f, 0x1b, 0x47,
	0x14, 0xf6, 0x42, 0x45, 0xcb, 0x60, 0x9b, 0xb2, 0x72, 0x8b, 0x59, 0x60, 0x0d, 0x46, 0x50, 0x28,
	0x62, 0x5d, 0xa0, 0xea, 0x0f, 0xd4, 0x03, 0x58, 0xa8, 0x02, 0xb5, 0x6e, 0x8b, 0x4d, 0x7b, 0xa8,
	0x54, 0xb9, 0xeb, 0xdd, 0x61, 0xbd, 0xaa, 0x77, 0xc7, 0xec, 0xcc, 0xba, 0xa6, 0x87, 0x1e, 0x72,
	0x4c, 0x14, 0x29, 0x97, 0xfc, 0x05, 0x91, 0x72, 0xce, 0x21, 0x7f, 0x43, 0xc4, 0x11, 0xe5, 0x14,
	0xe5, 0x80, 0x22, 0x7c, 0x88, 0xf2, 0x5f, 0x44, 0x3b, 0xb3, 0x5e, 0x7b, 0x7f, 0x59, 0x06, 0x14,
	0xe5, 0x90, 0x0b, 0xec, 0xbe, 0xf9, 0xde, 0x7b, 0xdf, 0xf7, 0xed, 0x9b, 0x19, 0x19, 0xcc, 0xaa,
	0x67, 0x6a, 0xbb, 0x69, 0x21, 0x82, 0x14, 0xd4, 0x28, 0xb4, 0x64, 0xbb, 0x41, 0x0a, 0xa4, 0x2d,
	0xd1, 0x08, 0xcf, 0xf7, 0x2f, 0x4a, 0x74, 0x51, 0x98, 0x51, 0x10, 0x36, 0x10, 0xae, 0xd2, 0x70,
	0x81, 0xbd, 0x30, 0xb8, 0x30, 0xcd, 0xde, 0x0a, 0x06, 0xd6, 0x0a, 0xad, 0x4d, 0xe7, 0x9f, 0xbb,
	0xb0, 0xe6, 0x6b, 0x82, 0xed, 0x9a, 0xac, 0x28, 0xc8, 0x36, 0x09, 0xee, 0x7b, 0x76, 0xa1, 0xb9,
	0x08, 0x3e, 0x4d, 0xd9, 0x92, 0x8d, 0x6e, 0x13, 0x31, 0x02, 0x80, 0xeb, 0xb2, 0x05, 0x07, 0xac,
	0xd3, 0xbf, 0xee, 0x7a, 0x46, 0x43, 0x1a, 0x62, 0xe4, 0x9d, 0x27, 0x16, 0xcd, 0xbf, 0xe1, 0xc0,
	0x67, 0x25, 0xac, 0xed, 0xc3, 0x26, 0xc2, 0x3a, 0x39, 0x46, 0x25, 0xa8, 0xc9, 0x34, 0x8b, 0xff,
	0x09, 0xa4, 0x7a, 0x24, 0xab, 0xba, 0x9a, 0xe5, 0x16, 0xb8, 0xd5, 0x89, 0xad, 0x15, 0xc9, 0xe7,
	0x4d, 0x9f, 0x26, 0xa9, 0xe2, 0x3d, 0x1f, 0xaa, 0xe5, 0x24, 0xee, 0x7b, 0xe3, 0x11, 0x48, 0x9f,
	0xda, 0x88, 0xc0, 0xea, 0xa9, 0x2d, 0x9b, 0xc4, 0x36, 0x70, 0x76, 0x64, 0x81, 0x5b, 0x4d, 0x16,
	0x0f, 0xce, 0x2f, 0x73, 0x89, 0x97, 0x97, 0xb9, 0x5d, 0x4d, 0x27, 0x75, 0xbb, 0x26, 0x29, 0xc8,
	0x28, 0xf8, 0x75, 0x7c, 0xbd, 0xa1, 0xd4, 0x65, 0xdd, 0x2c, 0x78, 0x11, 0x95, 0x9c, 0x35, 0x21,
	0x96, 0x2a, 0xd0, 0xd2, 0xe5, 0x86, 0xfe, 0x9f, 0x5c, 0x6b, 0xc0, 0x43, 0x93, 0x94, 0x53, 0xb4,
	0xfe, 0x91, 0x5b, 0x7e, 0x87, 0xbf, 0xf3, 0xfa, 0xc9, 0x97, 0x7e, 0x01, 0x79, 0x1d, 0xcc, 0x47,
	0x4a, 0x2d, 0x43, 0xdc, 0x44, 0x26, 0x86, 0xfc, 0x01, 0x48, 0x19, 0xba, 0x49, 0xa0, 0x5a, 0xa5,
	0xc6, 0x62, 0x57, 0xf2, 0xbc, 0x14, 0x1e, 0x07, 0xe9, 0x17, 0xdb, 0xa8, 0x50, 0x50, 0xf1, 0x23,
	0x47, 0x43, 0x39, 0xc9, 0x32, 0x59, 0x2c, 0xff, 0x8c, 0xa3, 0xbd, 0x7e, 0x6f, 0xaa, 0x32, 0x81,
	0xfb, 0xf0, 0xc4, 0x49, 0x39, 0xb2, 0x11, 0xd1, 0x4d, 0xed, 0x37, 0xfa, 0x51, 0xf9, 0x6f, 0xc0,
	0xb8, 0x6c, 0x93, 0x3a, 0xb2, 0x74, 0x72, 0x46, 0xfb, 0x8c, 0x17, 0xb3, 0xcf, 0x9f, 0x6e, 0x64,
	0xdc, 0xc1, 0xda, 0x53, 0x55, 0x0b, 0x62, 0x5c, 0x21, 0x96, 0x6e, 0x6a, 0xe5, 0x1e, 0x94, 0xff,
	0x0b, 0x7c, 0xae, 0xb2, 0x7a, 0xd5, 0x53, 0x56, 0xb0, 0xca, 0xc6, 0x84, 0x3a, 0x3a, 0xb1, 0xb5,
	0x18, 0x45, 0xd6, 0xd7, 0xda, 0x25, 0x9c, 0x51, 0x23, 0x68, 0xed, 0xa4, 0x1d, 0xdf, 0x7a, 0xed,
	0xf2, 0x5f, 0x80, 0xe5, 0x81, 0x3a, 0xba, 0xde, 0xe5, 0x3b, 0x1c, 0x98, 0x2a, 0x61, 0xad, 0x02,
	0xc9, 0x1f, 0x0e, 0xe8, 0x96, 0x2a, 0x7f, 0x00, 0x9f, 0x50, 0xe6, 0xce, 0xdc, 0x31, 0x5d, 0xb3,
	0x51, 0xba, 0x68, 0xab, 0x43, 0xd5, 0x55, 0xf4, 0x71, 0x8b, 0xbd, 0xf2, 0x07, 0x20, 0xc9, 0xb2,
	0x5d, 0x67, 0x46, 0x69, 0x85, 0x5c, 0x6c, 0x05, 0x9f, 0x2f, 0x13, 0xad, 0x5e, 0x28, 0x64, 0xc7,
	0x2c, 0x98, 0x09, 0x89, 0xf4, 0x2c, 0xf8, 0x1f, 0x4c, 0x3a, 0x5e, 0x99, 0x0d, 0xa4, 0xfc, 0xc3,
	0xe6, 0xe0, 0xc6, 0xfa, 0x97, 0x40, 0x0a, 0xfd, 0x6b, 0x42, 0xab, 0x2a, 0x33, 0x04, 0x35, 0x61,
	0xbc, 0x9c, 0xa4, 0x41, 0x37, 0x2b, 0x44, 0x4e, 0x03, 0xd3, 0x81, 0xfe, 0xde, 0x64, 0xff, 0x0c,
	0x26, 0x6d, 0x1a, 0xbf, 0xd1, 0x6c, 0xa7, 0xbb, 0xb9, 0xee, 0x74, 0x3f, 0xe4, 0x98, 0x52, 0x3a,
	0x15, 0xb7, 0xfc, 0xd2, 0xdf, 0x81, 0x31, 0xdf, 0xfc, 0x0a, 0x51, 0x84, 0x7c, 0x1f, 0xc8, 0xc5,
	0xef, 0x7c, 0xea, 0x97, 0x9f, 0xe5, 0xf2, 0x8f, 0x38, 0xe6, 0x00, 0xe5, 0xf5, 0x6b, 0x13, 0x5a,
	0x32, 0x41, 0xd6, 0x2d, 0xf9, 0xed, 0x06, 0xf8, 0xe5, 0xa3, 0xf8, 0xf9, 0x7b, 0x05, 0x78, 0x06,
	0x3f, 0xd3, 0x22, 0xc8, 0xc5, 0x90, 0xf4, 0x26, 0xe9, 0xde, 0x08, 0xe0, 0x4b, 0x58, 0xdb, 0x6b,
	0x34, 0x90, 0x22, 0x13, 0x78, 0x8c, 0xe8, 0xb8, 0xbd, 0xa7, 0xdd, 0x14, 0x3e, 0xbb, 0x47, 0xdf,
	0xed, 0xd9, 0x1d, 0x34, 0x6c, 0x0e, 0x08, 0x61, 0x33, 0x3c, 0xaf, 0xee, 0x8f, 0x80, 0x4c, 0x09,
	0x6b, 0x65, 0x48, 0x2c, 0x1d, 0xb6, 0xe0, 0x8f, 0x16, 0x32, 0x3e, 0x68, 0xb7, 0x44, 0x30, 0x17,
	0x65, 0x47, 0xd7, 0xaf, 0xad, 0xc7, 0x63, 0x60, 0xb4, 0x84, 0x35, 0xde, 0x02, 0x7c, 0xc4, 0xad,
	0xbf, 0x16, 0x25, 0x35, 0xf2, 0xd6, 0x14, 0x36, 0x87, 0x86, 0x7a, 0xc7, 0xd0, 0x5d, 0x0e, 0x08,
	0x03, 0xee, 0xc4, 0xb8, 0x8a, 0xf1, 0x29, 0xc2, 0xf7, 0xd7, 0x4e, 0xf1, 0xc8, 0xb4, 0x41, 0x26,
	0xf2, 0xa4, 0x58, 0x1f, 0x58, 0xd2, 0x0f, 0x16, 0xb6, 0xaf, 0x01, 0xf6, 0x3a, 0x9f, 0x80, 0x74,
	0xe0, 0x9e, 0x5c, 0x8e, 0x29, 0xe3, 0x87, 0x09, 0x1b, 0x43, 0xc1, 0xbc, 0x3e, 0x7f, 0x83, 0xa4,
	0xef, 0x36, 0x5a, 0x8a, 0x23, 0xdb, 0x07, 0x12, 0xd6, 0x87, 0x00, 0x79, 0x1d, 0x74, 0x30, 0x19,
	0x3c, 0xa4, 0x56, 0x62, 0xf2, 0x03, 0x38, 0x41, 0x1a, 0x0e, 0xe7, 0xb5, 0x42, 0x60, 0x2a, 0xbc,
	0xc7, 0x57, 0x63, 0x8a, 0x84, 0x90, 0xc2, 0x57, 0xc3, 0x22, 0xbb, 0x0d, 0x8b, 0x47, 0xe7, 0x57,
	0x22, 0x77, 0x71, 0x25, 0x72, 0xaf, 0xae, 0x44, 0xee, 0x41, 0x47, 0x4c, 0x5c, 0x74, 0xc4, 0xc4,
	0x8b, 0x8e, 0x98, 0xf8, 0xf3, 0xdb, 0xe1, 0xf7, 0x70, 0xbb, 0xfb, 0xd3, 0xc2, 0xd9, 0xca, 0xb5,
	0x31, 0x1a, 0xdf, 0x7e, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xc9, 0xfd, 0x40, 0x7d, 0x0c, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// DepositToMegavault deposits funds into megavault.
	DepositToMegavault(ctx context.Context, in *MsgDepositToMegavault, opts ...grpc.CallOption) (*MsgDepositToMegavaultResponse, error)
	// UpdateDefaultQuotingParams updates the default quoting params in state.
	UpdateDefaultQuotingParams(ctx context.Context, in *MsgUpdateDefaultQuotingParams, opts ...grpc.CallOption) (*MsgUpdateDefaultQuotingParamsResponse, error)
	// UpdateOperatorParams sets the parameters regarding megavault operator.
	UpdateOperatorParams(ctx context.Context, in *MsgUpdateOperatorParams, opts ...grpc.CallOption) (*MsgUpdateOperatorParamsResponse, error)
	// SetVaultParams sets the parameters of a specific vault.
	SetVaultParams(ctx context.Context, in *MsgSetVaultParams, opts ...grpc.CallOption) (*MsgSetVaultParamsResponse, error)
	// UnlockShares unlocks an owner's shares that are due to unlock by the block
	// height that this transaction is included in.
	UnlockShares(ctx context.Context, in *MsgUnlockShares, opts ...grpc.CallOption) (*MsgUnlockSharesResponse, error)
	// AllocateToVault allocates funds from main vault to a vault.
	AllocateToVault(ctx context.Context, in *MsgAllocateToVault, opts ...grpc.CallOption) (*MsgAllocateToVaultResponse, error)
	// RetrieveFromVault retrieves funds from a vault to main vault.
	RetrieveFromVault(ctx context.Context, in *MsgRetrieveFromVault, opts ...grpc.CallOption) (*MsgRetrieveFromVaultResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DepositToMegavault(ctx context.Context, in *MsgDepositToMegavault, opts ...grpc.CallOption) (*MsgDepositToMegavaultResponse, error) {
	out := new(MsgDepositToMegavaultResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.vault.Msg/DepositToMegavault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDefaultQuotingParams(ctx context.Context, in *MsgUpdateDefaultQuotingParams, opts ...grpc.CallOption) (*MsgUpdateDefaultQuotingParamsResponse, error) {
	out := new(MsgUpdateDefaultQuotingParamsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.vault.Msg/UpdateDefaultQuotingParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOperatorParams(ctx context.Context, in *MsgUpdateOperatorParams, opts ...grpc.CallOption) (*MsgUpdateOperatorParamsResponse, error) {
	out := new(MsgUpdateOperatorParamsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.vault.Msg/UpdateOperatorParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetVaultParams(ctx context.Context, in *MsgSetVaultParams, opts ...grpc.CallOption) (*MsgSetVaultParamsResponse, error) {
	out := new(MsgSetVaultParamsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.vault.Msg/SetVaultParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnlockShares(ctx context.Context, in *MsgUnlockShares, opts ...grpc.CallOption) (*MsgUnlockSharesResponse, error) {
	out := new(MsgUnlockSharesResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.vault.Msg/UnlockShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AllocateToVault(ctx context.Context, in *MsgAllocateToVault, opts ...grpc.CallOption) (*MsgAllocateToVaultResponse, error) {
	out := new(MsgAllocateToVaultResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.vault.Msg/AllocateToVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RetrieveFromVault(ctx context.Context, in *MsgRetrieveFromVault, opts ...grpc.CallOption) (*MsgRetrieveFromVaultResponse, error) {
	out := new(MsgRetrieveFromVaultResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.vault.Msg/RetrieveFromVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// DepositToMegavault deposits funds into megavault.
	DepositToMegavault(context.Context, *MsgDepositToMegavault) (*MsgDepositToMegavaultResponse, error)
	// UpdateDefaultQuotingParams updates the default quoting params in state.
	UpdateDefaultQuotingParams(context.Context, *MsgUpdateDefaultQuotingParams) (*MsgUpdateDefaultQuotingParamsResponse, error)
	// UpdateOperatorParams sets the parameters regarding megavault operator.
	UpdateOperatorParams(context.Context, *MsgUpdateOperatorParams) (*MsgUpdateOperatorParamsResponse, error)
	// SetVaultParams sets the parameters of a specific vault.
	SetVaultParams(context.Context, *MsgSetVaultParams) (*MsgSetVaultParamsResponse, error)
	// UnlockShares unlocks an owner's shares that are due to unlock by the block
	// height that this transaction is included in.
	UnlockShares(context.Context, *MsgUnlockShares) (*MsgUnlockSharesResponse, error)
	// AllocateToVault allocates funds from main vault to a vault.
	AllocateToVault(context.Context, *MsgAllocateToVault) (*MsgAllocateToVaultResponse, error)
	// RetrieveFromVault retrieves funds from a vault to main vault.
	RetrieveFromVault(context.Context, *MsgRetrieveFromVault) (*MsgRetrieveFromVaultResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DepositToMegavault(ctx context.Context, req *MsgDepositToMegavault) (*MsgDepositToMegavaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositToMegavault not implemented")
}
func (*UnimplementedMsgServer) UpdateDefaultQuotingParams(ctx context.Context, req *MsgUpdateDefaultQuotingParams) (*MsgUpdateDefaultQuotingParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultQuotingParams not implemented")
}
func (*UnimplementedMsgServer) UpdateOperatorParams(ctx context.Context, req *MsgUpdateOperatorParams) (*MsgUpdateOperatorParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperatorParams not implemented")
}
func (*UnimplementedMsgServer) SetVaultParams(ctx context.Context, req *MsgSetVaultParams) (*MsgSetVaultParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVaultParams not implemented")
}
func (*UnimplementedMsgServer) UnlockShares(ctx context.Context, req *MsgUnlockShares) (*MsgUnlockSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockShares not implemented")
}
func (*UnimplementedMsgServer) AllocateToVault(ctx context.Context, req *MsgAllocateToVault) (*MsgAllocateToVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateToVault not implemented")
}
func (*UnimplementedMsgServer) RetrieveFromVault(ctx context.Context, req *MsgRetrieveFromVault) (*MsgRetrieveFromVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveFromVault not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DepositToMegavault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositToMegavault)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositToMegavault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.vault.Msg/DepositToMegavault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositToMegavault(ctx, req.(*MsgDepositToMegavault))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDefaultQuotingParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDefaultQuotingParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDefaultQuotingParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.vault.Msg/UpdateDefaultQuotingParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDefaultQuotingParams(ctx, req.(*MsgUpdateDefaultQuotingParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOperatorParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOperatorParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOperatorParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.vault.Msg/UpdateOperatorParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOperatorParams(ctx, req.(*MsgUpdateOperatorParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetVaultParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetVaultParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetVaultParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.vault.Msg/SetVaultParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetVaultParams(ctx, req.(*MsgSetVaultParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnlockShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnlockShares)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnlockShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.vault.Msg/UnlockShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnlockShares(ctx, req.(*MsgUnlockShares))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AllocateToVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAllocateToVault)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AllocateToVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.vault.Msg/AllocateToVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AllocateToVault(ctx, req.(*MsgAllocateToVault))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RetrieveFromVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRetrieveFromVault)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RetrieveFromVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.vault.Msg/RetrieveFromVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RetrieveFromVault(ctx, req.(*MsgRetrieveFromVault))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dydxprotocol.vault.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DepositToMegavault",
			Handler:    _Msg_DepositToMegavault_Handler,
		},
		{
			MethodName: "UpdateDefaultQuotingParams",
			Handler:    _Msg_UpdateDefaultQuotingParams_Handler,
		},
		{
			MethodName: "UpdateOperatorParams",
			Handler:    _Msg_UpdateOperatorParams_Handler,
		},
		{
			MethodName: "SetVaultParams",
			Handler:    _Msg_SetVaultParams_Handler,
		},
		{
			MethodName: "UnlockShares",
			Handler:    _Msg_UnlockShares_Handler,
		},
		{
			MethodName: "AllocateToVault",
			Handler:    _Msg_AllocateToVault_Handler,
		},
		{
			MethodName: "RetrieveFromVault",
			Handler:    _Msg_RetrieveFromVault_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dydxprotocol/vault/tx.proto",
}

func (m *MsgDepositToMegavault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToMegavault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToMegavault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.QuoteQuantums.Size()
		i -= size
		if _, err := m.QuoteQuantums.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.SubaccountId != nil {
		{
			size, err := m.SubaccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositToMegavaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToMegavaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToMegavaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MintedShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDefaultQuotingParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDefaultQuotingParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDefaultQuotingParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DefaultQuotingParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDefaultQuotingParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDefaultQuotingParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDefaultQuotingParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetVaultParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetVaultParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetVaultParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VaultParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.VaultId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetVaultParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetVaultParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetVaultParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnlockShares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlockShares) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlockShares) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnlockSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlockSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlockSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnlockedShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOperatorParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOperatorParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOperatorParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOperatorParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOperatorParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOperatorParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAllocateToVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAllocateToVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAllocateToVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.QuoteQuantums.Size()
		i -= size
		if _, err := m.QuoteQuantums.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.VaultId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAllocateToVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAllocateToVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAllocateToVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRetrieveFromVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRetrieveFromVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRetrieveFromVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.QuoteQuantums.Size()
		i -= size
		if _, err := m.QuoteQuantums.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.VaultId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRetrieveFromVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRetrieveFromVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRetrieveFromVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDepositToMegavault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubaccountId != nil {
		l = m.SubaccountId.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.QuoteQuantums.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDepositToMegavaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MintedShares.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateDefaultQuotingParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.DefaultQuotingParams.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateDefaultQuotingParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetVaultParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.VaultId.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.VaultParams.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetVaultParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnlockShares) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnlockSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UnlockedShares.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateOperatorParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateOperatorParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAllocateToVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.VaultId.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.QuoteQuantums.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAllocateToVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRetrieveFromVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.VaultId.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.QuoteQuantums.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRetrieveFromVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDepositToMegavault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToMegavault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToMegavault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubaccountId == nil {
				m.SubaccountId = &types.SubaccountId{}
			}
			if err := m.SubaccountId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteQuantums", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuoteQuantums.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToMegavaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToMegavaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToMegavaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintedShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDefaultQuotingParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDefaultQuotingParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDefaultQuotingParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultQuotingParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultQuotingParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDefaultQuotingParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDefaultQuotingParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDefaultQuotingParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetVaultParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetVaultParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetVaultParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VaultId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VaultParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetVaultParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetVaultParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetVaultParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlockShares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlockShares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlockShares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlockSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlockSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlockSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockedShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnlockedShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOperatorParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOperatorParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOperatorParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOperatorParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOperatorParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOperatorParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAllocateToVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAllocateToVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAllocateToVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VaultId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteQuantums", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuoteQuantums.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAllocateToVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAllocateToVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAllocateToVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRetrieveFromVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRetrieveFromVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRetrieveFromVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VaultId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteQuantums", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuoteQuantums.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRetrieveFromVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRetrieveFromVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRetrieveFromVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
