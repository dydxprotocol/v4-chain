// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/vault/vault.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VaultType represents different types of vaults.
type VaultType int32

const (
	// Default value, invalid and unused.
	VaultType_VAULT_TYPE_UNSPECIFIED VaultType = 0
	// Vault is associated with a CLOB pair.
	VaultType_VAULT_TYPE_CLOB VaultType = 1
)

var VaultType_name = map[int32]string{
	0: "VAULT_TYPE_UNSPECIFIED",
	1: "VAULT_TYPE_CLOB",
}

var VaultType_value = map[string]int32{
	"VAULT_TYPE_UNSPECIFIED": 0,
	"VAULT_TYPE_CLOB":        1,
}

func (x VaultType) String() string {
	return proto.EnumName(VaultType_name, int32(x))
}

func (VaultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32accb5830bb2860, []int{0}
}

// VaultStatus represents the status of a vault.
type VaultStatus int32

const (
	// Default value, invalid and unused.
	VaultStatus_VAULT_STATUS_UNSPECIFIED VaultStatus = 0
	// Don’t place orders. Does not count toward global vault balances.
	// A vault can only be set to this status if its equity is non-positive.
	VaultStatus_VAULT_STATUS_DEACTIVATED VaultStatus = 1
	// Don’t place orders. Does count towards global vault balances.
	VaultStatus_VAULT_STATUS_STAND_BY VaultStatus = 2
	// Places orders on both sides of the book.
	VaultStatus_VAULT_STATUS_QUOTING VaultStatus = 3
	// Only place orders that close the position.
	VaultStatus_VAULT_STATUS_CLOSE_ONLY VaultStatus = 4
)

var VaultStatus_name = map[int32]string{
	0: "VAULT_STATUS_UNSPECIFIED",
	1: "VAULT_STATUS_DEACTIVATED",
	2: "VAULT_STATUS_STAND_BY",
	3: "VAULT_STATUS_QUOTING",
	4: "VAULT_STATUS_CLOSE_ONLY",
}

var VaultStatus_value = map[string]int32{
	"VAULT_STATUS_UNSPECIFIED": 0,
	"VAULT_STATUS_DEACTIVATED": 1,
	"VAULT_STATUS_STAND_BY":    2,
	"VAULT_STATUS_QUOTING":     3,
	"VAULT_STATUS_CLOSE_ONLY":  4,
}

func (x VaultStatus) String() string {
	return proto.EnumName(VaultStatus_name, int32(x))
}

func (VaultStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32accb5830bb2860, []int{1}
}

// VaultId uniquely identifies a vault by its type and number.
type VaultId struct {
	// Type of the vault.
	Type VaultType `protobuf:"varint,1,opt,name=type,proto3,enum=dydxprotocol.vault.VaultType" json:"type,omitempty"`
	// Unique ID of the vault within above type.
	Number uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *VaultId) Reset()         { *m = VaultId{} }
func (m *VaultId) String() string { return proto.CompactTextString(m) }
func (*VaultId) ProtoMessage()    {}
func (*VaultId) Descriptor() ([]byte, []int) {
	return fileDescriptor_32accb5830bb2860, []int{0}
}
func (m *VaultId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultId.Merge(m, src)
}
func (m *VaultId) XXX_Size() int {
	return m.Size()
}
func (m *VaultId) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultId.DiscardUnknown(m)
}

var xxx_messageInfo_VaultId proto.InternalMessageInfo

func (m *VaultId) GetType() VaultType {
	if m != nil {
		return m.Type
	}
	return VaultType_VAULT_TYPE_UNSPECIFIED
}

func (m *VaultId) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterEnum("dydxprotocol.vault.VaultType", VaultType_name, VaultType_value)
	proto.RegisterEnum("dydxprotocol.vault.VaultStatus", VaultStatus_name, VaultStatus_value)
	proto.RegisterType((*VaultId)(nil), "dydxprotocol.vault.VaultId")
}

func init() { proto.RegisterFile("dydxprotocol/vault/vault.proto", fileDescriptor_32accb5830bb2860) }

var fileDescriptor_32accb5830bb2860 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xa9, 0x4c, 0xa9,
	0x28, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x2f, 0x4b, 0x2c, 0xcd, 0x29, 0x81, 0x90,
	0x7a, 0x60, 0x41, 0x21, 0x21, 0x64, 0x79, 0x3d, 0xb0, 0x8c, 0x52, 0x08, 0x17, 0x7b, 0x18, 0x88,
	0xe1, 0x99, 0x22, 0x64, 0xc8, 0xc5, 0x52, 0x52, 0x59, 0x90, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x67, 0x24, 0xab, 0x87, 0xa9, 0x5a, 0x0f, 0xac, 0x34, 0xa4, 0xb2, 0x20, 0x35, 0x08, 0xac, 0x54,
	0x48, 0x8c, 0x8b, 0x2d, 0xaf, 0x34, 0x37, 0x29, 0xb5, 0x48, 0x82, 0x49, 0x81, 0x51, 0x83, 0x37,
	0x08, 0xca, 0xd3, 0xb2, 0xe1, 0xe2, 0x84, 0x2b, 0x15, 0x92, 0xe2, 0x12, 0x0b, 0x73, 0x0c, 0xf5,
	0x09, 0x89, 0x0f, 0x89, 0x0c, 0x70, 0x8d, 0x0f, 0xf5, 0x0b, 0x0e, 0x70, 0x75, 0xf6, 0x74, 0xf3,
	0x74, 0x75, 0x11, 0x60, 0x10, 0x12, 0xe6, 0xe2, 0x47, 0x92, 0x73, 0xf6, 0xf1, 0x77, 0x12, 0x60,
	0xd4, 0x9a, 0xcd, 0xc8, 0xc5, 0x0d, 0xd6, 0x1e, 0x5c, 0x92, 0x58, 0x52, 0x5a, 0x2c, 0x24, 0xc3,
	0x25, 0x01, 0x51, 0x14, 0x1c, 0xe2, 0x18, 0x12, 0x1a, 0x8c, 0x66, 0x04, 0xba, 0xac, 0x8b, 0xab,
	0xa3, 0x73, 0x88, 0x67, 0x98, 0x63, 0x88, 0xab, 0x8b, 0x00, 0xa3, 0x90, 0x24, 0x97, 0x28, 0x8a,
	0x6c, 0x70, 0x88, 0xa3, 0x9f, 0x4b, 0xbc, 0x53, 0xa4, 0x00, 0x93, 0x90, 0x04, 0x97, 0x08, 0x8a,
	0x54, 0x60, 0xa8, 0x7f, 0x88, 0xa7, 0x9f, 0xbb, 0x00, 0xb3, 0x90, 0x34, 0x97, 0x38, 0x8a, 0x8c,
	0xb3, 0x8f, 0x7f, 0xb0, 0x6b, 0xbc, 0xbf, 0x9f, 0x4f, 0xa4, 0x00, 0x8b, 0x53, 0xe0, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85,
	0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x99, 0xa7, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9,
	0x25, 0xe7, 0xe7, 0xea, 0xa3, 0x46, 0x85, 0x89, 0x6e, 0x72, 0x46, 0x62, 0x66, 0x9e, 0x3e, 0x5c,
	0xa4, 0x02, 0x1a, 0x3d, 0xa0, 0x50, 0x2c, 0x4e, 0x62, 0x03, 0x8b, 0x1b, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xab, 0x97, 0xb2, 0xb0, 0xc1, 0x01, 0x00, 0x00,
}

func (m *VaultId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VaultId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovVault(uint64(m.Type))
	}
	if m.Number != 0 {
		n += 1 + sovVault(uint64(m.Number))
	}
	return n
}

func sovVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVault(x uint64) (n int) {
	return sovVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VaultId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVault = fmt.Errorf("proto: unexpected end of group")
)
