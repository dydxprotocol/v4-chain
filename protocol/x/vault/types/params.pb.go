// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/vault/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_dydxprotocol_v4_chain_protocol_dtypes "github.com/dydxprotocol/v4-chain/protocol/dtypes"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QuotingParams stores vault quoting parameters.
type QuotingParams struct {
	// The number of layers of orders a vault places. For example if
	// `layers=2`, a vault places 2 asks and 2 bids.
	Layers uint32 `protobuf:"varint,1,opt,name=layers,proto3" json:"layers,omitempty"`
	// The minimum base spread when a vault quotes around reservation price.
	SpreadMinPpm uint32 `protobuf:"varint,2,opt,name=spread_min_ppm,json=spreadMinPpm,proto3" json:"spread_min_ppm,omitempty"`
	// The buffer amount to add to min_price_change_ppm to arrive at `spread`
	// according to formula:
	// `spread = max(spread_min_ppm, min_price_change_ppm + spread_buffer_ppm)`.
	SpreadBufferPpm uint32 `protobuf:"varint,3,opt,name=spread_buffer_ppm,json=spreadBufferPpm,proto3" json:"spread_buffer_ppm,omitempty"`
	// The factor that determines how aggressive a vault skews its orders.
	SkewFactorPpm uint32 `protobuf:"varint,4,opt,name=skew_factor_ppm,json=skewFactorPpm,proto3" json:"skew_factor_ppm,omitempty"`
	// The percentage of vault equity that each order is sized at.
	OrderSizePctPpm uint32 `protobuf:"varint,5,opt,name=order_size_pct_ppm,json=orderSizePctPpm,proto3" json:"order_size_pct_ppm,omitempty"`
	// The duration that a vault's orders are valid for.
	OrderExpirationSeconds uint32 `protobuf:"varint,6,opt,name=order_expiration_seconds,json=orderExpirationSeconds,proto3" json:"order_expiration_seconds,omitempty"`
	// The number of quote quantums in quote asset that a vault with no perpetual
	// positions must have to activate, i.e. if a vault has no perpetual positions
	// and has strictly less than this amount of quote asset, it will not
	// activate.
	ActivationThresholdQuoteQuantums github_com_dydxprotocol_v4_chain_protocol_dtypes.SerializableInt `protobuf:"bytes,7,opt,name=activation_threshold_quote_quantums,json=activationThresholdQuoteQuantums,proto3,customtype=github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt" json:"activation_threshold_quote_quantums"`
}

func (m *QuotingParams) Reset()         { *m = QuotingParams{} }
func (m *QuotingParams) String() string { return proto.CompactTextString(m) }
func (*QuotingParams) ProtoMessage()    {}
func (*QuotingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6043e0b8bfdbca9f, []int{0}
}
func (m *QuotingParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuotingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuotingParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuotingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotingParams.Merge(m, src)
}
func (m *QuotingParams) XXX_Size() int {
	return m.Size()
}
func (m *QuotingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotingParams.DiscardUnknown(m)
}

var xxx_messageInfo_QuotingParams proto.InternalMessageInfo

func (m *QuotingParams) GetLayers() uint32 {
	if m != nil {
		return m.Layers
	}
	return 0
}

func (m *QuotingParams) GetSpreadMinPpm() uint32 {
	if m != nil {
		return m.SpreadMinPpm
	}
	return 0
}

func (m *QuotingParams) GetSpreadBufferPpm() uint32 {
	if m != nil {
		return m.SpreadBufferPpm
	}
	return 0
}

func (m *QuotingParams) GetSkewFactorPpm() uint32 {
	if m != nil {
		return m.SkewFactorPpm
	}
	return 0
}

func (m *QuotingParams) GetOrderSizePctPpm() uint32 {
	if m != nil {
		return m.OrderSizePctPpm
	}
	return 0
}

func (m *QuotingParams) GetOrderExpirationSeconds() uint32 {
	if m != nil {
		return m.OrderExpirationSeconds
	}
	return 0
}

func init() {
	proto.RegisterType((*QuotingParams)(nil), "dydxprotocol.vault.QuotingParams")
}

func init() { proto.RegisterFile("dydxprotocol/vault/params.proto", fileDescriptor_6043e0b8bfdbca9f) }

var fileDescriptor_6043e0b8bfdbca9f = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0xca, 0xd3, 0x40,
	0x14, 0x86, 0x13, 0x3f, 0xad, 0x30, 0xb4, 0x16, 0x83, 0x94, 0xe0, 0x22, 0x2d, 0x2a, 0x52, 0x14,
	0x93, 0x85, 0x82, 0x2e, 0xa5, 0xa0, 0xe8, 0x42, 0xe8, 0x8f, 0x2b, 0x37, 0xc3, 0x64, 0x32, 0x4d,
	0x06, 0x93, 0x99, 0xe9, 0xcc, 0xa4, 0xb6, 0xbd, 0x0a, 0x77, 0xee, 0xbd, 0x9a, 0x2e, 0xbb, 0x14,
	0x17, 0x45, 0xda, 0x1b, 0x91, 0x9c, 0x89, 0x55, 0x77, 0xdf, 0x2e, 0x79, 0xde, 0xe7, 0x9c, 0x37,
	0x70, 0x82, 0x86, 0xd9, 0x36, 0xdb, 0x28, 0x2d, 0xad, 0xa4, 0xb2, 0x4c, 0xd6, 0xa4, 0x2e, 0x6d,
	0xa2, 0x88, 0x26, 0x95, 0x89, 0x81, 0x06, 0xc1, 0xbf, 0x42, 0x0c, 0xc2, 0xfd, 0x7b, 0xb9, 0xcc,
	0x25, 0xb0, 0xa4, 0x79, 0x72, 0xe6, 0x83, 0xef, 0x57, 0xa8, 0x37, 0xab, 0xa5, 0xe5, 0x22, 0x9f,
	0xc2, 0x86, 0x60, 0x80, 0x3a, 0x25, 0xd9, 0x32, 0x6d, 0x42, 0x7f, 0xe4, 0x8f, 0x7b, 0xf3, 0xf6,
	0x2d, 0x78, 0x84, 0xee, 0x18, 0xa5, 0x19, 0xc9, 0x70, 0xc5, 0x05, 0x56, 0xaa, 0x0a, 0x6f, 0x40,
	0xde, 0x75, 0xf4, 0x03, 0x17, 0x53, 0x55, 0x05, 0x4f, 0xd0, 0xdd, 0xd6, 0x4a, 0xeb, 0xe5, 0x92,
	0x69, 0x10, 0xaf, 0x40, 0xec, 0xbb, 0x60, 0x02, 0xbc, 0x71, 0x1f, 0xa3, 0xbe, 0xf9, 0xcc, 0xbe,
	0xe0, 0x25, 0xa1, 0x56, 0x3a, 0xf3, 0x26, 0x98, 0xbd, 0x06, 0xbf, 0x05, 0xda, 0x78, 0x4f, 0x51,
	0x20, 0x75, 0xc6, 0x34, 0x36, 0x7c, 0xc7, 0xb0, 0xa2, 0x16, 0xd4, 0x5b, 0x6e, 0x29, 0x24, 0x0b,
	0xbe, 0x63, 0x53, 0x6a, 0x1b, 0xf9, 0x15, 0x0a, 0x9d, 0xcc, 0x36, 0x8a, 0x6b, 0x62, 0xb9, 0x14,
	0xd8, 0x30, 0x2a, 0x45, 0x66, 0xc2, 0x0e, 0x8c, 0x0c, 0x20, 0x7f, 0x73, 0x89, 0x17, 0x2e, 0x0d,
	0xbe, 0xf9, 0xe8, 0x21, 0xa1, 0x96, 0xaf, 0xdd, 0x90, 0x2d, 0x34, 0x33, 0x85, 0x2c, 0x33, 0xbc,
	0xaa, 0xa5, 0x65, 0x78, 0x55, 0x13, 0x61, 0xeb, 0xca, 0x84, 0xb7, 0x47, 0xfe, 0xb8, 0x3b, 0x79,
	0xb7, 0x3f, 0x0e, 0xbd, 0x9f, 0xc7, 0xe1, 0xeb, 0x9c, 0xdb, 0xa2, 0x4e, 0x63, 0x2a, 0xab, 0xe4,
	0xff, 0xb3, 0xbc, 0x78, 0x46, 0x0b, 0xc2, 0x45, 0x72, 0x21, 0x99, 0xdd, 0x2a, 0x66, 0xe2, 0x05,
	0xd3, 0x9c, 0x94, 0x7c, 0x47, 0xd2, 0x92, 0xbd, 0x17, 0x76, 0x3e, 0xfa, 0x5b, 0xfa, 0xf1, 0x4f,
	0x67, 0x73, 0x12, 0x36, 0x6b, 0x1b, 0x27, 0xb3, 0xfd, 0x29, 0xf2, 0x0f, 0xa7, 0xc8, 0xff, 0x75,
	0x8a, 0xfc, 0xaf, 0xe7, 0xc8, 0x3b, 0x9c, 0x23, 0xef, 0xc7, 0x39, 0xf2, 0x3e, 0xbd, 0xbc, 0x7e,
	0xfb, 0xa6, 0xfd, 0x51, 0xe0, 0x23, 0xd2, 0x0e, 0xf0, 0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x17, 0x3d, 0xea, 0x26, 0x4b, 0x02, 0x00, 0x00,
}

func (m *QuotingParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuotingParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuotingParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ActivationThresholdQuoteQuantums.Size()
		i -= size
		if _, err := m.ActivationThresholdQuoteQuantums.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.OrderExpirationSeconds != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.OrderExpirationSeconds))
		i--
		dAtA[i] = 0x30
	}
	if m.OrderSizePctPpm != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.OrderSizePctPpm))
		i--
		dAtA[i] = 0x28
	}
	if m.SkewFactorPpm != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SkewFactorPpm))
		i--
		dAtA[i] = 0x20
	}
	if m.SpreadBufferPpm != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SpreadBufferPpm))
		i--
		dAtA[i] = 0x18
	}
	if m.SpreadMinPpm != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SpreadMinPpm))
		i--
		dAtA[i] = 0x10
	}
	if m.Layers != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Layers))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuotingParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Layers != 0 {
		n += 1 + sovParams(uint64(m.Layers))
	}
	if m.SpreadMinPpm != 0 {
		n += 1 + sovParams(uint64(m.SpreadMinPpm))
	}
	if m.SpreadBufferPpm != 0 {
		n += 1 + sovParams(uint64(m.SpreadBufferPpm))
	}
	if m.SkewFactorPpm != 0 {
		n += 1 + sovParams(uint64(m.SkewFactorPpm))
	}
	if m.OrderSizePctPpm != 0 {
		n += 1 + sovParams(uint64(m.OrderSizePctPpm))
	}
	if m.OrderExpirationSeconds != 0 {
		n += 1 + sovParams(uint64(m.OrderExpirationSeconds))
	}
	l = m.ActivationThresholdQuoteQuantums.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuotingParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuotingParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuotingParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layers", wireType)
			}
			m.Layers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadMinPpm", wireType)
			}
			m.SpreadMinPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpreadMinPpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadBufferPpm", wireType)
			}
			m.SpreadBufferPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpreadBufferPpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkewFactorPpm", wireType)
			}
			m.SkewFactorPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkewFactorPpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderSizePctPpm", wireType)
			}
			m.OrderSizePctPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderSizePctPpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderExpirationSeconds", wireType)
			}
			m.OrderExpirationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderExpirationSeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationThresholdQuoteQuantums", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActivationThresholdQuoteQuantums.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
