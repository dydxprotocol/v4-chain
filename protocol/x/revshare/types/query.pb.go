// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/revshare/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Queries for the default market mapper revenue share params
type QueryMarketMapperRevenueShareParams struct {
}

func (m *QueryMarketMapperRevenueShareParams) Reset()         { *m = QueryMarketMapperRevenueShareParams{} }
func (m *QueryMarketMapperRevenueShareParams) String() string { return proto.CompactTextString(m) }
func (*QueryMarketMapperRevenueShareParams) ProtoMessage()    {}
func (*QueryMarketMapperRevenueShareParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_13d50c6e3048e744, []int{0}
}
func (m *QueryMarketMapperRevenueShareParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketMapperRevenueShareParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketMapperRevenueShareParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketMapperRevenueShareParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketMapperRevenueShareParams.Merge(m, src)
}
func (m *QueryMarketMapperRevenueShareParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketMapperRevenueShareParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketMapperRevenueShareParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketMapperRevenueShareParams proto.InternalMessageInfo

// Response type for QueryMarketMapperRevenueShareParams
type QueryMarketMapperRevenueShareParamsResponse struct {
	Params MarketMapperRevenueShareParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryMarketMapperRevenueShareParamsResponse) Reset() {
	*m = QueryMarketMapperRevenueShareParamsResponse{}
}
func (m *QueryMarketMapperRevenueShareParamsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryMarketMapperRevenueShareParamsResponse) ProtoMessage() {}
func (*QueryMarketMapperRevenueShareParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13d50c6e3048e744, []int{1}
}
func (m *QueryMarketMapperRevenueShareParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketMapperRevenueShareParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketMapperRevenueShareParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketMapperRevenueShareParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketMapperRevenueShareParamsResponse.Merge(m, src)
}
func (m *QueryMarketMapperRevenueShareParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketMapperRevenueShareParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketMapperRevenueShareParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketMapperRevenueShareParamsResponse proto.InternalMessageInfo

func (m *QueryMarketMapperRevenueShareParamsResponse) GetParams() MarketMapperRevenueShareParams {
	if m != nil {
		return m.Params
	}
	return MarketMapperRevenueShareParams{}
}

// Queries market mapper revenue share details for a specific market
type QueryMarketMapperRevShareDetails struct {
	MarketId uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryMarketMapperRevShareDetails) Reset()         { *m = QueryMarketMapperRevShareDetails{} }
func (m *QueryMarketMapperRevShareDetails) String() string { return proto.CompactTextString(m) }
func (*QueryMarketMapperRevShareDetails) ProtoMessage()    {}
func (*QueryMarketMapperRevShareDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_13d50c6e3048e744, []int{2}
}
func (m *QueryMarketMapperRevShareDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketMapperRevShareDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketMapperRevShareDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketMapperRevShareDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketMapperRevShareDetails.Merge(m, src)
}
func (m *QueryMarketMapperRevShareDetails) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketMapperRevShareDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketMapperRevShareDetails.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketMapperRevShareDetails proto.InternalMessageInfo

func (m *QueryMarketMapperRevShareDetails) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// Response type for QueryMarketMapperRevShareDetails
type QueryMarketMapperRevShareDetailsResponse struct {
	Details MarketMapperRevShareDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details"`
}

func (m *QueryMarketMapperRevShareDetailsResponse) Reset() {
	*m = QueryMarketMapperRevShareDetailsResponse{}
}
func (m *QueryMarketMapperRevShareDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketMapperRevShareDetailsResponse) ProtoMessage()    {}
func (*QueryMarketMapperRevShareDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13d50c6e3048e744, []int{3}
}
func (m *QueryMarketMapperRevShareDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketMapperRevShareDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketMapperRevShareDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketMapperRevShareDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketMapperRevShareDetailsResponse.Merge(m, src)
}
func (m *QueryMarketMapperRevShareDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketMapperRevShareDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketMapperRevShareDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketMapperRevShareDetailsResponse proto.InternalMessageInfo

func (m *QueryMarketMapperRevShareDetailsResponse) GetDetails() MarketMapperRevShareDetails {
	if m != nil {
		return m.Details
	}
	return MarketMapperRevShareDetails{}
}

// Queries unconditional revenue share details
type QueryUnconditionalRevShareConfig struct {
}

func (m *QueryUnconditionalRevShareConfig) Reset()         { *m = QueryUnconditionalRevShareConfig{} }
func (m *QueryUnconditionalRevShareConfig) String() string { return proto.CompactTextString(m) }
func (*QueryUnconditionalRevShareConfig) ProtoMessage()    {}
func (*QueryUnconditionalRevShareConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_13d50c6e3048e744, []int{4}
}
func (m *QueryUnconditionalRevShareConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnconditionalRevShareConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnconditionalRevShareConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnconditionalRevShareConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnconditionalRevShareConfig.Merge(m, src)
}
func (m *QueryUnconditionalRevShareConfig) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnconditionalRevShareConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnconditionalRevShareConfig.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnconditionalRevShareConfig proto.InternalMessageInfo

// Response type for QueryUnconditionalRevShareConfig
type QueryUnconditionalRevShareConfigResponse struct {
	Config UnconditionalRevShareConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config"`
}

func (m *QueryUnconditionalRevShareConfigResponse) Reset() {
	*m = QueryUnconditionalRevShareConfigResponse{}
}
func (m *QueryUnconditionalRevShareConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnconditionalRevShareConfigResponse) ProtoMessage()    {}
func (*QueryUnconditionalRevShareConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13d50c6e3048e744, []int{5}
}
func (m *QueryUnconditionalRevShareConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnconditionalRevShareConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnconditionalRevShareConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnconditionalRevShareConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnconditionalRevShareConfigResponse.Merge(m, src)
}
func (m *QueryUnconditionalRevShareConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnconditionalRevShareConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnconditionalRevShareConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnconditionalRevShareConfigResponse proto.InternalMessageInfo

func (m *QueryUnconditionalRevShareConfigResponse) GetConfig() UnconditionalRevShareConfig {
	if m != nil {
		return m.Config
	}
	return UnconditionalRevShareConfig{}
}

// Queries order router rev shares
type QueryOrderRouterRevShares struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryOrderRouterRevShares) Reset()         { *m = QueryOrderRouterRevShares{} }
func (m *QueryOrderRouterRevShares) String() string { return proto.CompactTextString(m) }
func (*QueryOrderRouterRevShares) ProtoMessage()    {}
func (*QueryOrderRouterRevShares) Descriptor() ([]byte, []int) {
	return fileDescriptor_13d50c6e3048e744, []int{6}
}
func (m *QueryOrderRouterRevShares) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderRouterRevShares) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderRouterRevShares.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderRouterRevShares) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderRouterRevShares.Merge(m, src)
}
func (m *QueryOrderRouterRevShares) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderRouterRevShares) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderRouterRevShares.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderRouterRevShares proto.InternalMessageInfo

func (m *QueryOrderRouterRevShares) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Response type for QueryOrderRouterRevShares
type QueryOrderRouterRevSharesResponse struct {
	OrderRouterRevShares OrderRouterRevShares `protobuf:"bytes,1,opt,name=order_router_rev_shares,json=orderRouterRevShares,proto3" json:"order_router_rev_shares"`
}

func (m *QueryOrderRouterRevSharesResponse) Reset()         { *m = QueryOrderRouterRevSharesResponse{} }
func (m *QueryOrderRouterRevSharesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderRouterRevSharesResponse) ProtoMessage()    {}
func (*QueryOrderRouterRevSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13d50c6e3048e744, []int{7}
}
func (m *QueryOrderRouterRevSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderRouterRevSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderRouterRevSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderRouterRevSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderRouterRevSharesResponse.Merge(m, src)
}
func (m *QueryOrderRouterRevSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderRouterRevSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderRouterRevSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderRouterRevSharesResponse proto.InternalMessageInfo

func (m *QueryOrderRouterRevSharesResponse) GetOrderRouterRevShares() OrderRouterRevShares {
	if m != nil {
		return m.OrderRouterRevShares
	}
	return OrderRouterRevShares{}
}

func init() {
	proto.RegisterType((*QueryMarketMapperRevenueShareParams)(nil), "dydxprotocol.revshare.QueryMarketMapperRevenueShareParams")
	proto.RegisterType((*QueryMarketMapperRevenueShareParamsResponse)(nil), "dydxprotocol.revshare.QueryMarketMapperRevenueShareParamsResponse")
	proto.RegisterType((*QueryMarketMapperRevShareDetails)(nil), "dydxprotocol.revshare.QueryMarketMapperRevShareDetails")
	proto.RegisterType((*QueryMarketMapperRevShareDetailsResponse)(nil), "dydxprotocol.revshare.QueryMarketMapperRevShareDetailsResponse")
	proto.RegisterType((*QueryUnconditionalRevShareConfig)(nil), "dydxprotocol.revshare.QueryUnconditionalRevShareConfig")
	proto.RegisterType((*QueryUnconditionalRevShareConfigResponse)(nil), "dydxprotocol.revshare.QueryUnconditionalRevShareConfigResponse")
	proto.RegisterType((*QueryOrderRouterRevShares)(nil), "dydxprotocol.revshare.QueryOrderRouterRevShares")
	proto.RegisterType((*QueryOrderRouterRevSharesResponse)(nil), "dydxprotocol.revshare.QueryOrderRouterRevSharesResponse")
}

func init() { proto.RegisterFile("dydxprotocol/revshare/query.proto", fileDescriptor_13d50c6e3048e744) }

var fileDescriptor_13d50c6e3048e744 = []byte{
	// 618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x6f, 0xd3, 0x3e,
	0x1c, 0xad, 0xff, 0xfa, 0xd3, 0x31, 0x23, 0x2e, 0x56, 0x11, 0x5b, 0x8b, 0xc2, 0x66, 0x40, 0x9a,
	0x34, 0x2d, 0x99, 0x0a, 0x63, 0x53, 0x25, 0x34, 0x28, 0xbb, 0x80, 0x34, 0x6d, 0xa4, 0x70, 0xe1,
	0x12, 0x79, 0x89, 0x49, 0x23, 0xda, 0x38, 0x38, 0x69, 0xb5, 0x6a, 0x8c, 0xc3, 0xee, 0x48, 0x48,
	0x7c, 0x15, 0x3e, 0x02, 0x87, 0xdd, 0x98, 0xe0, 0xc2, 0x09, 0x50, 0xcb, 0x81, 0x8f, 0x81, 0x62,
	0x3b, 0x69, 0x91, 0x92, 0xac, 0xdd, 0x2d, 0xfd, 0xf9, 0xbd, 0xe7, 0xf7, 0x7e, 0xf5, 0x83, 0xcb,
	0xce, 0xc0, 0x39, 0x0c, 0x38, 0x8b, 0x98, 0xcd, 0x3a, 0x06, 0xa7, 0xfd, 0xb0, 0x4d, 0x38, 0x35,
	0xde, 0xf4, 0x28, 0x1f, 0xe8, 0x62, 0x8e, 0xae, 0x4d, 0x42, 0xf4, 0x04, 0x52, 0x5d, 0xb4, 0x59,
	0xd8, 0x65, 0xa1, 0x25, 0x4e, 0x0c, 0xf9, 0x43, 0x32, 0xaa, 0x15, 0x97, 0xb9, 0x4c, 0xce, 0xe3,
	0x2f, 0x35, 0xbd, 0xe1, 0x32, 0xe6, 0x76, 0xa8, 0x41, 0x02, 0xcf, 0x20, 0xbe, 0xcf, 0x22, 0x12,
	0x79, 0xcc, 0x4f, 0x38, 0x38, 0xdb, 0x48, 0x40, 0x38, 0xe9, 0x26, 0x98, 0xdb, 0xd9, 0x98, 0xe4,
	0x43, 0xa2, 0xf0, 0x1d, 0x78, 0xeb, 0x59, 0x6c, 0x7f, 0x97, 0xf0, 0xd7, 0x34, 0xda, 0x25, 0x41,
	0x40, 0xb9, 0x49, 0xfb, 0xd4, 0xef, 0xd1, 0x56, 0x0c, 0xdb, 0x17, 0x92, 0xf8, 0x04, 0xc0, 0xd5,
	0x29, 0x70, 0x26, 0x0d, 0x03, 0xe6, 0x87, 0x14, 0xb5, 0x60, 0x59, 0x9a, 0x59, 0x00, 0x4b, 0x60,
	0xe5, 0x4a, 0x7d, 0x43, 0xcf, 0xdc, 0x8b, 0x5e, 0x2c, 0xd7, 0xfc, 0xff, 0xf4, 0xc7, 0xcd, 0x92,
	0xa9, 0xa4, 0xf0, 0x36, 0x5c, 0xca, 0xf2, 0x20, 0x08, 0x3b, 0x34, 0x22, 0x5e, 0x27, 0x44, 0x35,
	0x38, 0xdf, 0x15, 0xc7, 0x96, 0xe7, 0x88, 0xbb, 0xaf, 0x9a, 0x97, 0xe5, 0xe0, 0x89, 0x83, 0xdf,
	0xc1, 0x95, 0xf3, 0x04, 0xd2, 0x04, 0x26, 0x9c, 0x73, 0xe4, 0x48, 0x45, 0xa8, 0x4f, 0x17, 0x61,
	0x52, 0x4c, 0xf9, 0x4f, 0x84, 0x30, 0x56, 0x01, 0x5e, 0xf8, 0x36, 0xf3, 0x1d, 0x2f, 0xfe, 0x47,
	0x49, 0x27, 0xe1, 0x3c, 0x66, 0xfe, 0x2b, 0xcf, 0xc5, 0x6f, 0x95, 0xc7, 0x02, 0x4c, 0xea, 0x71,
	0x1f, 0x96, 0x6d, 0x31, 0x39, 0xc7, 0x62, 0x81, 0x56, 0xb2, 0x62, 0xa9, 0x83, 0xf7, 0xe0, 0xa2,
	0xb8, 0x7d, 0x8f, 0x3b, 0x94, 0x9b, 0xac, 0x17, 0x8d, 0x33, 0x85, 0xa8, 0x0e, 0xe7, 0x88, 0xe3,
	0x70, 0x1a, 0xca, 0x95, 0xcc, 0x37, 0x17, 0xbe, 0x7e, 0x5a, 0xab, 0xa8, 0xc7, 0xfc, 0x48, 0x9e,
	0xb4, 0x22, 0xee, 0xf9, 0xae, 0x99, 0x00, 0xf1, 0x7b, 0x00, 0x97, 0x73, 0x15, 0xd3, 0x20, 0x6d,
	0x78, 0x9d, 0xc5, 0xe7, 0x16, 0x17, 0x00, 0x8b, 0xd3, 0xbe, 0x25, 0xac, 0x27, 0xcb, 0x5f, 0xcd,
	0x49, 0x96, 0xa5, 0xaa, 0x22, 0x55, 0x58, 0xc6, 0x59, 0xfd, 0x4f, 0x19, 0x5e, 0x12, 0x7e, 0xd0,
	0x4f, 0x00, 0xb5, 0xe2, 0xe7, 0x87, 0x1a, 0x39, 0xb7, 0x4e, 0xd1, 0x84, 0x6a, 0xf3, 0xe2, 0xdc,
	0x64, 0x2d, 0xf8, 0xc1, 0xc9, 0xb7, 0xdf, 0x1f, 0xff, 0xdb, 0x44, 0x1b, 0x46, 0x76, 0x97, 0xd5,
	0x4b, 0xef, 0x0a, 0x9d, 0xf1, 0xd2, 0x2c, 0xd9, 0x17, 0x34, 0x02, 0xb0, 0x56, 0xd4, 0x95, 0xcd,
	0x19, 0x2c, 0x4e, 0x12, 0xab, 0xdb, 0x17, 0x24, 0xa6, 0xc1, 0x9e, 0x8a, 0x60, 0x3b, 0xa8, 0x39,
	0x63, 0x30, 0x55, 0x24, 0xe3, 0x28, 0xed, 0xf8, 0x31, 0xfa, 0x02, 0x60, 0xad, 0xe0, 0x81, 0x17,
	0xa7, 0x2c, 0x20, 0x16, 0xa7, 0x9c, 0xa2, 0x9e, 0xf8, 0xbe, 0x48, 0xb9, 0x8e, 0xf4, 0x9c, 0x94,
	0xbd, 0x49, 0x8d, 0x71, 0x4a, 0xf4, 0x19, 0xc0, 0x4a, 0x66, 0x01, 0xd7, 0x8b, 0x1c, 0x65, 0x31,
	0xaa, 0x5b, 0xb3, 0x32, 0x52, 0xf3, 0x0f, 0x85, 0xf9, 0x06, 0xda, 0xca, 0x31, 0x9f, 0xd3, 0x57,
	0xe3, 0x48, 0x35, 0xff, 0xb8, 0xf9, 0xfc, 0x74, 0xa8, 0x81, 0xb3, 0xa1, 0x06, 0x7e, 0x0d, 0x35,
	0xf0, 0x61, 0xa4, 0x95, 0xce, 0x46, 0x5a, 0xe9, 0xfb, 0x48, 0x2b, 0xbd, 0x6c, 0xb8, 0x5e, 0xd4,
	0xee, 0x1d, 0xe8, 0x36, 0xeb, 0xfe, 0xab, 0xde, 0xbf, 0xb7, 0x66, 0xb7, 0x89, 0xe7, 0x1b, 0xe9,
	0xe4, 0x70, 0x7c, 0x63, 0x34, 0x08, 0x68, 0x78, 0x50, 0x16, 0x47, 0x77, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x62, 0x50, 0xc1, 0x36, 0x8c, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// MarketMapperRevenueShareParams queries the revenue share params for the
	// market mapper
	MarketMapperRevenueShareParams(ctx context.Context, in *QueryMarketMapperRevenueShareParams, opts ...grpc.CallOption) (*QueryMarketMapperRevenueShareParamsResponse, error)
	// Queries market mapper revenue share details for a specific market
	MarketMapperRevShareDetails(ctx context.Context, in *QueryMarketMapperRevShareDetails, opts ...grpc.CallOption) (*QueryMarketMapperRevShareDetailsResponse, error)
	// Queries unconditional revenue share config
	UnconditionalRevShareConfig(ctx context.Context, in *QueryUnconditionalRevShareConfig, opts ...grpc.CallOption) (*QueryUnconditionalRevShareConfigResponse, error)
	// Queries order router rev shares
	OrderRouterRevShares(ctx context.Context, in *QueryOrderRouterRevShares, opts ...grpc.CallOption) (*QueryOrderRouterRevSharesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) MarketMapperRevenueShareParams(ctx context.Context, in *QueryMarketMapperRevenueShareParams, opts ...grpc.CallOption) (*QueryMarketMapperRevenueShareParamsResponse, error) {
	out := new(QueryMarketMapperRevenueShareParamsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.revshare.Query/MarketMapperRevenueShareParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketMapperRevShareDetails(ctx context.Context, in *QueryMarketMapperRevShareDetails, opts ...grpc.CallOption) (*QueryMarketMapperRevShareDetailsResponse, error) {
	out := new(QueryMarketMapperRevShareDetailsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.revshare.Query/MarketMapperRevShareDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnconditionalRevShareConfig(ctx context.Context, in *QueryUnconditionalRevShareConfig, opts ...grpc.CallOption) (*QueryUnconditionalRevShareConfigResponse, error) {
	out := new(QueryUnconditionalRevShareConfigResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.revshare.Query/UnconditionalRevShareConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderRouterRevShares(ctx context.Context, in *QueryOrderRouterRevShares, opts ...grpc.CallOption) (*QueryOrderRouterRevSharesResponse, error) {
	out := new(QueryOrderRouterRevSharesResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.revshare.Query/OrderRouterRevShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// MarketMapperRevenueShareParams queries the revenue share params for the
	// market mapper
	MarketMapperRevenueShareParams(context.Context, *QueryMarketMapperRevenueShareParams) (*QueryMarketMapperRevenueShareParamsResponse, error)
	// Queries market mapper revenue share details for a specific market
	MarketMapperRevShareDetails(context.Context, *QueryMarketMapperRevShareDetails) (*QueryMarketMapperRevShareDetailsResponse, error)
	// Queries unconditional revenue share config
	UnconditionalRevShareConfig(context.Context, *QueryUnconditionalRevShareConfig) (*QueryUnconditionalRevShareConfigResponse, error)
	// Queries order router rev shares
	OrderRouterRevShares(context.Context, *QueryOrderRouterRevShares) (*QueryOrderRouterRevSharesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) MarketMapperRevenueShareParams(ctx context.Context, req *QueryMarketMapperRevenueShareParams) (*QueryMarketMapperRevenueShareParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketMapperRevenueShareParams not implemented")
}
func (*UnimplementedQueryServer) MarketMapperRevShareDetails(ctx context.Context, req *QueryMarketMapperRevShareDetails) (*QueryMarketMapperRevShareDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketMapperRevShareDetails not implemented")
}
func (*UnimplementedQueryServer) UnconditionalRevShareConfig(ctx context.Context, req *QueryUnconditionalRevShareConfig) (*QueryUnconditionalRevShareConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnconditionalRevShareConfig not implemented")
}
func (*UnimplementedQueryServer) OrderRouterRevShares(ctx context.Context, req *QueryOrderRouterRevShares) (*QueryOrderRouterRevSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderRouterRevShares not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_MarketMapperRevenueShareParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketMapperRevenueShareParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketMapperRevenueShareParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.revshare.Query/MarketMapperRevenueShareParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketMapperRevenueShareParams(ctx, req.(*QueryMarketMapperRevenueShareParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketMapperRevShareDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketMapperRevShareDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketMapperRevShareDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.revshare.Query/MarketMapperRevShareDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketMapperRevShareDetails(ctx, req.(*QueryMarketMapperRevShareDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnconditionalRevShareConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnconditionalRevShareConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnconditionalRevShareConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.revshare.Query/UnconditionalRevShareConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnconditionalRevShareConfig(ctx, req.(*QueryUnconditionalRevShareConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderRouterRevShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderRouterRevShares)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderRouterRevShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.revshare.Query/OrderRouterRevShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderRouterRevShares(ctx, req.(*QueryOrderRouterRevShares))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dydxprotocol.revshare.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarketMapperRevenueShareParams",
			Handler:    _Query_MarketMapperRevenueShareParams_Handler,
		},
		{
			MethodName: "MarketMapperRevShareDetails",
			Handler:    _Query_MarketMapperRevShareDetails_Handler,
		},
		{
			MethodName: "UnconditionalRevShareConfig",
			Handler:    _Query_UnconditionalRevShareConfig_Handler,
		},
		{
			MethodName: "OrderRouterRevShares",
			Handler:    _Query_OrderRouterRevShares_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dydxprotocol/revshare/query.proto",
}

func (m *QueryMarketMapperRevenueShareParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketMapperRevenueShareParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketMapperRevenueShareParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMarketMapperRevenueShareParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketMapperRevenueShareParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketMapperRevenueShareParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMarketMapperRevShareDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketMapperRevShareDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketMapperRevShareDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketMapperRevShareDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketMapperRevShareDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketMapperRevShareDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUnconditionalRevShareConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnconditionalRevShareConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnconditionalRevShareConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryUnconditionalRevShareConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnconditionalRevShareConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnconditionalRevShareConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOrderRouterRevShares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderRouterRevShares) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderRouterRevShares) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderRouterRevSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderRouterRevSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderRouterRevSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OrderRouterRevShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMarketMapperRevenueShareParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMarketMapperRevenueShareParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMarketMapperRevShareDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	return n
}

func (m *QueryMarketMapperRevShareDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Details.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUnconditionalRevShareConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryUnconditionalRevShareConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Config.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOrderRouterRevShares) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderRouterRevSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OrderRouterRevShares.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMarketMapperRevenueShareParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketMapperRevenueShareParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketMapperRevenueShareParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketMapperRevenueShareParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketMapperRevenueShareParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketMapperRevenueShareParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketMapperRevShareDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketMapperRevShareDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketMapperRevShareDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketMapperRevShareDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketMapperRevShareDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketMapperRevShareDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnconditionalRevShareConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnconditionalRevShareConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnconditionalRevShareConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnconditionalRevShareConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnconditionalRevShareConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnconditionalRevShareConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderRouterRevShares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderRouterRevShares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderRouterRevShares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderRouterRevSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderRouterRevSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderRouterRevSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderRouterRevShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderRouterRevShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
