// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/revshare/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Message to set the market mapper revenue share
type MsgSetMarketMapperRevenueShare struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Parameters for the revenue share
	Params MarketMapperRevenueShareParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgSetMarketMapperRevenueShare) Reset()         { *m = MsgSetMarketMapperRevenueShare{} }
func (m *MsgSetMarketMapperRevenueShare) String() string { return proto.CompactTextString(m) }
func (*MsgSetMarketMapperRevenueShare) ProtoMessage()    {}
func (*MsgSetMarketMapperRevenueShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_460d8062a262197e, []int{0}
}
func (m *MsgSetMarketMapperRevenueShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMarketMapperRevenueShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMarketMapperRevenueShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMarketMapperRevenueShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMarketMapperRevenueShare.Merge(m, src)
}
func (m *MsgSetMarketMapperRevenueShare) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMarketMapperRevenueShare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMarketMapperRevenueShare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMarketMapperRevenueShare proto.InternalMessageInfo

func (m *MsgSetMarketMapperRevenueShare) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSetMarketMapperRevenueShare) GetParams() MarketMapperRevenueShareParams {
	if m != nil {
		return m.Params
	}
	return MarketMapperRevenueShareParams{}
}

// Response to a MsgSetMarketMapperRevenueShare
type MsgSetMarketMapperRevenueShareResponse struct {
}

func (m *MsgSetMarketMapperRevenueShareResponse) Reset() {
	*m = MsgSetMarketMapperRevenueShareResponse{}
}
func (m *MsgSetMarketMapperRevenueShareResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMarketMapperRevenueShareResponse) ProtoMessage()    {}
func (*MsgSetMarketMapperRevenueShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_460d8062a262197e, []int{1}
}
func (m *MsgSetMarketMapperRevenueShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMarketMapperRevenueShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMarketMapperRevenueShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMarketMapperRevenueShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMarketMapperRevenueShareResponse.Merge(m, src)
}
func (m *MsgSetMarketMapperRevenueShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMarketMapperRevenueShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMarketMapperRevenueShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMarketMapperRevenueShareResponse proto.InternalMessageInfo

// Msg to set market mapper revenue share details (e.g. expiration timestamp)
// for a specific market. To be used as an override for existing revenue share
// settings set by the MsgSetMarketMapperRevenueShare msg
type MsgSetMarketMapperRevShareDetailsForMarket struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The market ID for which to set the revenue share details
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Parameters for the revenue share details
	Params MarketMapperRevShareDetails `protobuf:"bytes,3,opt,name=params,proto3" json:"params"`
}

func (m *MsgSetMarketMapperRevShareDetailsForMarket) Reset() {
	*m = MsgSetMarketMapperRevShareDetailsForMarket{}
}
func (m *MsgSetMarketMapperRevShareDetailsForMarket) String() string {
	return proto.CompactTextString(m)
}
func (*MsgSetMarketMapperRevShareDetailsForMarket) ProtoMessage() {}
func (*MsgSetMarketMapperRevShareDetailsForMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_460d8062a262197e, []int{2}
}
func (m *MsgSetMarketMapperRevShareDetailsForMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMarketMapperRevShareDetailsForMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMarketMapperRevShareDetailsForMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMarketMapperRevShareDetailsForMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMarketMapperRevShareDetailsForMarket.Merge(m, src)
}
func (m *MsgSetMarketMapperRevShareDetailsForMarket) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMarketMapperRevShareDetailsForMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMarketMapperRevShareDetailsForMarket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMarketMapperRevShareDetailsForMarket proto.InternalMessageInfo

func (m *MsgSetMarketMapperRevShareDetailsForMarket) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSetMarketMapperRevShareDetailsForMarket) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgSetMarketMapperRevShareDetailsForMarket) GetParams() MarketMapperRevShareDetails {
	if m != nil {
		return m.Params
	}
	return MarketMapperRevShareDetails{}
}

// Response to a MsgSetMarketMapperRevShareDetailsForMarket
type MsgSetMarketMapperRevShareDetailsForMarketResponse struct {
}

func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) Reset() {
	*m = MsgSetMarketMapperRevShareDetailsForMarketResponse{}
}
func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgSetMarketMapperRevShareDetailsForMarketResponse) ProtoMessage() {}
func (*MsgSetMarketMapperRevShareDetailsForMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_460d8062a262197e, []int{3}
}
func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMarketMapperRevShareDetailsForMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMarketMapperRevShareDetailsForMarketResponse.Merge(m, src)
}
func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMarketMapperRevShareDetailsForMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMarketMapperRevShareDetailsForMarketResponse proto.InternalMessageInfo

// Message to update the unconditional revenue share config.
type MsgUpdateUnconditionalRevShareConfig struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The config to update.
	Config UnconditionalRevShareConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config"`
}

func (m *MsgUpdateUnconditionalRevShareConfig) Reset()         { *m = MsgUpdateUnconditionalRevShareConfig{} }
func (m *MsgUpdateUnconditionalRevShareConfig) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateUnconditionalRevShareConfig) ProtoMessage()    {}
func (*MsgUpdateUnconditionalRevShareConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_460d8062a262197e, []int{4}
}
func (m *MsgUpdateUnconditionalRevShareConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateUnconditionalRevShareConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateUnconditionalRevShareConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateUnconditionalRevShareConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateUnconditionalRevShareConfig.Merge(m, src)
}
func (m *MsgUpdateUnconditionalRevShareConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateUnconditionalRevShareConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateUnconditionalRevShareConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateUnconditionalRevShareConfig proto.InternalMessageInfo

func (m *MsgUpdateUnconditionalRevShareConfig) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateUnconditionalRevShareConfig) GetConfig() UnconditionalRevShareConfig {
	if m != nil {
		return m.Config
	}
	return UnconditionalRevShareConfig{}
}

// Response to MsgUpdateUnconditionalRevShareConfig
type MsgUpdateUnconditionalRevShareConfigResponse struct {
}

func (m *MsgUpdateUnconditionalRevShareConfigResponse) Reset() {
	*m = MsgUpdateUnconditionalRevShareConfigResponse{}
}
func (m *MsgUpdateUnconditionalRevShareConfigResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateUnconditionalRevShareConfigResponse) ProtoMessage() {}
func (*MsgUpdateUnconditionalRevShareConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_460d8062a262197e, []int{5}
}
func (m *MsgUpdateUnconditionalRevShareConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateUnconditionalRevShareConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateUnconditionalRevShareConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateUnconditionalRevShareConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateUnconditionalRevShareConfigResponse.Merge(m, src)
}
func (m *MsgUpdateUnconditionalRevShareConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateUnconditionalRevShareConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateUnconditionalRevShareConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateUnconditionalRevShareConfigResponse proto.InternalMessageInfo

// Governance message to create or update the order router revenue share
type MsgSetOrderRouterRevShares struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The order router rev shares to create or update.
	OrderRouterRevShares []OrderRouterRevShares `protobuf:"bytes,2,rep,name=order_router_rev_shares,json=orderRouterRevShares,proto3" json:"order_router_rev_shares"`
}

func (m *MsgSetOrderRouterRevShares) Reset()         { *m = MsgSetOrderRouterRevShares{} }
func (m *MsgSetOrderRouterRevShares) String() string { return proto.CompactTextString(m) }
func (*MsgSetOrderRouterRevShares) ProtoMessage()    {}
func (*MsgSetOrderRouterRevShares) Descriptor() ([]byte, []int) {
	return fileDescriptor_460d8062a262197e, []int{6}
}
func (m *MsgSetOrderRouterRevShares) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOrderRouterRevShares) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOrderRouterRevShares.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOrderRouterRevShares) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOrderRouterRevShares.Merge(m, src)
}
func (m *MsgSetOrderRouterRevShares) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOrderRouterRevShares) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOrderRouterRevShares.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOrderRouterRevShares proto.InternalMessageInfo

func (m *MsgSetOrderRouterRevShares) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSetOrderRouterRevShares) GetOrderRouterRevShares() []OrderRouterRevShares {
	if m != nil {
		return m.OrderRouterRevShares
	}
	return nil
}

// Response to MsgSetOrderRouterRevShares
type MsgSetOrderRouterRevSharesResponse struct {
}

func (m *MsgSetOrderRouterRevSharesResponse) Reset()         { *m = MsgSetOrderRouterRevSharesResponse{} }
func (m *MsgSetOrderRouterRevSharesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetOrderRouterRevSharesResponse) ProtoMessage()    {}
func (*MsgSetOrderRouterRevSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_460d8062a262197e, []int{7}
}
func (m *MsgSetOrderRouterRevSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOrderRouterRevSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOrderRouterRevSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOrderRouterRevSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOrderRouterRevSharesResponse.Merge(m, src)
}
func (m *MsgSetOrderRouterRevSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOrderRouterRevSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOrderRouterRevSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOrderRouterRevSharesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSetMarketMapperRevenueShare)(nil), "dydxprotocol.revshare.MsgSetMarketMapperRevenueShare")
	proto.RegisterType((*MsgSetMarketMapperRevenueShareResponse)(nil), "dydxprotocol.revshare.MsgSetMarketMapperRevenueShareResponse")
	proto.RegisterType((*MsgSetMarketMapperRevShareDetailsForMarket)(nil), "dydxprotocol.revshare.MsgSetMarketMapperRevShareDetailsForMarket")
	proto.RegisterType((*MsgSetMarketMapperRevShareDetailsForMarketResponse)(nil), "dydxprotocol.revshare.MsgSetMarketMapperRevShareDetailsForMarketResponse")
	proto.RegisterType((*MsgUpdateUnconditionalRevShareConfig)(nil), "dydxprotocol.revshare.MsgUpdateUnconditionalRevShareConfig")
	proto.RegisterType((*MsgUpdateUnconditionalRevShareConfigResponse)(nil), "dydxprotocol.revshare.MsgUpdateUnconditionalRevShareConfigResponse")
	proto.RegisterType((*MsgSetOrderRouterRevShares)(nil), "dydxprotocol.revshare.MsgSetOrderRouterRevShares")
	proto.RegisterType((*MsgSetOrderRouterRevSharesResponse)(nil), "dydxprotocol.revshare.MsgSetOrderRouterRevSharesResponse")
}

func init() { proto.RegisterFile("dydxprotocol/revshare/tx.proto", fileDescriptor_460d8062a262197e) }

var fileDescriptor_460d8062a262197e = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x31, 0x6f, 0xd3, 0x40,
	0x18, 0xcd, 0x51, 0x88, 0xc8, 0x55, 0x30, 0x58, 0x41, 0x09, 0xae, 0x64, 0x4a, 0x14, 0x41, 0x54,
	0xa8, 0xad, 0x86, 0x82, 0x44, 0x11, 0x43, 0x53, 0x84, 0xd4, 0x21, 0x22, 0x72, 0xe8, 0xc2, 0x12,
	0xb9, 0xf6, 0xe1, 0x58, 0xc4, 0x3e, 0xeb, 0xee, 0x62, 0x25, 0x2b, 0x4b, 0x57, 0x24, 0x7e, 0x03,
	0x3b, 0x03, 0x12, 0x13, 0x12, 0x63, 0x27, 0x54, 0x31, 0x31, 0x21, 0x94, 0x0c, 0xfc, 0x0d, 0xe4,
	0x3b, 0xdb, 0x09, 0xaa, 0xed, 0xa4, 0xe9, 0x92, 0xd8, 0xf7, 0x7d, 0xef, 0x7d, 0xef, 0x3d, 0xf9,
	0xd3, 0x41, 0xc5, 0x1a, 0x5b, 0x23, 0x9f, 0x60, 0x86, 0x4d, 0x3c, 0xd0, 0x08, 0x0a, 0x68, 0xdf,
	0x20, 0x48, 0x63, 0x23, 0x95, 0x1f, 0x4a, 0xb7, 0xe6, 0xeb, 0x6a, 0x5c, 0x97, 0x6f, 0x9b, 0x98,
	0xba, 0x98, 0xf6, 0x78, 0x45, 0x13, 0x2f, 0x02, 0x21, 0x57, 0xc4, 0x9b, 0xe6, 0x52, 0x5b, 0x0b,
	0x76, 0xc2, 0xbf, 0xa8, 0x50, 0xb6, 0xb1, 0x8d, 0x05, 0x20, 0x7c, 0x8a, 0x4e, 0x6b, 0xe9, 0x02,
	0x7c, 0x83, 0x18, 0x6e, 0x4c, 0x59, 0x4f, 0xef, 0x89, 0x1f, 0x44, 0x57, 0xed, 0x1b, 0x80, 0x4a,
	0x9b, 0xda, 0x5d, 0xc4, 0xda, 0x06, 0x79, 0x17, 0xfe, 0xfa, 0x3e, 0x22, 0x3a, 0x0a, 0x90, 0x37,
	0x44, 0xdd, 0xb0, 0x51, 0x7a, 0x02, 0x4b, 0xc6, 0x90, 0xf5, 0x31, 0x71, 0xd8, 0xb8, 0x0a, 0x36,
	0x41, 0xa3, 0xd4, 0xaa, 0xfe, 0xfc, 0xb2, 0x5d, 0x8e, 0x0c, 0xec, 0x5b, 0x16, 0x41, 0x94, 0x76,
	0x19, 0x71, 0x3c, 0x5b, 0x9f, 0xb5, 0x4a, 0x5d, 0x58, 0x14, 0x82, 0xaa, 0x57, 0x36, 0x41, 0x63,
	0xbd, 0xf9, 0x58, 0x4d, 0x8d, 0x45, 0xcd, 0x1a, 0xdc, 0xe1, 0xe0, 0xd6, 0xd5, 0xd3, 0xdf, 0x77,
	0x0a, 0x7a, 0x44, 0xb5, 0x77, 0xf3, 0xfd, 0xdf, 0xcf, 0x5b, 0xb3, 0x21, 0xb5, 0x06, 0xbc, 0x97,
	0x2f, 0x5f, 0x47, 0xd4, 0xc7, 0x1e, 0x45, 0xb5, 0x29, 0x80, 0x5b, 0xa9, 0xad, 0xbc, 0xed, 0x05,
	0x62, 0x86, 0x33, 0xa0, 0x2f, 0x31, 0x11, 0xd5, 0x95, 0x5d, 0x6f, 0xc0, 0x92, 0xcb, 0x19, 0x7a,
	0x8e, 0xc5, 0x8d, 0xdf, 0xd0, 0xaf, 0x8b, 0x83, 0x43, 0x4b, 0xea, 0x24, 0x91, 0xac, 0xf1, 0x48,
	0x9a, 0xcb, 0x45, 0x32, 0xaf, 0x70, 0x41, 0x1e, 0xbb, 0xb0, 0xb9, 0xbc, 0xc9, 0x24, 0x9b, 0xef,
	0x00, 0xd6, 0xdb, 0xd4, 0x3e, 0xf2, 0x2d, 0x83, 0xa1, 0x23, 0xcf, 0xc4, 0x9e, 0xe5, 0x30, 0x07,
	0x7b, 0xc6, 0x20, 0x86, 0x1e, 0x60, 0xef, 0xad, 0x63, 0xaf, 0x9c, 0x4a, 0x07, 0x16, 0x4d, 0xce,
	0x10, 0x7d, 0x0b, 0x59, 0xc6, 0x73, 0x66, 0xc7, 0xc6, 0x05, 0xcf, 0x39, 0xe3, 0x2a, 0x7c, 0xb8,
	0x8c, 0x83, 0xc4, 0xf2, 0x0f, 0x00, 0x65, 0x91, 0xd4, 0x2b, 0x62, 0x21, 0xa2, 0xe3, 0x21, 0x9b,
	0x05, 0x45, 0x57, 0x36, 0xda, 0x87, 0x15, 0x1c, 0xf2, 0xf5, 0x08, 0x27, 0xec, 0x11, 0x14, 0xf4,
	0xb8, 0xb5, 0x70, 0x0b, 0xd6, 0x1a, 0xeb, 0xcd, 0x07, 0x19, 0xce, 0xd3, 0x54, 0x44, 0x96, 0xcb,
	0x38, 0xa5, 0x76, 0x2e, 0x80, 0x3a, 0xac, 0x65, 0xfb, 0x89, 0x6d, 0x37, 0x4f, 0xae, 0xc1, 0xb5,
	0x36, 0xb5, 0xa5, 0x8f, 0x00, 0x6e, 0xe4, 0x2d, 0x7d, 0xe6, 0xb2, 0xe6, 0x2e, 0x9b, 0xfc, 0x7c,
	0x25, 0x58, 0xac, 0x4e, 0xfa, 0x0a, 0xe0, 0xfd, 0x65, 0x17, 0x74, 0xff, 0x22, 0xa3, 0x52, 0x29,
	0xe4, 0xc3, 0x4b, 0x53, 0x24, 0xca, 0x3f, 0x01, 0x78, 0x77, 0xf1, 0xfa, 0x3c, 0xcb, 0x1e, 0xb8,
	0x10, 0x2c, 0x1f, 0x5c, 0x02, 0x9c, 0xe8, 0x3c, 0x01, 0xb0, 0x92, 0xf5, 0xcd, 0xef, 0xe4, 0xc6,
	0x91, 0x06, 0x91, 0x9f, 0x5e, 0x18, 0x12, 0x2b, 0x69, 0xbd, 0x3e, 0x9d, 0x28, 0xe0, 0x6c, 0xa2,
	0x80, 0x3f, 0x13, 0x05, 0x7c, 0x98, 0x2a, 0x85, 0xb3, 0xa9, 0x52, 0xf8, 0x35, 0x55, 0x0a, 0x6f,
	0xf6, 0x6c, 0x87, 0xf5, 0x87, 0xc7, 0xaa, 0x89, 0x5d, 0xed, 0xbf, 0x4b, 0x2c, 0xd8, 0xdd, 0x36,
	0xfb, 0x86, 0xe3, 0x69, 0xc9, 0xc9, 0x68, 0xee, 0xf6, 0x1d, 0xfb, 0x88, 0x1e, 0x17, 0x79, 0xe9,
	0xd1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xce, 0xde, 0x41, 0xa3, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SetMarketMapperRevenueShare sets the revenue share for a market
	// mapper.
	SetMarketMapperRevenueShare(ctx context.Context, in *MsgSetMarketMapperRevenueShare, opts ...grpc.CallOption) (*MsgSetMarketMapperRevenueShareResponse, error)
	// SetMarketMapperRevenueShareDetails sets the revenue share details for a
	// market mapper.
	SetMarketMapperRevShareDetailsForMarket(ctx context.Context, in *MsgSetMarketMapperRevShareDetailsForMarket, opts ...grpc.CallOption) (*MsgSetMarketMapperRevShareDetailsForMarketResponse, error)
	// UpdateUnconditionalRevShareConfig sets the unconditional revshare config
	UpdateUnconditionalRevShareConfig(ctx context.Context, in *MsgUpdateUnconditionalRevShareConfig, opts ...grpc.CallOption) (*MsgUpdateUnconditionalRevShareConfigResponse, error)
	// SetOrderRouterRevShares sets the revenue share for an order router.
	SetOrderRouterRevShares(ctx context.Context, in *MsgSetOrderRouterRevShares, opts ...grpc.CallOption) (*MsgSetOrderRouterRevSharesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetMarketMapperRevenueShare(ctx context.Context, in *MsgSetMarketMapperRevenueShare, opts ...grpc.CallOption) (*MsgSetMarketMapperRevenueShareResponse, error) {
	out := new(MsgSetMarketMapperRevenueShareResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.revshare.Msg/SetMarketMapperRevenueShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMarketMapperRevShareDetailsForMarket(ctx context.Context, in *MsgSetMarketMapperRevShareDetailsForMarket, opts ...grpc.CallOption) (*MsgSetMarketMapperRevShareDetailsForMarketResponse, error) {
	out := new(MsgSetMarketMapperRevShareDetailsForMarketResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.revshare.Msg/SetMarketMapperRevShareDetailsForMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateUnconditionalRevShareConfig(ctx context.Context, in *MsgUpdateUnconditionalRevShareConfig, opts ...grpc.CallOption) (*MsgUpdateUnconditionalRevShareConfigResponse, error) {
	out := new(MsgUpdateUnconditionalRevShareConfigResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.revshare.Msg/UpdateUnconditionalRevShareConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetOrderRouterRevShares(ctx context.Context, in *MsgSetOrderRouterRevShares, opts ...grpc.CallOption) (*MsgSetOrderRouterRevSharesResponse, error) {
	out := new(MsgSetOrderRouterRevSharesResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.revshare.Msg/SetOrderRouterRevShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SetMarketMapperRevenueShare sets the revenue share for a market
	// mapper.
	SetMarketMapperRevenueShare(context.Context, *MsgSetMarketMapperRevenueShare) (*MsgSetMarketMapperRevenueShareResponse, error)
	// SetMarketMapperRevenueShareDetails sets the revenue share details for a
	// market mapper.
	SetMarketMapperRevShareDetailsForMarket(context.Context, *MsgSetMarketMapperRevShareDetailsForMarket) (*MsgSetMarketMapperRevShareDetailsForMarketResponse, error)
	// UpdateUnconditionalRevShareConfig sets the unconditional revshare config
	UpdateUnconditionalRevShareConfig(context.Context, *MsgUpdateUnconditionalRevShareConfig) (*MsgUpdateUnconditionalRevShareConfigResponse, error)
	// SetOrderRouterRevShares sets the revenue share for an order router.
	SetOrderRouterRevShares(context.Context, *MsgSetOrderRouterRevShares) (*MsgSetOrderRouterRevSharesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetMarketMapperRevenueShare(ctx context.Context, req *MsgSetMarketMapperRevenueShare) (*MsgSetMarketMapperRevenueShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMarketMapperRevenueShare not implemented")
}
func (*UnimplementedMsgServer) SetMarketMapperRevShareDetailsForMarket(ctx context.Context, req *MsgSetMarketMapperRevShareDetailsForMarket) (*MsgSetMarketMapperRevShareDetailsForMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMarketMapperRevShareDetailsForMarket not implemented")
}
func (*UnimplementedMsgServer) UpdateUnconditionalRevShareConfig(ctx context.Context, req *MsgUpdateUnconditionalRevShareConfig) (*MsgUpdateUnconditionalRevShareConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnconditionalRevShareConfig not implemented")
}
func (*UnimplementedMsgServer) SetOrderRouterRevShares(ctx context.Context, req *MsgSetOrderRouterRevShares) (*MsgSetOrderRouterRevSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderRouterRevShares not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetMarketMapperRevenueShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMarketMapperRevenueShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMarketMapperRevenueShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.revshare.Msg/SetMarketMapperRevenueShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMarketMapperRevenueShare(ctx, req.(*MsgSetMarketMapperRevenueShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMarketMapperRevShareDetailsForMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMarketMapperRevShareDetailsForMarket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMarketMapperRevShareDetailsForMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.revshare.Msg/SetMarketMapperRevShareDetailsForMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMarketMapperRevShareDetailsForMarket(ctx, req.(*MsgSetMarketMapperRevShareDetailsForMarket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateUnconditionalRevShareConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateUnconditionalRevShareConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateUnconditionalRevShareConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.revshare.Msg/UpdateUnconditionalRevShareConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateUnconditionalRevShareConfig(ctx, req.(*MsgUpdateUnconditionalRevShareConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetOrderRouterRevShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetOrderRouterRevShares)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetOrderRouterRevShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.revshare.Msg/SetOrderRouterRevShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetOrderRouterRevShares(ctx, req.(*MsgSetOrderRouterRevShares))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dydxprotocol.revshare.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMarketMapperRevenueShare",
			Handler:    _Msg_SetMarketMapperRevenueShare_Handler,
		},
		{
			MethodName: "SetMarketMapperRevShareDetailsForMarket",
			Handler:    _Msg_SetMarketMapperRevShareDetailsForMarket_Handler,
		},
		{
			MethodName: "UpdateUnconditionalRevShareConfig",
			Handler:    _Msg_UpdateUnconditionalRevShareConfig_Handler,
		},
		{
			MethodName: "SetOrderRouterRevShares",
			Handler:    _Msg_SetOrderRouterRevShares_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dydxprotocol/revshare/tx.proto",
}

func (m *MsgSetMarketMapperRevenueShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMarketMapperRevenueShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMarketMapperRevenueShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMarketMapperRevenueShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMarketMapperRevenueShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMarketMapperRevenueShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetMarketMapperRevShareDetailsForMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMarketMapperRevShareDetailsForMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMarketMapperRevShareDetailsForMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateUnconditionalRevShareConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateUnconditionalRevShareConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateUnconditionalRevShareConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateUnconditionalRevShareConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateUnconditionalRevShareConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateUnconditionalRevShareConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetOrderRouterRevShares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOrderRouterRevShares) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOrderRouterRevShares) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderRouterRevShares) > 0 {
		for iNdEx := len(m.OrderRouterRevShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderRouterRevShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetOrderRouterRevSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOrderRouterRevSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOrderRouterRevSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetMarketMapperRevenueShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetMarketMapperRevenueShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetMarketMapperRevShareDetailsForMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateUnconditionalRevShareConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Config.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateUnconditionalRevShareConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetOrderRouterRevShares) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.OrderRouterRevShares) > 0 {
		for _, e := range m.OrderRouterRevShares {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetOrderRouterRevSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetMarketMapperRevenueShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMarketMapperRevenueShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMarketMapperRevenueShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMarketMapperRevenueShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMarketMapperRevenueShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMarketMapperRevenueShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMarketMapperRevShareDetailsForMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMarketMapperRevShareDetailsForMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMarketMapperRevShareDetailsForMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMarketMapperRevShareDetailsForMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMarketMapperRevShareDetailsForMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMarketMapperRevShareDetailsForMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateUnconditionalRevShareConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateUnconditionalRevShareConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateUnconditionalRevShareConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateUnconditionalRevShareConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateUnconditionalRevShareConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateUnconditionalRevShareConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOrderRouterRevShares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOrderRouterRevShares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOrderRouterRevShares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderRouterRevShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderRouterRevShares = append(m.OrderRouterRevShares, OrderRouterRevShares{})
			if err := m.OrderRouterRevShares[len(m.OrderRouterRevShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOrderRouterRevSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOrderRouterRevSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOrderRouterRevSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
