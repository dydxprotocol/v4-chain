// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/prices/streaming.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StreamPriceUpdate provides information on a price update.
type StreamPriceUpdate struct {
	// The `Id` of the `Market`.
	MarketId uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The updated price.
	Price MarketPrice `protobuf:"bytes,2,opt,name=price,proto3" json:"price"`
	// Snapshot indicates if the response is from a snapshot of the price.
	Snapshot bool `protobuf:"varint,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (m *StreamPriceUpdate) Reset()         { *m = StreamPriceUpdate{} }
func (m *StreamPriceUpdate) String() string { return proto.CompactTextString(m) }
func (*StreamPriceUpdate) ProtoMessage()    {}
func (*StreamPriceUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_4061dbad169b98fa, []int{0}
}
func (m *StreamPriceUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamPriceUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamPriceUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamPriceUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamPriceUpdate.Merge(m, src)
}
func (m *StreamPriceUpdate) XXX_Size() int {
	return m.Size()
}
func (m *StreamPriceUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamPriceUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_StreamPriceUpdate proto.InternalMessageInfo

func (m *StreamPriceUpdate) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *StreamPriceUpdate) GetPrice() MarketPrice {
	if m != nil {
		return m.Price
	}
	return MarketPrice{}
}

func (m *StreamPriceUpdate) GetSnapshot() bool {
	if m != nil {
		return m.Snapshot
	}
	return false
}

func init() {
	proto.RegisterType((*StreamPriceUpdate)(nil), "dydxprotocol.prices.StreamPriceUpdate")
}

func init() {
	proto.RegisterFile("dydxprotocol/prices/streaming.proto", fileDescriptor_4061dbad169b98fa)
}

var fileDescriptor_4061dbad169b98fa = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0xa9, 0x4c, 0xa9,
	0x28, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x2f, 0x28, 0xca, 0x4c, 0x4e, 0x2d, 0xd6,
	0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xcd, 0xcc, 0x4b, 0xd7, 0x03, 0xcb, 0x08, 0x09, 0x23, 0x2b,
	0xd2, 0x83, 0x28, 0x92, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x0b, 0xea, 0x83, 0x58, 0x10, 0xa5,
	0x52, 0x6a, 0xd8, 0xcc, 0xcb, 0x4d, 0x2c, 0xca, 0x4e, 0x2d, 0x89, 0x07, 0xf3, 0x20, 0xea, 0x94,
	0xba, 0x18, 0xb9, 0x04, 0x83, 0xc1, 0xd6, 0x04, 0x80, 0x44, 0x43, 0x0b, 0x52, 0x12, 0x4b, 0x52,
	0x85, 0xa4, 0xb9, 0x38, 0xa1, 0x6a, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x83, 0x38,
	0x20, 0x02, 0x9e, 0x29, 0x42, 0x36, 0x5c, 0xac, 0x60, 0x13, 0x24, 0x98, 0x14, 0x18, 0x35, 0xb8,
	0x8d, 0x14, 0xf4, 0xb0, 0xb8, 0x4a, 0xcf, 0x17, 0xac, 0x1a, 0x6c, 0xa6, 0x13, 0xcb, 0x89, 0x7b,
	0xf2, 0x0c, 0x41, 0x10, 0x4d, 0x42, 0x52, 0x5c, 0x1c, 0xc5, 0x79, 0x89, 0x05, 0xc5, 0x19, 0xf9,
	0x25, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0x1c, 0x41, 0x70, 0xbe, 0x53, 0xd0, 0x89, 0x47, 0x72, 0x8c,
	0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72,
	0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x59, 0xa4, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7,
	0xe7, 0xea, 0xa3, 0xf8, 0xac, 0xcc, 0x44, 0x37, 0x39, 0x23, 0x31, 0x33, 0x4f, 0x1f, 0x2e, 0x52,
	0x01, 0xf3, 0x6d, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0x58, 0xc2, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0xc4, 0xc9, 0xfb, 0xd0, 0x61, 0x01, 0x00, 0x00,
}

func (m *StreamPriceUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamPriceUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamPriceUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Snapshot {
		i--
		if m.Snapshot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStreaming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.MarketId != 0 {
		i = encodeVarintStreaming(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStreaming(dAtA []byte, offset int, v uint64) int {
	offset -= sovStreaming(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamPriceUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovStreaming(uint64(m.MarketId))
	}
	l = m.Price.Size()
	n += 1 + l + sovStreaming(uint64(l))
	if m.Snapshot {
		n += 2
	}
	return n
}

func sovStreaming(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStreaming(x uint64) (n int) {
	return sovStreaming(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamPriceUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreaming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamPriceUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamPriceUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreaming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreaming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreaming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStreaming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreaming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Snapshot = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStreaming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStreaming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStreaming(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStreaming
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreaming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreaming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStreaming
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStreaming
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStreaming
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStreaming        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStreaming          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStreaming = fmt.Errorf("proto: unexpected end of group")
)
