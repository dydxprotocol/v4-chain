// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/perpetuals/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Queries a Perpetual by id.
type QueryPerpetualRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPerpetualRequest) Reset()         { *m = QueryPerpetualRequest{} }
func (m *QueryPerpetualRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualRequest) ProtoMessage()    {}
func (*QueryPerpetualRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{0}
}
func (m *QueryPerpetualRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualRequest.Merge(m, src)
}
func (m *QueryPerpetualRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualRequest proto.InternalMessageInfo

func (m *QueryPerpetualRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryPerpetualResponse is response type for the Perpetual RPC method.
type QueryPerpetualResponse struct {
	Perpetual Perpetual `protobuf:"bytes,1,opt,name=perpetual,proto3" json:"perpetual"`
}

func (m *QueryPerpetualResponse) Reset()         { *m = QueryPerpetualResponse{} }
func (m *QueryPerpetualResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualResponse) ProtoMessage()    {}
func (*QueryPerpetualResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{1}
}
func (m *QueryPerpetualResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualResponse.Merge(m, src)
}
func (m *QueryPerpetualResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualResponse proto.InternalMessageInfo

func (m *QueryPerpetualResponse) GetPerpetual() Perpetual {
	if m != nil {
		return m.Perpetual
	}
	return Perpetual{}
}

// Queries a list of Perpetual items.
type QueryAllPerpetualsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPerpetualsRequest) Reset()         { *m = QueryAllPerpetualsRequest{} }
func (m *QueryAllPerpetualsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPerpetualsRequest) ProtoMessage()    {}
func (*QueryAllPerpetualsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{2}
}
func (m *QueryAllPerpetualsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPerpetualsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPerpetualsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPerpetualsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPerpetualsRequest.Merge(m, src)
}
func (m *QueryAllPerpetualsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPerpetualsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPerpetualsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPerpetualsRequest proto.InternalMessageInfo

func (m *QueryAllPerpetualsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllPerpetualsResponse is response type for the AllPerpetuals RPC method.
type QueryAllPerpetualsResponse struct {
	Perpetual  []Perpetual         `protobuf:"bytes,1,rep,name=perpetual,proto3" json:"perpetual"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPerpetualsResponse) Reset()         { *m = QueryAllPerpetualsResponse{} }
func (m *QueryAllPerpetualsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPerpetualsResponse) ProtoMessage()    {}
func (*QueryAllPerpetualsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{3}
}
func (m *QueryAllPerpetualsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPerpetualsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPerpetualsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPerpetualsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPerpetualsResponse.Merge(m, src)
}
func (m *QueryAllPerpetualsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPerpetualsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPerpetualsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPerpetualsResponse proto.InternalMessageInfo

func (m *QueryAllPerpetualsResponse) GetPerpetual() []Perpetual {
	if m != nil {
		return m.Perpetual
	}
	return nil
}

func (m *QueryAllPerpetualsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Queries a list of LiquidityTier items.
type QueryAllLiquidityTiersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLiquidityTiersRequest) Reset()         { *m = QueryAllLiquidityTiersRequest{} }
func (m *QueryAllLiquidityTiersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiquidityTiersRequest) ProtoMessage()    {}
func (*QueryAllLiquidityTiersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{4}
}
func (m *QueryAllLiquidityTiersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiquidityTiersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiquidityTiersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiquidityTiersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiquidityTiersRequest.Merge(m, src)
}
func (m *QueryAllLiquidityTiersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiquidityTiersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiquidityTiersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiquidityTiersRequest proto.InternalMessageInfo

func (m *QueryAllLiquidityTiersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllLiquidityTiersResponse is response type for the AllLiquidityTiers RPC
// method.
type QueryAllLiquidityTiersResponse struct {
	LiquidityTiers []LiquidityTier     `protobuf:"bytes,1,rep,name=liquidity_tiers,json=liquidityTiers,proto3" json:"liquidity_tiers"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLiquidityTiersResponse) Reset()         { *m = QueryAllLiquidityTiersResponse{} }
func (m *QueryAllLiquidityTiersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiquidityTiersResponse) ProtoMessage()    {}
func (*QueryAllLiquidityTiersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{5}
}
func (m *QueryAllLiquidityTiersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiquidityTiersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiquidityTiersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiquidityTiersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiquidityTiersResponse.Merge(m, src)
}
func (m *QueryAllLiquidityTiersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiquidityTiersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiquidityTiersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiquidityTiersResponse proto.InternalMessageInfo

func (m *QueryAllLiquidityTiersResponse) GetLiquidityTiers() []LiquidityTier {
	if m != nil {
		return m.LiquidityTiers
	}
	return nil
}

func (m *QueryAllLiquidityTiersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPremiumVotesRequest is the request type for the PremiumVotes RPC method.
type QueryPremiumVotesRequest struct {
}

func (m *QueryPremiumVotesRequest) Reset()         { *m = QueryPremiumVotesRequest{} }
func (m *QueryPremiumVotesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPremiumVotesRequest) ProtoMessage()    {}
func (*QueryPremiumVotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{6}
}
func (m *QueryPremiumVotesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPremiumVotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPremiumVotesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPremiumVotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPremiumVotesRequest.Merge(m, src)
}
func (m *QueryPremiumVotesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPremiumVotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPremiumVotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPremiumVotesRequest proto.InternalMessageInfo

// QueryPremiumVotesResponse is the response type for the PremiumVotes RPC
// method.
type QueryPremiumVotesResponse struct {
	PremiumVotes PremiumStore `protobuf:"bytes,1,opt,name=premium_votes,json=premiumVotes,proto3" json:"premium_votes"`
}

func (m *QueryPremiumVotesResponse) Reset()         { *m = QueryPremiumVotesResponse{} }
func (m *QueryPremiumVotesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPremiumVotesResponse) ProtoMessage()    {}
func (*QueryPremiumVotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{7}
}
func (m *QueryPremiumVotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPremiumVotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPremiumVotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPremiumVotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPremiumVotesResponse.Merge(m, src)
}
func (m *QueryPremiumVotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPremiumVotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPremiumVotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPremiumVotesResponse proto.InternalMessageInfo

func (m *QueryPremiumVotesResponse) GetPremiumVotes() PremiumStore {
	if m != nil {
		return m.PremiumVotes
	}
	return PremiumStore{}
}

// QueryPremiumSamplesRequest is the request type for the PremiumSamples RPC
// method.
type QueryPremiumSamplesRequest struct {
}

func (m *QueryPremiumSamplesRequest) Reset()         { *m = QueryPremiumSamplesRequest{} }
func (m *QueryPremiumSamplesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPremiumSamplesRequest) ProtoMessage()    {}
func (*QueryPremiumSamplesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{8}
}
func (m *QueryPremiumSamplesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPremiumSamplesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPremiumSamplesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPremiumSamplesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPremiumSamplesRequest.Merge(m, src)
}
func (m *QueryPremiumSamplesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPremiumSamplesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPremiumSamplesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPremiumSamplesRequest proto.InternalMessageInfo

// QueryPremiumSamplesResponse is the response type for the PremiumSamples RPC
// method.
type QueryPremiumSamplesResponse struct {
	PremiumSamples PremiumStore `protobuf:"bytes,1,opt,name=premium_samples,json=premiumSamples,proto3" json:"premium_samples"`
}

func (m *QueryPremiumSamplesResponse) Reset()         { *m = QueryPremiumSamplesResponse{} }
func (m *QueryPremiumSamplesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPremiumSamplesResponse) ProtoMessage()    {}
func (*QueryPremiumSamplesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{9}
}
func (m *QueryPremiumSamplesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPremiumSamplesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPremiumSamplesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPremiumSamplesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPremiumSamplesResponse.Merge(m, src)
}
func (m *QueryPremiumSamplesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPremiumSamplesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPremiumSamplesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPremiumSamplesResponse proto.InternalMessageInfo

func (m *QueryPremiumSamplesResponse) GetPremiumSamples() PremiumStore {
	if m != nil {
		return m.PremiumSamples
	}
	return PremiumStore{}
}

// QueryParamsResponse is the response type for the Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{10}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13b6d29860ccef6b, []int{11}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryPerpetualRequest)(nil), "dydxprotocol.perpetuals.QueryPerpetualRequest")
	proto.RegisterType((*QueryPerpetualResponse)(nil), "dydxprotocol.perpetuals.QueryPerpetualResponse")
	proto.RegisterType((*QueryAllPerpetualsRequest)(nil), "dydxprotocol.perpetuals.QueryAllPerpetualsRequest")
	proto.RegisterType((*QueryAllPerpetualsResponse)(nil), "dydxprotocol.perpetuals.QueryAllPerpetualsResponse")
	proto.RegisterType((*QueryAllLiquidityTiersRequest)(nil), "dydxprotocol.perpetuals.QueryAllLiquidityTiersRequest")
	proto.RegisterType((*QueryAllLiquidityTiersResponse)(nil), "dydxprotocol.perpetuals.QueryAllLiquidityTiersResponse")
	proto.RegisterType((*QueryPremiumVotesRequest)(nil), "dydxprotocol.perpetuals.QueryPremiumVotesRequest")
	proto.RegisterType((*QueryPremiumVotesResponse)(nil), "dydxprotocol.perpetuals.QueryPremiumVotesResponse")
	proto.RegisterType((*QueryPremiumSamplesRequest)(nil), "dydxprotocol.perpetuals.QueryPremiumSamplesRequest")
	proto.RegisterType((*QueryPremiumSamplesResponse)(nil), "dydxprotocol.perpetuals.QueryPremiumSamplesResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "dydxprotocol.perpetuals.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dydxprotocol.perpetuals.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("dydxprotocol/perpetuals/query.proto", fileDescriptor_13b6d29860ccef6b)
}

var fileDescriptor_13b6d29860ccef6b = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xbf, 0x53, 0x13, 0x41,
	0x14, 0xc7, 0xb3, 0x51, 0x71, 0x78, 0x42, 0x18, 0x57, 0x54, 0x3c, 0xf1, 0xd0, 0x13, 0x09, 0xa2,
	0xde, 0x4a, 0x60, 0xb4, 0xd1, 0x42, 0x0a, 0x6c, 0x2c, 0x30, 0x22, 0x85, 0x0d, 0x5e, 0x92, 0x9d,
	0x63, 0x67, 0xee, 0xb2, 0xc7, 0xdd, 0x86, 0x21, 0xe3, 0xd8, 0x58, 0x5b, 0x38, 0x63, 0x6d, 0xa7,
	0x25, 0xad, 0xb5, 0x25, 0x25, 0x33, 0x36, 0x56, 0x8e, 0x03, 0xd6, 0xfe, 0x0d, 0x4e, 0x76, 0xf7,
	0x92, 0x3b, 0xc8, 0x91, 0x84, 0xa1, 0xcb, 0xec, 0xfb, 0xf1, 0xfd, 0xec, 0xf7, 0xf6, 0xbd, 0x09,
	0xdc, 0xae, 0x35, 0x6b, 0xdb, 0x41, 0xc8, 0x05, 0xaf, 0x72, 0x8f, 0x04, 0x34, 0x0c, 0xa8, 0x68,
	0x38, 0x5e, 0x44, 0x36, 0x1b, 0x34, 0x6c, 0xda, 0x32, 0x82, 0xaf, 0x26, 0x93, 0xec, 0x4e, 0x92,
	0x31, 0xee, 0x72, 0x97, 0xcb, 0x00, 0x69, 0xfd, 0x52, 0xe9, 0xc6, 0xa4, 0xcb, 0xb9, 0xeb, 0x51,
	0xe2, 0x04, 0x8c, 0x38, 0xf5, 0x3a, 0x17, 0x8e, 0x60, 0xbc, 0x1e, 0xe9, 0xe8, 0x5c, 0x95, 0x47,
	0x3e, 0x8f, 0x48, 0xc5, 0x89, 0xa8, 0x52, 0x21, 0x5b, 0xf3, 0x15, 0x2a, 0x9c, 0x79, 0x12, 0x38,
	0x2e, 0xab, 0xcb, 0x64, 0x9d, 0x3b, 0x9d, 0x45, 0x17, 0x38, 0xa1, 0xe3, 0xc7, 0x1d, 0x8b, 0x99,
	0x59, 0xf1, 0x4f, 0x95, 0x68, 0x15, 0xe1, 0xf2, 0xcb, 0x96, 0xe0, 0x4a, 0x7c, 0x5e, 0xa6, 0x9b,
	0x0d, 0x1a, 0x09, 0x5c, 0x80, 0x3c, 0xab, 0x4d, 0xa0, 0x9b, 0x68, 0x76, 0xb4, 0x9c, 0x67, 0x35,
	0xeb, 0x2d, 0x5c, 0x39, 0x9c, 0x18, 0x05, 0xbc, 0x1e, 0x51, 0xbc, 0x0c, 0xc3, 0xed, 0xae, 0xb2,
	0xe0, 0x42, 0xc9, 0xb2, 0x33, 0xec, 0xb1, 0xdb, 0xe5, 0x4b, 0x67, 0x77, 0x7f, 0x4f, 0xe5, 0xca,
	0x9d, 0x52, 0xab, 0x0a, 0xd7, 0xa4, 0xc2, 0x33, 0xcf, 0x6b, 0x67, 0x45, 0x31, 0xce, 0x32, 0x40,
	0xc7, 0x0a, 0xad, 0x32, 0x63, 0x2b, 0xdf, 0xec, 0x96, 0x6f, 0xb6, 0xfa, 0x3a, 0xda, 0x37, 0x7b,
	0xc5, 0x71, 0xa9, 0xae, 0x2d, 0x27, 0x2a, 0xad, 0x1d, 0x04, 0x46, 0x37, 0x95, 0xee, 0x77, 0x39,
	0x73, 0xc2, 0xbb, 0xe0, 0xe7, 0x29, 0xdc, 0xbc, 0xc4, 0x2d, 0xf6, 0xc4, 0x55, 0x10, 0x29, 0x5e,
	0x17, 0x6e, 0xc4, 0xb8, 0x2f, 0xd8, 0x66, 0x83, 0xd5, 0x98, 0x68, 0xae, 0x32, 0x1a, 0x9e, 0xba,
	0x31, 0x3f, 0x10, 0x98, 0x59, 0x4a, 0xda, 0x9c, 0xd7, 0x30, 0xe6, 0xc5, 0x91, 0x75, 0xd1, 0x0a,
	0x69, 0x8b, 0x66, 0x32, 0x2d, 0x4a, 0x75, 0xd2, 0x36, 0x15, 0xbc, 0x54, 0xfb, 0xd3, 0xf3, 0xca,
	0x80, 0x09, 0xf5, 0x44, 0x43, 0xea, 0xb3, 0x86, 0xbf, 0xc6, 0x05, 0x8d, 0x6d, 0xb2, 0x7c, 0xfd,
	0xb8, 0xd2, 0x31, 0x7d, 0xb1, 0x15, 0x18, 0x0d, 0xd4, 0xf9, 0xfa, 0x56, 0x2b, 0xa0, 0x6d, 0xbc,
	0x93, 0xfd, 0xe5, 0x55, 0xf6, 0x2b, 0xc1, 0x43, 0xaa, 0x6f, 0x35, 0x12, 0x24, 0x3a, 0x5b, 0x93,
	0xfa, 0x95, 0xc5, 0x89, 0x8e, 0x1f, 0x78, 0x1d, 0x98, 0x08, 0xae, 0x77, 0x8d, 0x6a, 0x9c, 0x55,
	0x18, 0x8b, 0x71, 0x22, 0x15, 0x3a, 0x09, 0x50, 0x21, 0x48, 0x75, 0xb7, 0xc6, 0x01, 0x2b, 0x51,
	0xb9, 0x27, 0x62, 0x94, 0x55, 0xb8, 0x94, 0x3a, 0xd5, 0x08, 0x4f, 0x61, 0x48, 0xed, 0x13, 0xad,
	0x3c, 0x95, 0xad, 0x2c, 0xd3, 0xb4, 0xa6, 0x2e, 0x2a, 0xfd, 0x3b, 0x0f, 0xe7, 0x64, 0x5b, 0xfc,
	0x05, 0xc1, 0x70, 0x7b, 0x4e, 0xb0, 0x9d, 0xd9, 0xa6, 0xeb, 0x12, 0x32, 0x48, 0xdf, 0xf9, 0x8a,
	0xdb, 0x22, 0x1f, 0x7e, 0xfe, 0xfd, 0x9c, 0xbf, 0x8b, 0x8b, 0xa4, 0xe7, 0x02, 0x24, 0xef, 0x58,
	0xed, 0x3d, 0xfe, 0x8a, 0x60, 0x34, 0xb5, 0x0a, 0x70, 0xe9, 0x78, 0xcd, 0x6e, 0xdb, 0xc9, 0x58,
	0x18, 0xa8, 0x46, 0xb3, 0xce, 0x49, 0xd6, 0x69, 0x6c, 0xf5, 0x66, 0xc5, 0xdf, 0x11, 0x5c, 0x3c,
	0x32, 0x98, 0xf8, 0x51, 0x4f, 0xd9, 0xae, 0x3b, 0xc3, 0x78, 0x3c, 0x70, 0x9d, 0x46, 0x7e, 0x28,
	0x91, 0xe7, 0xf0, 0x6c, 0x26, 0xf2, 0xa1, 0x05, 0x81, 0xbf, 0x21, 0x18, 0x49, 0xce, 0x1c, 0x9e,
	0xef, 0xf1, 0x49, 0x8f, 0xce, 0xae, 0x51, 0x1a, 0xa4, 0x44, 0x93, 0xda, 0x92, 0x74, 0x16, 0xcf,
	0x64, 0x9b, 0x9b, 0x9c, 0x78, 0xbc, 0x83, 0xa0, 0x90, 0x1e, 0x47, 0xbc, 0xd0, 0x97, 0x6c, 0x7a,
	0xb4, 0x8d, 0xc5, 0xc1, 0x8a, 0xfa, 0xf6, 0xf5, 0xd0, 0x42, 0xc0, 0x1f, 0x11, 0x0c, 0xa9, 0xd1,
	0xc3, 0xf7, 0x7a, 0x48, 0x26, 0xe7, 0xdd, 0xb8, 0xdf, 0x5f, 0xb2, 0xe6, 0x2a, 0x4a, 0xae, 0x5b,
	0x78, 0x8a, 0x1c, 0xff, 0xaf, 0x63, 0x69, 0x6d, 0x77, 0xdf, 0x44, 0x7b, 0xfb, 0x26, 0xfa, 0xb3,
	0x6f, 0xa2, 0x4f, 0x07, 0x66, 0x6e, 0xef, 0xc0, 0xcc, 0xfd, 0x3a, 0x30, 0x73, 0x6f, 0x9e, 0xb8,
	0x4c, 0x6c, 0x34, 0x2a, 0x76, 0x95, 0xfb, 0xe9, 0x26, 0x5b, 0x8b, 0x0f, 0xaa, 0x1b, 0x0e, 0xab,
	0x93, 0xf6, 0xc9, 0x76, 0xb2, 0xb1, 0x68, 0x06, 0x34, 0xaa, 0x0c, 0xc9, 0xe0, 0xc2, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xd7, 0x45, 0x0d, 0x89, 0x94, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a Perpetual by id.
	Perpetual(ctx context.Context, in *QueryPerpetualRequest, opts ...grpc.CallOption) (*QueryPerpetualResponse, error)
	// Queries a list of Perpetual items.
	AllPerpetuals(ctx context.Context, in *QueryAllPerpetualsRequest, opts ...grpc.CallOption) (*QueryAllPerpetualsResponse, error)
	// Queries a list of LiquidityTiers.
	AllLiquidityTiers(ctx context.Context, in *QueryAllLiquidityTiersRequest, opts ...grpc.CallOption) (*QueryAllLiquidityTiersResponse, error)
	// Queries a list of premium votes.
	PremiumVotes(ctx context.Context, in *QueryPremiumVotesRequest, opts ...grpc.CallOption) (*QueryPremiumVotesResponse, error)
	// Queries a list of premium samples.
	PremiumSamples(ctx context.Context, in *QueryPremiumSamplesRequest, opts ...grpc.CallOption) (*QueryPremiumSamplesResponse, error)
	// Queries the perpetual params.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Perpetual(ctx context.Context, in *QueryPerpetualRequest, opts ...grpc.CallOption) (*QueryPerpetualResponse, error) {
	out := new(QueryPerpetualResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Query/Perpetual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPerpetuals(ctx context.Context, in *QueryAllPerpetualsRequest, opts ...grpc.CallOption) (*QueryAllPerpetualsResponse, error) {
	out := new(QueryAllPerpetualsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Query/AllPerpetuals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllLiquidityTiers(ctx context.Context, in *QueryAllLiquidityTiersRequest, opts ...grpc.CallOption) (*QueryAllLiquidityTiersResponse, error) {
	out := new(QueryAllLiquidityTiersResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Query/AllLiquidityTiers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PremiumVotes(ctx context.Context, in *QueryPremiumVotesRequest, opts ...grpc.CallOption) (*QueryPremiumVotesResponse, error) {
	out := new(QueryPremiumVotesResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Query/PremiumVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PremiumSamples(ctx context.Context, in *QueryPremiumSamplesRequest, opts ...grpc.CallOption) (*QueryPremiumSamplesResponse, error) {
	out := new(QueryPremiumSamplesResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Query/PremiumSamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a Perpetual by id.
	Perpetual(context.Context, *QueryPerpetualRequest) (*QueryPerpetualResponse, error)
	// Queries a list of Perpetual items.
	AllPerpetuals(context.Context, *QueryAllPerpetualsRequest) (*QueryAllPerpetualsResponse, error)
	// Queries a list of LiquidityTiers.
	AllLiquidityTiers(context.Context, *QueryAllLiquidityTiersRequest) (*QueryAllLiquidityTiersResponse, error)
	// Queries a list of premium votes.
	PremiumVotes(context.Context, *QueryPremiumVotesRequest) (*QueryPremiumVotesResponse, error)
	// Queries a list of premium samples.
	PremiumSamples(context.Context, *QueryPremiumSamplesRequest) (*QueryPremiumSamplesResponse, error)
	// Queries the perpetual params.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Perpetual(ctx context.Context, req *QueryPerpetualRequest) (*QueryPerpetualResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Perpetual not implemented")
}
func (*UnimplementedQueryServer) AllPerpetuals(ctx context.Context, req *QueryAllPerpetualsRequest) (*QueryAllPerpetualsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPerpetuals not implemented")
}
func (*UnimplementedQueryServer) AllLiquidityTiers(ctx context.Context, req *QueryAllLiquidityTiersRequest) (*QueryAllLiquidityTiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllLiquidityTiers not implemented")
}
func (*UnimplementedQueryServer) PremiumVotes(ctx context.Context, req *QueryPremiumVotesRequest) (*QueryPremiumVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PremiumVotes not implemented")
}
func (*UnimplementedQueryServer) PremiumSamples(ctx context.Context, req *QueryPremiumSamplesRequest) (*QueryPremiumSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PremiumSamples not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Perpetual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Perpetual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Query/Perpetual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Perpetual(ctx, req.(*QueryPerpetualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPerpetuals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPerpetualsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPerpetuals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Query/AllPerpetuals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPerpetuals(ctx, req.(*QueryAllPerpetualsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllLiquidityTiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLiquidityTiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllLiquidityTiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Query/AllLiquidityTiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllLiquidityTiers(ctx, req.(*QueryAllLiquidityTiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PremiumVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPremiumVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PremiumVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Query/PremiumVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PremiumVotes(ctx, req.(*QueryPremiumVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PremiumSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPremiumSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PremiumSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Query/PremiumSamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PremiumSamples(ctx, req.(*QueryPremiumSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dydxprotocol.perpetuals.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Perpetual",
			Handler:    _Query_Perpetual_Handler,
		},
		{
			MethodName: "AllPerpetuals",
			Handler:    _Query_AllPerpetuals_Handler,
		},
		{
			MethodName: "AllLiquidityTiers",
			Handler:    _Query_AllLiquidityTiers_Handler,
		},
		{
			MethodName: "PremiumVotes",
			Handler:    _Query_PremiumVotes_Handler,
		},
		{
			MethodName: "PremiumSamples",
			Handler:    _Query_PremiumSamples_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dydxprotocol/perpetuals/query.proto",
}

func (m *QueryPerpetualRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Perpetual.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPerpetualsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPerpetualsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPerpetualsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPerpetualsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPerpetualsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPerpetualsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Perpetual) > 0 {
		for iNdEx := len(m.Perpetual) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Perpetual[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLiquidityTiersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiquidityTiersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiquidityTiersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLiquidityTiersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiquidityTiersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiquidityTiersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LiquidityTiers) > 0 {
		for iNdEx := len(m.LiquidityTiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityTiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPremiumVotesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPremiumVotesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPremiumVotesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPremiumVotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPremiumVotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPremiumVotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PremiumVotes.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPremiumSamplesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPremiumSamplesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPremiumSamplesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPremiumSamplesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPremiumSamplesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPremiumSamplesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PremiumSamples.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPerpetualRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryPerpetualResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Perpetual.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPerpetualsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPerpetualsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Perpetual) > 0 {
		for _, e := range m.Perpetual {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLiquidityTiersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLiquidityTiersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidityTiers) > 0 {
		for _, e := range m.LiquidityTiers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPremiumVotesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPremiumVotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PremiumVotes.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPremiumSamplesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPremiumSamplesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PremiumSamples.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPerpetualRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perpetual", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Perpetual.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPerpetualsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPerpetualsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPerpetualsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPerpetualsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPerpetualsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPerpetualsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perpetual", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Perpetual = append(m.Perpetual, Perpetual{})
			if err := m.Perpetual[len(m.Perpetual)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLiquidityTiersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiquidityTiersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiquidityTiersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLiquidityTiersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiquidityTiersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiquidityTiersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityTiers = append(m.LiquidityTiers, LiquidityTier{})
			if err := m.LiquidityTiers[len(m.LiquidityTiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPremiumVotesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPremiumVotesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPremiumVotesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPremiumVotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPremiumVotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPremiumVotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PremiumVotes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPremiumSamplesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPremiumSamplesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPremiumSamplesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPremiumSamplesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPremiumSamplesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPremiumSamplesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumSamples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PremiumSamples.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
