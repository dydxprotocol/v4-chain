// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/perpetuals/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreatePerpetual is a message used by x/gov to create a new perpetual.
type MsgCreatePerpetual struct {
	// The address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// `params` defines parameters for the new perpetual market.
	Params PerpetualParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgCreatePerpetual) Reset()         { *m = MsgCreatePerpetual{} }
func (m *MsgCreatePerpetual) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePerpetual) ProtoMessage()    {}
func (*MsgCreatePerpetual) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{0}
}
func (m *MsgCreatePerpetual) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePerpetual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePerpetual.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePerpetual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePerpetual.Merge(m, src)
}
func (m *MsgCreatePerpetual) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePerpetual) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePerpetual.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePerpetual proto.InternalMessageInfo

func (m *MsgCreatePerpetual) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCreatePerpetual) GetParams() PerpetualParams {
	if m != nil {
		return m.Params
	}
	return PerpetualParams{}
}

// MsgCreatePerpetualResponse defines the CreatePerpetual
// response type.
type MsgCreatePerpetualResponse struct {
}

func (m *MsgCreatePerpetualResponse) Reset()         { *m = MsgCreatePerpetualResponse{} }
func (m *MsgCreatePerpetualResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePerpetualResponse) ProtoMessage()    {}
func (*MsgCreatePerpetualResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{1}
}
func (m *MsgCreatePerpetualResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePerpetualResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePerpetualResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePerpetualResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePerpetualResponse.Merge(m, src)
}
func (m *MsgCreatePerpetualResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePerpetualResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePerpetualResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePerpetualResponse proto.InternalMessageInfo

// MsgSetLiquidityTier is a message used by x/gov to create or update a
// liquidity tier.
type MsgSetLiquidityTier struct {
	// The address that controls the module.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The liquidity tier to create or update.
	LiquidityTier LiquidityTier `protobuf:"bytes,2,opt,name=liquidity_tier,json=liquidityTier,proto3" json:"liquidity_tier"`
}

func (m *MsgSetLiquidityTier) Reset()         { *m = MsgSetLiquidityTier{} }
func (m *MsgSetLiquidityTier) String() string { return proto.CompactTextString(m) }
func (*MsgSetLiquidityTier) ProtoMessage()    {}
func (*MsgSetLiquidityTier) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{2}
}
func (m *MsgSetLiquidityTier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetLiquidityTier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetLiquidityTier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetLiquidityTier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetLiquidityTier.Merge(m, src)
}
func (m *MsgSetLiquidityTier) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetLiquidityTier) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetLiquidityTier.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetLiquidityTier proto.InternalMessageInfo

func (m *MsgSetLiquidityTier) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSetLiquidityTier) GetLiquidityTier() LiquidityTier {
	if m != nil {
		return m.LiquidityTier
	}
	return LiquidityTier{}
}

// MsgSetLiquidityTierResponse defines the SetLiquidityTier response type.
type MsgSetLiquidityTierResponse struct {
}

func (m *MsgSetLiquidityTierResponse) Reset()         { *m = MsgSetLiquidityTierResponse{} }
func (m *MsgSetLiquidityTierResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetLiquidityTierResponse) ProtoMessage()    {}
func (*MsgSetLiquidityTierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{3}
}
func (m *MsgSetLiquidityTierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetLiquidityTierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetLiquidityTierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetLiquidityTierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetLiquidityTierResponse.Merge(m, src)
}
func (m *MsgSetLiquidityTierResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetLiquidityTierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetLiquidityTierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetLiquidityTierResponse proto.InternalMessageInfo

// MsgUpdatePerpetualParams is a message used by x/gov to update the parameters
// of a perpetual.
type MsgUpdatePerpetualParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The perpetual to update. Each field must be set.
	PerpetualParams PerpetualParams `protobuf:"bytes,2,opt,name=perpetual_params,json=perpetualParams,proto3" json:"perpetual_params"`
}

func (m *MsgUpdatePerpetualParams) Reset()         { *m = MsgUpdatePerpetualParams{} }
func (m *MsgUpdatePerpetualParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePerpetualParams) ProtoMessage()    {}
func (*MsgUpdatePerpetualParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{4}
}
func (m *MsgUpdatePerpetualParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePerpetualParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePerpetualParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePerpetualParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePerpetualParams.Merge(m, src)
}
func (m *MsgUpdatePerpetualParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePerpetualParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePerpetualParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePerpetualParams proto.InternalMessageInfo

func (m *MsgUpdatePerpetualParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdatePerpetualParams) GetPerpetualParams() PerpetualParams {
	if m != nil {
		return m.PerpetualParams
	}
	return PerpetualParams{}
}

// MsgUpdatePerpetualParamsResponse defines the UpdatePerpetualParams
// response type.
type MsgUpdatePerpetualParamsResponse struct {
}

func (m *MsgUpdatePerpetualParamsResponse) Reset()         { *m = MsgUpdatePerpetualParamsResponse{} }
func (m *MsgUpdatePerpetualParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePerpetualParamsResponse) ProtoMessage()    {}
func (*MsgUpdatePerpetualParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{5}
}
func (m *MsgUpdatePerpetualParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePerpetualParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePerpetualParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePerpetualParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePerpetualParamsResponse.Merge(m, src)
}
func (m *MsgUpdatePerpetualParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePerpetualParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePerpetualParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePerpetualParamsResponse proto.InternalMessageInfo

// FundingPremium represents a funding premium value for a perpetual
// market. Can be used to represent a premium vote or a premium sample.
type FundingPremium struct {
	// The id of the perpetual market.
	PerpetualId uint32 `protobuf:"varint,1,opt,name=perpetual_id,json=perpetualId,proto3" json:"perpetual_id,omitempty"`
	// The sampled premium rate. In parts-per-million.
	PremiumPpm int32 `protobuf:"varint,2,opt,name=premium_ppm,json=premiumPpm,proto3" json:"premium_ppm,omitempty"`
}

func (m *FundingPremium) Reset()         { *m = FundingPremium{} }
func (m *FundingPremium) String() string { return proto.CompactTextString(m) }
func (*FundingPremium) ProtoMessage()    {}
func (*FundingPremium) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{6}
}
func (m *FundingPremium) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundingPremium) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundingPremium.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundingPremium) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundingPremium.Merge(m, src)
}
func (m *FundingPremium) XXX_Size() int {
	return m.Size()
}
func (m *FundingPremium) XXX_DiscardUnknown() {
	xxx_messageInfo_FundingPremium.DiscardUnknown(m)
}

var xxx_messageInfo_FundingPremium proto.InternalMessageInfo

func (m *FundingPremium) GetPerpetualId() uint32 {
	if m != nil {
		return m.PerpetualId
	}
	return 0
}

func (m *FundingPremium) GetPremiumPpm() int32 {
	if m != nil {
		return m.PremiumPpm
	}
	return 0
}

// MsgAddPremiumVotes is a request type for the AddPremiumVotes method.
type MsgAddPremiumVotes struct {
	Votes []FundingPremium `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes"`
}

func (m *MsgAddPremiumVotes) Reset()         { *m = MsgAddPremiumVotes{} }
func (m *MsgAddPremiumVotes) String() string { return proto.CompactTextString(m) }
func (*MsgAddPremiumVotes) ProtoMessage()    {}
func (*MsgAddPremiumVotes) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{7}
}
func (m *MsgAddPremiumVotes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddPremiumVotes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddPremiumVotes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddPremiumVotes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddPremiumVotes.Merge(m, src)
}
func (m *MsgAddPremiumVotes) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddPremiumVotes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddPremiumVotes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddPremiumVotes proto.InternalMessageInfo

func (m *MsgAddPremiumVotes) GetVotes() []FundingPremium {
	if m != nil {
		return m.Votes
	}
	return nil
}

// MsgAddPremiumVotesResponse defines the AddPremiumVotes
// response type.
type MsgAddPremiumVotesResponse struct {
}

func (m *MsgAddPremiumVotesResponse) Reset()         { *m = MsgAddPremiumVotesResponse{} }
func (m *MsgAddPremiumVotesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddPremiumVotesResponse) ProtoMessage()    {}
func (*MsgAddPremiumVotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{8}
}
func (m *MsgAddPremiumVotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddPremiumVotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddPremiumVotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddPremiumVotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddPremiumVotesResponse.Merge(m, src)
}
func (m *MsgAddPremiumVotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddPremiumVotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddPremiumVotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddPremiumVotesResponse proto.InternalMessageInfo

// MsgUpdateParams is a message used by x/gov to update the parameters of the
// perpetuals module.
type MsgUpdateParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The parameters to update. Each field must be set.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{9}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the UpdateParams response type.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{10}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgUpgradeIsolatedPerpetualToCross is used to upgrade a market from
// isolated margin to cross margin.
type MsgUpgradeIsolatedPerpetualToCross struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// ID of the perpetual to be upgraded to CROSS
	PerpetualId uint32 `protobuf:"varint,2,opt,name=perpetual_id,json=perpetualId,proto3" json:"perpetual_id,omitempty"`
}

func (m *MsgUpgradeIsolatedPerpetualToCross) Reset()         { *m = MsgUpgradeIsolatedPerpetualToCross{} }
func (m *MsgUpgradeIsolatedPerpetualToCross) String() string { return proto.CompactTextString(m) }
func (*MsgUpgradeIsolatedPerpetualToCross) ProtoMessage()    {}
func (*MsgUpgradeIsolatedPerpetualToCross) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{11}
}
func (m *MsgUpgradeIsolatedPerpetualToCross) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradeIsolatedPerpetualToCross) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCross.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradeIsolatedPerpetualToCross) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCross.Merge(m, src)
}
func (m *MsgUpgradeIsolatedPerpetualToCross) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradeIsolatedPerpetualToCross) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCross.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCross proto.InternalMessageInfo

func (m *MsgUpgradeIsolatedPerpetualToCross) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpgradeIsolatedPerpetualToCross) GetPerpetualId() uint32 {
	if m != nil {
		return m.PerpetualId
	}
	return 0
}

// MsgUpgradeIsolatedPerpetualToCrossResponse defines the
// UpgradeIsolatedPerpetualToCross response type.
type MsgUpgradeIsolatedPerpetualToCrossResponse struct {
}

func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) Reset() {
	*m = MsgUpgradeIsolatedPerpetualToCrossResponse{}
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpgradeIsolatedPerpetualToCrossResponse) ProtoMessage() {}
func (*MsgUpgradeIsolatedPerpetualToCrossResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_daed24c15760c356, []int{12}
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCrossResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCrossResponse.Merge(m, src)
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCrossResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradeIsolatedPerpetualToCrossResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreatePerpetual)(nil), "dydxprotocol.perpetuals.MsgCreatePerpetual")
	proto.RegisterType((*MsgCreatePerpetualResponse)(nil), "dydxprotocol.perpetuals.MsgCreatePerpetualResponse")
	proto.RegisterType((*MsgSetLiquidityTier)(nil), "dydxprotocol.perpetuals.MsgSetLiquidityTier")
	proto.RegisterType((*MsgSetLiquidityTierResponse)(nil), "dydxprotocol.perpetuals.MsgSetLiquidityTierResponse")
	proto.RegisterType((*MsgUpdatePerpetualParams)(nil), "dydxprotocol.perpetuals.MsgUpdatePerpetualParams")
	proto.RegisterType((*MsgUpdatePerpetualParamsResponse)(nil), "dydxprotocol.perpetuals.MsgUpdatePerpetualParamsResponse")
	proto.RegisterType((*FundingPremium)(nil), "dydxprotocol.perpetuals.FundingPremium")
	proto.RegisterType((*MsgAddPremiumVotes)(nil), "dydxprotocol.perpetuals.MsgAddPremiumVotes")
	proto.RegisterType((*MsgAddPremiumVotesResponse)(nil), "dydxprotocol.perpetuals.MsgAddPremiumVotesResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "dydxprotocol.perpetuals.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "dydxprotocol.perpetuals.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgUpgradeIsolatedPerpetualToCross)(nil), "dydxprotocol.perpetuals.MsgUpgradeIsolatedPerpetualToCross")
	proto.RegisterType((*MsgUpgradeIsolatedPerpetualToCrossResponse)(nil), "dydxprotocol.perpetuals.MsgUpgradeIsolatedPerpetualToCrossResponse")
}

func init() { proto.RegisterFile("dydxprotocol/perpetuals/tx.proto", fileDescriptor_daed24c15760c356) }

var fileDescriptor_daed24c15760c356 = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6b, 0x13, 0x41,
	0x14, 0xcf, 0xb4, 0xb6, 0xd0, 0x97, 0x7e, 0xb1, 0x56, 0x9a, 0xae, 0x9a, 0xc4, 0x20, 0x36, 0xd4,
	0x36, 0x6b, 0x3f, 0x10, 0xfc, 0x3a, 0xb4, 0x81, 0x42, 0xc1, 0x40, 0x48, 0x6b, 0xa1, 0x5e, 0xc2,
	0x36, 0x33, 0x6c, 0x57, 0xb2, 0x99, 0x71, 0x66, 0x12, 0x9a, 0xa3, 0x82, 0x67, 0x3d, 0x7a, 0xd7,
	0x3f, 0x40, 0xc4, 0xab, 0xf7, 0x1e, 0x8b, 0x27, 0x4f, 0x22, 0xed, 0xc1, 0x7f, 0x43, 0xb2, 0x1f,
	0x93, 0x66, 0xb7, 0x9b, 0x7e, 0xe4, 0xb4, 0xb3, 0xef, 0xfd, 0xde, 0xfb, 0xfd, 0x7e, 0xf3, 0x76,
	0x86, 0x85, 0x2c, 0x6e, 0xe3, 0x43, 0xc6, 0xa9, 0xa4, 0x35, 0x5a, 0x37, 0x18, 0xe1, 0x8c, 0xc8,
	0xa6, 0x59, 0x17, 0x86, 0x3c, 0x2c, 0xb8, 0x61, 0x6d, 0xf6, 0x2c, 0xa2, 0xd0, 0x45, 0xe8, 0x73,
	0x35, 0x2a, 0x1c, 0x2a, 0xaa, 0x6e, 0xce, 0xf0, 0x5e, 0xbc, 0x1a, 0x7d, 0xd6, 0x7b, 0x33, 0x1c,
	0x61, 0x19, 0xad, 0xe5, 0xce, 0xc3, 0x4f, 0xcc, 0x58, 0xd4, 0xa2, 0x5e, 0x41, 0x67, 0xe5, 0x47,
	0xef, 0xc7, 0x89, 0x60, 0x26, 0x37, 0x9d, 0xa0, 0xe9, 0x7c, 0x2c, 0x2a, 0x58, 0x7a, 0xc0, 0xdc,
	0x57, 0x04, 0x5a, 0x49, 0x58, 0x45, 0x4e, 0x4c, 0x49, 0xca, 0x41, 0x52, 0x7b, 0x0c, 0x63, 0x66,
	0x53, 0x1e, 0x50, 0x6e, 0xcb, 0x76, 0x0a, 0x65, 0x51, 0x7e, 0x6c, 0x23, 0xf5, 0xeb, 0xc7, 0xd2,
	0x8c, 0xaf, 0x7c, 0x1d, 0x63, 0x4e, 0x84, 0xd8, 0x96, 0xdc, 0x6e, 0x58, 0x95, 0x2e, 0x54, 0xdb,
	0x84, 0x51, 0x4f, 0x47, 0x6a, 0x28, 0x8b, 0xf2, 0xc9, 0x95, 0x7c, 0x21, 0x66, 0x47, 0x0a, 0x8a,
	0xab, 0xec, 0xe2, 0x37, 0x6e, 0x1c, 0xfd, 0xc9, 0x24, 0x2a, 0x7e, 0xf5, 0xd3, 0xc9, 0xf7, 0xff,
	0xbe, 0x2d, 0x74, 0xfb, 0xe6, 0xee, 0x80, 0x1e, 0x55, 0x59, 0x21, 0x82, 0xd1, 0x86, 0x20, 0xb9,
	0xef, 0x08, 0x6e, 0x96, 0x84, 0xb5, 0x4d, 0xe4, 0x4b, 0xfb, 0x6d, 0xd3, 0xc6, 0xb6, 0x6c, 0xef,
	0xd8, 0x84, 0x5f, 0xdb, 0xc5, 0x36, 0x4c, 0xd6, 0x83, 0x46, 0x55, 0x69, 0x13, 0xee, 0xbb, 0x79,
	0x10, 0xeb, 0xa6, 0x87, 0xd7, 0xf7, 0x32, 0x51, 0x3f, 0x1b, 0x8c, 0x58, 0xba, 0x0b, 0xb7, 0xcf,
	0xd1, 0xac, 0x3c, 0xfd, 0x44, 0x90, 0x2a, 0x09, 0xeb, 0x15, 0xc3, 0x67, 0x2d, 0x7b, 0x9b, 0x75,
	0x6d, 0x63, 0x7b, 0x30, 0xad, 0x44, 0x57, 0x07, 0x1a, 0xd4, 0x14, 0xeb, 0x0d, 0x47, 0xec, 0xe5,
	0x20, 0x1b, 0x27, 0x5f, 0x79, 0xdc, 0x81, 0xc9, 0xcd, 0x66, 0x03, 0xdb, 0x0d, 0xab, 0xcc, 0x89,
	0x63, 0x37, 0x1d, 0xed, 0x1e, 0x8c, 0x77, 0x05, 0xda, 0xd8, 0xf5, 0x36, 0x51, 0x49, 0xaa, 0xd8,
	0x16, 0xd6, 0x32, 0x90, 0x64, 0x1e, 0xba, 0xca, 0x98, 0xe3, 0xca, 0x1f, 0xa9, 0x80, 0x1f, 0x2a,
	0x33, 0x27, 0xb7, 0xe7, 0x7e, 0xd1, 0xeb, 0x18, 0xfb, 0x4d, 0x77, 0xa9, 0x24, 0x42, 0x2b, 0xc2,
	0x48, 0xab, 0xb3, 0x48, 0xa1, 0xec, 0x70, 0x3e, 0xb9, 0x32, 0x1f, 0xeb, 0xb7, 0x57, 0x91, 0x6f,
	0xd7, 0xab, 0xf5, 0x3f, 0xc3, 0x50, 0x6b, 0x65, 0xe7, 0x33, 0x82, 0xa9, 0xae, 0xe7, 0xc1, 0x26,
	0xf5, 0x22, 0x74, 0x90, 0x32, 0xf1, 0xf3, 0xb9, 0xcc, 0xf9, 0x99, 0x83, 0xd9, 0x90, 0x32, 0xa5,
	0xfa, 0x23, 0x82, 0x9c, 0x9b, 0xb3, 0xb8, 0x89, 0xc9, 0x96, 0xa0, 0x75, 0x53, 0x12, 0xac, 0x46,
	0xb6, 0x43, 0x8b, 0x9c, 0x8a, 0xeb, 0x1b, 0x09, 0x4f, 0x74, 0x28, 0x32, 0xd1, 0x88, 0xd8, 0x45,
	0x58, 0xb8, 0x58, 0x50, 0xa0, 0x7f, 0xe5, 0xdd, 0x28, 0x0c, 0x97, 0x84, 0xa5, 0x09, 0x98, 0x0a,
	0xcf, 0xfc, 0x61, 0xec, 0xa6, 0x45, 0xa7, 0xa8, 0xaf, 0x5e, 0x01, 0x1c, 0x90, 0x77, 0x48, 0xc3,
	0x57, 0x67, 0x5f, 0xd2, 0x10, 0xb8, 0x3f, 0x69, 0xcc, 0x75, 0xa7, 0xb5, 0x60, 0x3a, 0x72, 0xd5,
	0x2d, 0xf6, 0x6b, 0x14, 0x46, 0xeb, 0x6b, 0x57, 0x41, 0x2b, 0xde, 0x0f, 0x08, 0x6e, 0x9d, 0x7f,
	0x1f, 0x2d, 0xf7, 0xeb, 0x77, 0x6e, 0x89, 0xfe, 0xe4, 0xca, 0x25, 0x4a, 0xc7, 0x1b, 0x18, 0xef,
	0x39, 0x63, 0xf9, 0x4b, 0xb4, 0xf2, 0x48, 0x1f, 0x5d, 0x16, 0xa9, 0xb8, 0xbe, 0x20, 0xc8, 0x5c,
	0x74, 0x34, 0x9e, 0xf5, 0xef, 0xda, 0xb7, 0x58, 0x2f, 0x0e, 0x50, 0x1c, 0xa8, 0xdc, 0xd8, 0x3d,
	0x3a, 0x49, 0xa3, 0xe3, 0x93, 0x34, 0xfa, 0x7b, 0x92, 0x46, 0x9f, 0x4e, 0xd3, 0x89, 0xe3, 0xd3,
	0x74, 0xe2, 0xf7, 0x69, 0x3a, 0xf1, 0xfa, 0xb9, 0x65, 0xcb, 0x83, 0xe6, 0x7e, 0xa1, 0x46, 0x1d,
	0xa3, 0xe7, 0x9f, 0xa0, 0xb5, 0xb6, 0x54, 0x3b, 0x30, 0xed, 0x86, 0xa1, 0x22, 0x87, 0x3d, 0xbf,
	0x34, 0x6d, 0x46, 0xc4, 0xfe, 0xa8, 0x9b, 0x5c, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xd1,
	0x34, 0xcd, 0xfa, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// AddPremiumVotes add new samples of the funding premiums to the
	// application.
	AddPremiumVotes(ctx context.Context, in *MsgAddPremiumVotes, opts ...grpc.CallOption) (*MsgAddPremiumVotesResponse, error)
	// CreatePerpetual creates a new perpetual object.
	CreatePerpetual(ctx context.Context, in *MsgCreatePerpetual, opts ...grpc.CallOption) (*MsgCreatePerpetualResponse, error)
	// SetLiquidityTier creates an liquidity tier if the ID doesn't exist, and
	// updates the existing liquidity tier otherwise.
	SetLiquidityTier(ctx context.Context, in *MsgSetLiquidityTier, opts ...grpc.CallOption) (*MsgSetLiquidityTierResponse, error)
	// UpdatePerpetualParams updates the parameters of a perpetual market.
	UpdatePerpetualParams(ctx context.Context, in *MsgUpdatePerpetualParams, opts ...grpc.CallOption) (*MsgUpdatePerpetualParamsResponse, error)
	// UpdateParams updates the parameters of perpetuals module.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// UpgradeIsolatedPerpetualToCross upgrades a perpetual from isolated to cross margin.
	UpgradeIsolatedPerpetualToCross(ctx context.Context, in *MsgUpgradeIsolatedPerpetualToCross, opts ...grpc.CallOption) (*MsgUpgradeIsolatedPerpetualToCrossResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddPremiumVotes(ctx context.Context, in *MsgAddPremiumVotes, opts ...grpc.CallOption) (*MsgAddPremiumVotesResponse, error) {
	out := new(MsgAddPremiumVotesResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Msg/AddPremiumVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePerpetual(ctx context.Context, in *MsgCreatePerpetual, opts ...grpc.CallOption) (*MsgCreatePerpetualResponse, error) {
	out := new(MsgCreatePerpetualResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Msg/CreatePerpetual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetLiquidityTier(ctx context.Context, in *MsgSetLiquidityTier, opts ...grpc.CallOption) (*MsgSetLiquidityTierResponse, error) {
	out := new(MsgSetLiquidityTierResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Msg/SetLiquidityTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePerpetualParams(ctx context.Context, in *MsgUpdatePerpetualParams, opts ...grpc.CallOption) (*MsgUpdatePerpetualParamsResponse, error) {
	out := new(MsgUpdatePerpetualParamsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Msg/UpdatePerpetualParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpgradeIsolatedPerpetualToCross(ctx context.Context, in *MsgUpgradeIsolatedPerpetualToCross, opts ...grpc.CallOption) (*MsgUpgradeIsolatedPerpetualToCrossResponse, error) {
	out := new(MsgUpgradeIsolatedPerpetualToCrossResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.perpetuals.Msg/UpgradeIsolatedPerpetualToCross", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// AddPremiumVotes add new samples of the funding premiums to the
	// application.
	AddPremiumVotes(context.Context, *MsgAddPremiumVotes) (*MsgAddPremiumVotesResponse, error)
	// CreatePerpetual creates a new perpetual object.
	CreatePerpetual(context.Context, *MsgCreatePerpetual) (*MsgCreatePerpetualResponse, error)
	// SetLiquidityTier creates an liquidity tier if the ID doesn't exist, and
	// updates the existing liquidity tier otherwise.
	SetLiquidityTier(context.Context, *MsgSetLiquidityTier) (*MsgSetLiquidityTierResponse, error)
	// UpdatePerpetualParams updates the parameters of a perpetual market.
	UpdatePerpetualParams(context.Context, *MsgUpdatePerpetualParams) (*MsgUpdatePerpetualParamsResponse, error)
	// UpdateParams updates the parameters of perpetuals module.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// UpgradeIsolatedPerpetualToCross upgrades a perpetual from isolated to cross margin.
	UpgradeIsolatedPerpetualToCross(context.Context, *MsgUpgradeIsolatedPerpetualToCross) (*MsgUpgradeIsolatedPerpetualToCrossResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddPremiumVotes(ctx context.Context, req *MsgAddPremiumVotes) (*MsgAddPremiumVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPremiumVotes not implemented")
}
func (*UnimplementedMsgServer) CreatePerpetual(ctx context.Context, req *MsgCreatePerpetual) (*MsgCreatePerpetualResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerpetual not implemented")
}
func (*UnimplementedMsgServer) SetLiquidityTier(ctx context.Context, req *MsgSetLiquidityTier) (*MsgSetLiquidityTierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLiquidityTier not implemented")
}
func (*UnimplementedMsgServer) UpdatePerpetualParams(ctx context.Context, req *MsgUpdatePerpetualParams) (*MsgUpdatePerpetualParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerpetualParams not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) UpgradeIsolatedPerpetualToCross(ctx context.Context, req *MsgUpgradeIsolatedPerpetualToCross) (*MsgUpgradeIsolatedPerpetualToCrossResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeIsolatedPerpetualToCross not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddPremiumVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddPremiumVotes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddPremiumVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Msg/AddPremiumVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddPremiumVotes(ctx, req.(*MsgAddPremiumVotes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePerpetual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePerpetual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePerpetual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Msg/CreatePerpetual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePerpetual(ctx, req.(*MsgCreatePerpetual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetLiquidityTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetLiquidityTier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetLiquidityTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Msg/SetLiquidityTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetLiquidityTier(ctx, req.(*MsgSetLiquidityTier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePerpetualParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePerpetualParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePerpetualParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Msg/UpdatePerpetualParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePerpetualParams(ctx, req.(*MsgUpdatePerpetualParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpgradeIsolatedPerpetualToCross_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpgradeIsolatedPerpetualToCross)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpgradeIsolatedPerpetualToCross(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.perpetuals.Msg/UpgradeIsolatedPerpetualToCross",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpgradeIsolatedPerpetualToCross(ctx, req.(*MsgUpgradeIsolatedPerpetualToCross))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dydxprotocol.perpetuals.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPremiumVotes",
			Handler:    _Msg_AddPremiumVotes_Handler,
		},
		{
			MethodName: "CreatePerpetual",
			Handler:    _Msg_CreatePerpetual_Handler,
		},
		{
			MethodName: "SetLiquidityTier",
			Handler:    _Msg_SetLiquidityTier_Handler,
		},
		{
			MethodName: "UpdatePerpetualParams",
			Handler:    _Msg_UpdatePerpetualParams_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UpgradeIsolatedPerpetualToCross",
			Handler:    _Msg_UpgradeIsolatedPerpetualToCross_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dydxprotocol/perpetuals/tx.proto",
}

func (m *MsgCreatePerpetual) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePerpetual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePerpetual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePerpetualResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePerpetualResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePerpetualResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetLiquidityTier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetLiquidityTier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetLiquidityTier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LiquidityTier.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetLiquidityTierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetLiquidityTierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetLiquidityTierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePerpetualParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePerpetualParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePerpetualParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PerpetualParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePerpetualParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePerpetualParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePerpetualParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FundingPremium) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundingPremium) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundingPremium) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PremiumPpm != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PremiumPpm))
		i--
		dAtA[i] = 0x10
	}
	if m.PerpetualId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PerpetualId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddPremiumVotes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddPremiumVotes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddPremiumVotes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Votes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddPremiumVotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddPremiumVotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddPremiumVotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpgradeIsolatedPerpetualToCross) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradeIsolatedPerpetualToCross) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradeIsolatedPerpetualToCross) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerpetualId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PerpetualId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreatePerpetual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreatePerpetualResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetLiquidityTier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.LiquidityTier.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetLiquidityTierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdatePerpetualParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.PerpetualParams.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdatePerpetualParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FundingPremium) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerpetualId != 0 {
		n += 1 + sovTx(uint64(m.PerpetualId))
	}
	if m.PremiumPpm != 0 {
		n += 1 + sovTx(uint64(m.PremiumPpm))
	}
	return n
}

func (m *MsgAddPremiumVotes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for _, e := range m.Votes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddPremiumVotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpgradeIsolatedPerpetualToCross) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PerpetualId != 0 {
		n += 1 + sovTx(uint64(m.PerpetualId))
	}
	return n
}

func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreatePerpetual) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePerpetual: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePerpetual: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePerpetualResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePerpetualResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePerpetualResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetLiquidityTier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetLiquidityTier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetLiquidityTier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityTier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityTier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetLiquidityTierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetLiquidityTierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetLiquidityTierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePerpetualParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePerpetualParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePerpetualParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerpetualParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePerpetualParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePerpetualParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePerpetualParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundingPremium) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundingPremium: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundingPremium: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualId", wireType)
			}
			m.PerpetualId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumPpm", wireType)
			}
			m.PremiumPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PremiumPpm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddPremiumVotes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddPremiumVotes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddPremiumVotes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, FundingPremium{})
			if err := m.Votes[len(m.Votes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddPremiumVotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddPremiumVotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddPremiumVotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradeIsolatedPerpetualToCross) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradeIsolatedPerpetualToCross: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradeIsolatedPerpetualToCross: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualId", wireType)
			}
			m.PerpetualId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradeIsolatedPerpetualToCrossResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradeIsolatedPerpetualToCrossResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradeIsolatedPerpetualToCrossResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
