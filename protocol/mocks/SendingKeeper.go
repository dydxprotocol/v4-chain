// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	types "github.com/cosmos/cosmos-sdk/types"
	sendingtypes "github.com/dydxprotocol/v4-chain/protocol/x/sending/types"
	mock "github.com/stretchr/testify/mock"
)

// SendingKeeper is an autogenerated mock type for the SendingKeeper type
type SendingKeeper struct {
	mock.Mock
}

// ProcessDepositToSubaccount provides a mock function with given fields: ctx, msgDepositToSubaccount
func (_m *SendingKeeper) ProcessDepositToSubaccount(ctx types.Context, msgDepositToSubaccount *sendingtypes.MsgDepositToSubaccount) error {
	ret := _m.Called(ctx, msgDepositToSubaccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *sendingtypes.MsgDepositToSubaccount) error); ok {
		r0 = rf(ctx, msgDepositToSubaccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessTransfer provides a mock function with given fields: ctx, transfer
func (_m *SendingKeeper) ProcessTransfer(ctx types.Context, transfer *sendingtypes.Transfer) error {
	ret := _m.Called(ctx, transfer)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *sendingtypes.Transfer) error); ok {
		r0 = rf(ctx, transfer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessWithdrawFromSubaccount provides a mock function with given fields: ctx, msgWithdrawFromSubaccount
func (_m *SendingKeeper) ProcessWithdrawFromSubaccount(ctx types.Context, msgWithdrawFromSubaccount *sendingtypes.MsgWithdrawFromSubaccount) error {
	ret := _m.Called(ctx, msgWithdrawFromSubaccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *sendingtypes.MsgWithdrawFromSubaccount) error); ok {
		r0 = rf(ctx, msgWithdrawFromSubaccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSendingKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewSendingKeeper creates a new instance of SendingKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSendingKeeper(t mockConstructorTestingTNewSendingKeeper) *SendingKeeper {
	mock := &SendingKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
