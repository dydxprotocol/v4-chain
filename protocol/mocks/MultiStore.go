// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	io "io"

	types "cosmossdk.io/store/types"
	mock "github.com/stretchr/testify/mock"
)

// MultiStore is an autogenerated mock type for the MultiStore type
type MultiStore struct {
	mock.Mock
}

// CacheMultiStore provides a mock function with given fields:
func (_m *MultiStore) CacheMultiStore() types.CacheMultiStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CacheMultiStore")
	}

	var r0 types.CacheMultiStore
	if rf, ok := ret.Get(0).(func() types.CacheMultiStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CacheMultiStore)
		}
	}

	return r0
}

// CacheMultiStoreWithVersion provides a mock function with given fields: version
func (_m *MultiStore) CacheMultiStoreWithVersion(version int64) (types.CacheMultiStore, error) {
	ret := _m.Called(version)

	if len(ret) == 0 {
		panic("no return value specified for CacheMultiStoreWithVersion")
	}

	var r0 types.CacheMultiStore
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (types.CacheMultiStore, error)); ok {
		return rf(version)
	}
	if rf, ok := ret.Get(0).(func(int64) types.CacheMultiStore); ok {
		r0 = rf(version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CacheMultiStore)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheWrap provides a mock function with given fields:
func (_m *MultiStore) CacheWrap() types.CacheWrap {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CacheWrap")
	}

	var r0 types.CacheWrap
	if rf, ok := ret.Get(0).(func() types.CacheWrap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CacheWrap)
		}
	}

	return r0
}

// CacheWrapWithTrace provides a mock function with given fields: w, tc
func (_m *MultiStore) CacheWrapWithTrace(w io.Writer, tc types.TraceContext) types.CacheWrap {
	ret := _m.Called(w, tc)

	if len(ret) == 0 {
		panic("no return value specified for CacheWrapWithTrace")
	}

	var r0 types.CacheWrap
	if rf, ok := ret.Get(0).(func(io.Writer, types.TraceContext) types.CacheWrap); ok {
		r0 = rf(w, tc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CacheWrap)
		}
	}

	return r0
}

// GetKVStore provides a mock function with given fields: _a0
func (_m *MultiStore) GetKVStore(_a0 types.StoreKey) types.KVStore {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetKVStore")
	}

	var r0 types.KVStore
	if rf, ok := ret.Get(0).(func(types.StoreKey) types.KVStore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.KVStore)
		}
	}

	return r0
}

// GetStore provides a mock function with given fields: _a0
func (_m *MultiStore) GetStore(_a0 types.StoreKey) types.Store {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetStore")
	}

	var r0 types.Store
	if rf, ok := ret.Get(0).(func(types.StoreKey) types.Store); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Store)
		}
	}

	return r0
}

// GetStoreType provides a mock function with given fields:
func (_m *MultiStore) GetStoreType() types.StoreType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoreType")
	}

	var r0 types.StoreType
	if rf, ok := ret.Get(0).(func() types.StoreType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.StoreType)
	}

	return r0
}

// LatestVersion provides a mock function with given fields:
func (_m *MultiStore) LatestVersion() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LatestVersion")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SetTracer provides a mock function with given fields: w
func (_m *MultiStore) SetTracer(w io.Writer) types.MultiStore {
	ret := _m.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for SetTracer")
	}

	var r0 types.MultiStore
	if rf, ok := ret.Get(0).(func(io.Writer) types.MultiStore); ok {
		r0 = rf(w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.MultiStore)
		}
	}

	return r0
}

// SetTracingContext provides a mock function with given fields: _a0
func (_m *MultiStore) SetTracingContext(_a0 types.TraceContext) types.MultiStore {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetTracingContext")
	}

	var r0 types.MultiStore
	if rf, ok := ret.Get(0).(func(types.TraceContext) types.MultiStore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.MultiStore)
		}
	}

	return r0
}

// TracingEnabled provides a mock function with given fields:
func (_m *MultiStore) TracingEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TracingEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMultiStore creates a new instance of MultiStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMultiStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MultiStore {
	mock := &MultiStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
