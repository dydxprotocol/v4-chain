// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	types "github.com/dydxprotocol/v4-chain/protocol/daemons/pricefeed/client/types"
	mock "github.com/stretchr/testify/mock"
)

// ExchangeConfigUpdater is an autogenerated mock type for the ExchangeConfigUpdater type
type ExchangeConfigUpdater struct {
	mock.Mock
}

// GetExchangeId provides a mock function with given fields:
func (_m *ExchangeConfigUpdater) GetExchangeId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExchangeId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateMutableExchangeConfig provides a mock function with given fields: newExchangeConfig, newMarketConfigs
func (_m *ExchangeConfigUpdater) UpdateMutableExchangeConfig(newExchangeConfig *types.MutableExchangeMarketConfig, newMarketConfigs []*types.MutableMarketConfig) error {
	ret := _m.Called(newExchangeConfig, newMarketConfigs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMutableExchangeConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.MutableExchangeMarketConfig, []*types.MutableMarketConfig) error); ok {
		r0 = rf(newExchangeConfig, newMarketConfigs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExchangeConfigUpdater creates a new instance of ExchangeConfigUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExchangeConfigUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExchangeConfigUpdater {
	mock := &ExchangeConfigUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
