// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	log "cosmossdk.io/log"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg, keyVals
func (_m *Logger) Debug(msg string, keyVals ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keyVals...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: msg, keyVals
func (_m *Logger) Error(msg string, keyVals ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keyVals...)
	_m.Called(_ca...)
}

// Impl provides a mock function with given fields:
func (_m *Logger) Impl() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Info provides a mock function with given fields: msg, keyVals
func (_m *Logger) Info(msg string, keyVals ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keyVals...)
	_m.Called(_ca...)
}

// With provides a mock function with given fields: keyVals
func (_m *Logger) With(keyVals ...interface{}) log.Logger {
	var _ca []interface{}
	_ca = append(_ca, keyVals...)
	ret := _m.Called(_ca...)

	var r0 log.Logger
	if rf, ok := ret.Get(0).(func(...interface{}) log.Logger); ok {
		r0 = rf(keyVals...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Logger)
		}
	}

	return r0
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
