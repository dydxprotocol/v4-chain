// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	proto "github.com/cosmos/gogoproto/proto"
	mock "github.com/stretchr/testify/mock"

	signing "github.com/cosmos/cosmos-sdk/x/auth/signing"

	tx "github.com/cosmos/cosmos-sdk/types/tx"

	txsigning "github.com/cosmos/cosmos-sdk/types/tx/signing"

	types "github.com/cosmos/cosmos-sdk/types"
)

// TxBuilder is an autogenerated mock type for the TxBuilder type
type TxBuilder struct {
	mock.Mock
}

// AddAuxSignerData provides a mock function with given fields: _a0
func (_m *TxBuilder) AddAuxSignerData(_a0 tx.AuxSignerData) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddAuxSignerData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(tx.AuxSignerData) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTx provides a mock function with given fields:
func (_m *TxBuilder) GetTx() signing.Tx {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTx")
	}

	var r0 signing.Tx
	if rf, ok := ret.Get(0).(func() signing.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(signing.Tx)
		}
	}

	return r0
}

// SetFeeAmount provides a mock function with given fields: amount
func (_m *TxBuilder) SetFeeAmount(amount types.Coins) {
	_m.Called(amount)
}

// SetFeeGranter provides a mock function with given fields: feeGranter
func (_m *TxBuilder) SetFeeGranter(feeGranter types.AccAddress) {
	_m.Called(feeGranter)
}

// SetFeePayer provides a mock function with given fields: feePayer
func (_m *TxBuilder) SetFeePayer(feePayer types.AccAddress) {
	_m.Called(feePayer)
}

// SetGasLimit provides a mock function with given fields: limit
func (_m *TxBuilder) SetGasLimit(limit uint64) {
	_m.Called(limit)
}

// SetMemo provides a mock function with given fields: memo
func (_m *TxBuilder) SetMemo(memo string) {
	_m.Called(memo)
}

// SetMsgs provides a mock function with given fields: msgs
func (_m *TxBuilder) SetMsgs(msgs ...proto.Message) error {
	_va := make([]interface{}, len(msgs))
	for _i := range msgs {
		_va[_i] = msgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetMsgs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...proto.Message) error); ok {
		r0 = rf(msgs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSignatures provides a mock function with given fields: signatures
func (_m *TxBuilder) SetSignatures(signatures ...txsigning.SignatureV2) error {
	_va := make([]interface{}, len(signatures))
	for _i := range signatures {
		_va[_i] = signatures[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetSignatures")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...txsigning.SignatureV2) error); ok {
		r0 = rf(signatures...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTimeoutHeight provides a mock function with given fields: height
func (_m *TxBuilder) SetTimeoutHeight(height uint64) {
	_m.Called(height)
}

// NewTxBuilder creates a new instance of TxBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxBuilder {
	mock := &TxBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
