// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	delaymsgtypes "github.com/dydxprotocol/v4-chain/protocol/x/delaymsg/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// DelayMsgKeeper is an autogenerated mock type for the DelayMsgKeeper type
type DelayMsgKeeper struct {
	mock.Mock
}

// DecodeMessage provides a mock function with given fields: msgBytes, msg
func (_m *DelayMsgKeeper) DecodeMessage(msgBytes []byte, msg *types.Msg) error {
	ret := _m.Called(msgBytes, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, *types.Msg) error); ok {
		r0 = rf(msgBytes, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelayMessageByBlocks provides a mock function with given fields: ctx, msg, blockDelay
func (_m *DelayMsgKeeper) DelayMessageByBlocks(ctx types.Context, msg types.Msg, blockDelay uint32) (uint32, error) {
	ret := _m.Called(ctx, msg, blockDelay)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(types.Context, types.Msg, uint32) uint32); ok {
		r0 = rf(ctx, msg, blockDelay)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Context, types.Msg, uint32) error); ok {
		r1 = rf(ctx, msg, blockDelay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMessage provides a mock function with given fields: ctx, id
func (_m *DelayMsgKeeper) DeleteMessage(ctx types.Context, id uint32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, uint32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DispatchMessagesForBlock provides a mock function with given fields: ctx
func (_m *DelayMsgKeeper) DispatchMessagesForBlock(ctx types.Context) {
	_m.Called(ctx)
}

// GetAllDelayedMessages provides a mock function with given fields: ctx
func (_m *DelayMsgKeeper) GetAllDelayedMessages(ctx types.Context) []*delaymsgtypes.DelayedMessage {
	ret := _m.Called(ctx)

	var r0 []*delaymsgtypes.DelayedMessage
	if rf, ok := ret.Get(0).(func(types.Context) []*delaymsgtypes.DelayedMessage); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*delaymsgtypes.DelayedMessage)
		}
	}

	return r0
}

// GetAuthorities provides a mock function with given fields:
func (_m *DelayMsgKeeper) GetAuthorities() map[string]struct{} {
	ret := _m.Called()

	var r0 map[string]struct{}
	if rf, ok := ret.Get(0).(func() map[string]struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}

	return r0
}

// GetBlockMessageIds provides a mock function with given fields: ctx, blockHeight
func (_m *DelayMsgKeeper) GetBlockMessageIds(ctx types.Context, blockHeight int64) (delaymsgtypes.BlockMessageIds, bool) {
	ret := _m.Called(ctx, blockHeight)

	var r0 delaymsgtypes.BlockMessageIds
	if rf, ok := ret.Get(0).(func(types.Context, int64) delaymsgtypes.BlockMessageIds); ok {
		r0 = rf(ctx, blockHeight)
	} else {
		r0 = ret.Get(0).(delaymsgtypes.BlockMessageIds)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(types.Context, int64) bool); ok {
		r1 = rf(ctx, blockHeight)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetMessage provides a mock function with given fields: ctx, id
func (_m *DelayMsgKeeper) GetMessage(ctx types.Context, id uint32) (delaymsgtypes.DelayedMessage, bool) {
	ret := _m.Called(ctx, id)

	var r0 delaymsgtypes.DelayedMessage
	if rf, ok := ret.Get(0).(func(types.Context, uint32) delaymsgtypes.DelayedMessage); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(delaymsgtypes.DelayedMessage)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(types.Context, uint32) bool); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// SetDelayedMessage provides a mock function with given fields: ctx, msg
func (_m *DelayMsgKeeper) SetDelayedMessage(ctx types.Context, msg *delaymsgtypes.DelayedMessage) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *delaymsgtypes.DelayedMessage) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNumMessages provides a mock function with given fields: ctx, numMessages
func (_m *DelayMsgKeeper) SetNumMessages(ctx types.Context, numMessages uint32) {
	_m.Called(ctx, numMessages)
}

type mockConstructorTestingTNewDelayMsgKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewDelayMsgKeeper creates a new instance of DelayMsgKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDelayMsgKeeper(t mockConstructorTestingTNewDelayMsgKeeper) *DelayMsgKeeper {
	mock := &DelayMsgKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
