// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	big "math/big"
	rand "math/rand"

	mock "github.com/stretchr/testify/mock"

	subaccountstypes "github.com/dydxprotocol/v4-chain/protocol/x/subaccounts/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// SubaccountsKeeper is an autogenerated mock type for the SubaccountsKeeper type
type SubaccountsKeeper struct {
	mock.Mock
}

// CanUpdateSubaccounts provides a mock function with given fields: ctx, updates, updateType
func (_m *SubaccountsKeeper) CanUpdateSubaccounts(ctx types.Context, updates []subaccountstypes.Update, updateType subaccountstypes.UpdateType) (bool, []subaccountstypes.UpdateResult, error) {
	ret := _m.Called(ctx, updates, updateType)

	var r0 bool
	var r1 []subaccountstypes.UpdateResult
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, []subaccountstypes.Update, subaccountstypes.UpdateType) (bool, []subaccountstypes.UpdateResult, error)); ok {
		return rf(ctx, updates, updateType)
	}
	if rf, ok := ret.Get(0).(func(types.Context, []subaccountstypes.Update, subaccountstypes.UpdateType) bool); ok {
		r0 = rf(ctx, updates, updateType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, []subaccountstypes.Update, subaccountstypes.UpdateType) []subaccountstypes.UpdateResult); ok {
		r1 = rf(ctx, updates, updateType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]subaccountstypes.UpdateResult)
		}
	}

	if rf, ok := ret.Get(2).(func(types.Context, []subaccountstypes.Update, subaccountstypes.UpdateType) error); ok {
		r2 = rf(ctx, updates, updateType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DepositFundsFromAccountToSubaccount provides a mock function with given fields: ctx, fromAccount, toSubaccountId, assetId, amount
func (_m *SubaccountsKeeper) DepositFundsFromAccountToSubaccount(ctx types.Context, fromAccount types.AccAddress, toSubaccountId subaccountstypes.SubaccountId, assetId uint32, amount *big.Int) error {
	ret := _m.Called(ctx, fromAccount, toSubaccountId, assetId, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress, subaccountstypes.SubaccountId, uint32, *big.Int) error); ok {
		r0 = rf(ctx, fromAccount, toSubaccountId, assetId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSubaccount provides a mock function with given fields: ctx
func (_m *SubaccountsKeeper) GetAllSubaccount(ctx types.Context) []subaccountstypes.Subaccount {
	ret := _m.Called(ctx)

	var r0 []subaccountstypes.Subaccount
	if rf, ok := ret.Get(0).(func(types.Context) []subaccountstypes.Subaccount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]subaccountstypes.Subaccount)
		}
	}

	return r0
}

// GetNetCollateralAndMarginRequirements provides a mock function with given fields: ctx, update
func (_m *SubaccountsKeeper) GetNetCollateralAndMarginRequirements(ctx types.Context, update subaccountstypes.Update) (*big.Int, *big.Int, *big.Int, error) {
	ret := _m.Called(ctx, update)

	var r0 *big.Int
	var r1 *big.Int
	var r2 *big.Int
	var r3 error
	if rf, ok := ret.Get(0).(func(types.Context, subaccountstypes.Update) (*big.Int, *big.Int, *big.Int, error)); ok {
		return rf(ctx, update)
	}
	if rf, ok := ret.Get(0).(func(types.Context, subaccountstypes.Update) *big.Int); ok {
		r0 = rf(ctx, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, subaccountstypes.Update) *big.Int); ok {
		r1 = rf(ctx, update)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*big.Int)
		}
	}

	if rf, ok := ret.Get(2).(func(types.Context, subaccountstypes.Update) *big.Int); ok {
		r2 = rf(ctx, update)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*big.Int)
		}
	}

	if rf, ok := ret.Get(3).(func(types.Context, subaccountstypes.Update) error); ok {
		r3 = rf(ctx, update)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetRandomSubaccount provides a mock function with given fields: ctx, _a1
func (_m *SubaccountsKeeper) GetRandomSubaccount(ctx types.Context, _a1 *rand.Rand) (subaccountstypes.Subaccount, error) {
	ret := _m.Called(ctx, _a1)

	var r0 subaccountstypes.Subaccount
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, *rand.Rand) (subaccountstypes.Subaccount, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(types.Context, *rand.Rand) subaccountstypes.Subaccount); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(subaccountstypes.Subaccount)
	}

	if rf, ok := ret.Get(1).(func(types.Context, *rand.Rand) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubaccount provides a mock function with given fields: ctx, id
func (_m *SubaccountsKeeper) GetSubaccount(ctx types.Context, id subaccountstypes.SubaccountId) subaccountstypes.Subaccount {
	ret := _m.Called(ctx, id)

	var r0 subaccountstypes.Subaccount
	if rf, ok := ret.Get(0).(func(types.Context, subaccountstypes.SubaccountId) subaccountstypes.Subaccount); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(subaccountstypes.Subaccount)
	}

	return r0
}

// SetSubaccount provides a mock function with given fields: ctx, subaccount
func (_m *SubaccountsKeeper) SetSubaccount(ctx types.Context, subaccount subaccountstypes.Subaccount) {
	_m.Called(ctx, subaccount)
}

// UpdateSubaccounts provides a mock function with given fields: ctx, updates, updateType
func (_m *SubaccountsKeeper) UpdateSubaccounts(ctx types.Context, updates []subaccountstypes.Update, updateType subaccountstypes.UpdateType) (bool, []subaccountstypes.UpdateResult, error) {
	ret := _m.Called(ctx, updates, updateType)

	var r0 bool
	var r1 []subaccountstypes.UpdateResult
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, []subaccountstypes.Update, subaccountstypes.UpdateType) (bool, []subaccountstypes.UpdateResult, error)); ok {
		return rf(ctx, updates, updateType)
	}
	if rf, ok := ret.Get(0).(func(types.Context, []subaccountstypes.Update, subaccountstypes.UpdateType) bool); ok {
		r0 = rf(ctx, updates, updateType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, []subaccountstypes.Update, subaccountstypes.UpdateType) []subaccountstypes.UpdateResult); ok {
		r1 = rf(ctx, updates, updateType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]subaccountstypes.UpdateResult)
		}
	}

	if rf, ok := ret.Get(2).(func(types.Context, []subaccountstypes.Update, subaccountstypes.UpdateType) error); ok {
		r2 = rf(ctx, updates, updateType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WithdrawFundsFromSubaccountToAccount provides a mock function with given fields: ctx, fromSubaccountId, toAccount, assetId, amount
func (_m *SubaccountsKeeper) WithdrawFundsFromSubaccountToAccount(ctx types.Context, fromSubaccountId subaccountstypes.SubaccountId, toAccount types.AccAddress, assetId uint32, amount *big.Int) error {
	ret := _m.Called(ctx, fromSubaccountId, toAccount, assetId, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, subaccountstypes.SubaccountId, types.AccAddress, uint32, *big.Int) error); ok {
		r0 = rf(ctx, fromSubaccountId, toAccount, assetId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSubaccountsKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubaccountsKeeper creates a new instance of SubaccountsKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubaccountsKeeper(t mockConstructorTestingTNewSubaccountsKeeper) *SubaccountsKeeper {
	mock := &SubaccountsKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
