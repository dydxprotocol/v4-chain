// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	assetstypes "github.com/dydxprotocol/v4-chain/protocol/x/assets/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// AssetsKeeper is an autogenerated mock type for the AssetsKeeper type
type AssetsKeeper struct {
	mock.Mock
}

// ConvertAssetToCoin provides a mock function with given fields: ctx, assetId, quantums
func (_m *AssetsKeeper) ConvertAssetToCoin(ctx types.Context, assetId uint32, quantums *big.Int) (*big.Int, types.Coin, error) {
	ret := _m.Called(ctx, assetId, quantums)

	if len(ret) == 0 {
		panic("no return value specified for ConvertAssetToCoin")
	}

	var r0 *big.Int
	var r1 types.Coin
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, uint32, *big.Int) (*big.Int, types.Coin, error)); ok {
		return rf(ctx, assetId, quantums)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint32, *big.Int) *big.Int); ok {
		r0 = rf(ctx, assetId, quantums)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint32, *big.Int) types.Coin); ok {
		r1 = rf(ctx, assetId, quantums)
	} else {
		r1 = ret.Get(1).(types.Coin)
	}

	if rf, ok := ret.Get(2).(func(types.Context, uint32, *big.Int) error); ok {
		r2 = rf(ctx, assetId, quantums)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateAsset provides a mock function with given fields: ctx, assetId, symbol, denom, denomExponent, hasMarket, marketId, atomicResolution
func (_m *AssetsKeeper) CreateAsset(ctx types.Context, assetId uint32, symbol string, denom string, denomExponent int32, hasMarket bool, marketId uint32, atomicResolution int32) (assetstypes.Asset, error) {
	ret := _m.Called(ctx, assetId, symbol, denom, denomExponent, hasMarket, marketId, atomicResolution)

	if len(ret) == 0 {
		panic("no return value specified for CreateAsset")
	}

	var r0 assetstypes.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, uint32, string, string, int32, bool, uint32, int32) (assetstypes.Asset, error)); ok {
		return rf(ctx, assetId, symbol, denom, denomExponent, hasMarket, marketId, atomicResolution)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint32, string, string, int32, bool, uint32, int32) assetstypes.Asset); ok {
		r0 = rf(ctx, assetId, symbol, denom, denomExponent, hasMarket, marketId, atomicResolution)
	} else {
		r0 = ret.Get(0).(assetstypes.Asset)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint32, string, string, int32, bool, uint32, int32) error); ok {
		r1 = rf(ctx, assetId, symbol, denom, denomExponent, hasMarket, marketId, atomicResolution)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAssets provides a mock function with given fields: ctx
func (_m *AssetsKeeper) GetAllAssets(ctx types.Context) []assetstypes.Asset {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAssets")
	}

	var r0 []assetstypes.Asset
	if rf, ok := ret.Get(0).(func(types.Context) []assetstypes.Asset); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]assetstypes.Asset)
		}
	}

	return r0
}

// GetAsset provides a mock function with given fields: ctx, id
func (_m *AssetsKeeper) GetAsset(ctx types.Context, id uint32) (assetstypes.Asset, bool) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAsset")
	}

	var r0 assetstypes.Asset
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, uint32) (assetstypes.Asset, bool)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint32) assetstypes.Asset); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(assetstypes.Asset)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint32) bool); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// IsPositionUpdatable provides a mock function with given fields: ctx, id
func (_m *AssetsKeeper) IsPositionUpdatable(ctx types.Context, id uint32) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsPositionUpdatable")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, uint32) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint32) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyAsset provides a mock function with given fields: ctx, id, hasMarket, marketId
func (_m *AssetsKeeper) ModifyAsset(ctx types.Context, id uint32, hasMarket bool, marketId uint32) (assetstypes.Asset, error) {
	ret := _m.Called(ctx, id, hasMarket, marketId)

	if len(ret) == 0 {
		panic("no return value specified for ModifyAsset")
	}

	var r0 assetstypes.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, uint32, bool, uint32) (assetstypes.Asset, error)); ok {
		return rf(ctx, id, hasMarket, marketId)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint32, bool, uint32) assetstypes.Asset); ok {
		r0 = rf(ctx, id, hasMarket, marketId)
	} else {
		r0 = ret.Get(0).(assetstypes.Asset)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint32, bool, uint32) error); ok {
		r1 = rf(ctx, id, hasMarket, marketId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAssetsKeeper creates a new instance of AssetsKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetsKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetsKeeper {
	mock := &AssetsKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
