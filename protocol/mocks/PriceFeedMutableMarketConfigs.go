// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	types "github.com/dydxprotocol/v4-chain/protocol/daemons/pricefeed/client/types"
	pricestypes "github.com/dydxprotocol/v4-chain/protocol/x/prices/types"
	mock "github.com/stretchr/testify/mock"
)

// PricefeedMutableMarketConfigs is an autogenerated mock type for the PricefeedMutableMarketConfigs type
type PricefeedMutableMarketConfigs struct {
	mock.Mock
}

// AddPriceEncoder provides a mock function with given fields: updater
func (_m *PricefeedMutableMarketConfigs) AddPriceEncoder(updater types.ExchangeConfigUpdater) {
	_m.Called(updater)
}

// AddPriceFetcher provides a mock function with given fields: updater
func (_m *PricefeedMutableMarketConfigs) AddPriceFetcher(updater types.ExchangeConfigUpdater) {
	_m.Called(updater)
}

// GetExchangeMarketConfigCopy provides a mock function with given fields: id
func (_m *PricefeedMutableMarketConfigs) GetExchangeMarketConfigCopy(id string) (*types.MutableExchangeMarketConfig, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetExchangeMarketConfigCopy")
	}

	var r0 *types.MutableExchangeMarketConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.MutableExchangeMarketConfig, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.MutableExchangeMarketConfig); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MutableExchangeMarketConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketConfigCopies provides a mock function with given fields: markets
func (_m *PricefeedMutableMarketConfigs) GetMarketConfigCopies(markets []uint32) ([]*types.MutableMarketConfig, error) {
	ret := _m.Called(markets)

	if len(ret) == 0 {
		panic("no return value specified for GetMarketConfigCopies")
	}

	var r0 []*types.MutableMarketConfig
	var r1 error
	if rf, ok := ret.Get(0).(func([]uint32) ([]*types.MutableMarketConfig, error)); ok {
		return rf(markets)
	}
	if rf, ok := ret.Get(0).(func([]uint32) []*types.MutableMarketConfig); ok {
		r0 = rf(markets)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.MutableMarketConfig)
		}
	}

	if rf, ok := ret.Get(1).(func([]uint32) error); ok {
		r1 = rf(markets)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMarkets provides a mock function with given fields: marketParams
func (_m *PricefeedMutableMarketConfigs) UpdateMarkets(marketParams []pricestypes.MarketParam) (map[uint32]error, error) {
	ret := _m.Called(marketParams)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMarkets")
	}

	var r0 map[uint32]error
	var r1 error
	if rf, ok := ret.Get(0).(func([]pricestypes.MarketParam) (map[uint32]error, error)); ok {
		return rf(marketParams)
	}
	if rf, ok := ret.Get(0).(func([]pricestypes.MarketParam) map[uint32]error); ok {
		r0 = rf(marketParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint32]error)
		}
	}

	if rf, ok := ret.Get(1).(func([]pricestypes.MarketParam) error); ok {
		r1 = rf(marketParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPricefeedMutableMarketConfigs creates a new instance of PricefeedMutableMarketConfigs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPricefeedMutableMarketConfigs(t interface {
	mock.TestingT
	Cleanup(func())
}) *PricefeedMutableMarketConfigs {
	mock := &PricefeedMutableMarketConfigs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
