// Code generated by mockery v2.44.1
// Manual edits were needed to fix import paths.
// DO NOT EDIT otherwise.

package mocks

import (
	capabilitytypes "github.com/cosmos/ibc-go/modules/capability/types"
	clienttypes "github.com/cosmos/ibc-go/v8/modules/core/02-client/types"

	exported "github.com/cosmos/ibc-go/v8/modules/core/exported"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ICS4Wrapper is an autogenerated mock type for the ICS4Wrapper type
type ICS4Wrapper struct {
	mock.Mock
}

// GetAppVersion provides a mock function with given fields: ctx, portID, channelID
func (_m *ICS4Wrapper) GetAppVersion(ctx types.Context, portID string, channelID string) (string, bool) {
	ret := _m.Called(ctx, portID, channelID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppVersion")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string, string) (string, bool)); ok {
		return rf(ctx, portID, channelID)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string, string) string); ok {
		r0 = rf(ctx, portID, channelID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string, string) bool); ok {
		r1 = rf(ctx, portID, channelID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// SendPacket provides a mock function with given fields: ctx, chanCap, sourcePort, sourceChannel, timeoutHeight, timeoutTimestamp, data
func (_m *ICS4Wrapper) SendPacket(ctx types.Context, chanCap *capabilitytypes.Capability, sourcePort string, sourceChannel string, timeoutHeight clienttypes.Height, timeoutTimestamp uint64, data []byte) (uint64, error) {
	ret := _m.Called(ctx, chanCap, sourcePort, sourceChannel, timeoutHeight, timeoutTimestamp, data)

	if len(ret) == 0 {
		panic("no return value specified for SendPacket")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, *capabilitytypes.Capability, string, string, clienttypes.Height, uint64, []byte) (uint64, error)); ok {
		return rf(ctx, chanCap, sourcePort, sourceChannel, timeoutHeight, timeoutTimestamp, data)
	}
	if rf, ok := ret.Get(0).(func(types.Context, *capabilitytypes.Capability, string, string, clienttypes.Height, uint64, []byte) uint64); ok {
		r0 = rf(ctx, chanCap, sourcePort, sourceChannel, timeoutHeight, timeoutTimestamp, data)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(types.Context, *capabilitytypes.Capability, string, string, clienttypes.Height, uint64, []byte) error); ok {
		r1 = rf(ctx, chanCap, sourcePort, sourceChannel, timeoutHeight, timeoutTimestamp, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteAcknowledgement provides a mock function with given fields: ctx, chanCap, packet, acknowledgement
func (_m *ICS4Wrapper) WriteAcknowledgement(ctx types.Context, chanCap *capabilitytypes.Capability, packet exported.PacketI, acknowledgement exported.Acknowledgement) error {
	ret := _m.Called(ctx, chanCap, packet, acknowledgement)

	if len(ret) == 0 {
		panic("no return value specified for WriteAcknowledgement")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *capabilitytypes.Capability, exported.PacketI, exported.Acknowledgement) error); ok {
		r0 = rf(ctx, chanCap, packet, acknowledgement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICS4Wrapper creates a new instance of ICS4Wrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICS4Wrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICS4Wrapper {
	mock := &ICS4Wrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
