// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	clobtypes "github.com/dydxprotocol/v4-chain/protocol/x/clob/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"

	vaulttypes "github.com/dydxprotocol/v4-chain/protocol/x/vault/types"
)

// VaultKeeper is an autogenerated mock type for the VaultKeeper type
type VaultKeeper struct {
	mock.Mock
}

// GetTotalShares provides a mock function with given fields: ctx, vaultId
func (_m *VaultKeeper) GetTotalShares(ctx types.Context, vaultId vaulttypes.VaultId) (vaulttypes.NumShares, bool) {
	ret := _m.Called(ctx, vaultId)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalShares")
	}

	var r0 vaulttypes.NumShares
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, vaulttypes.VaultId) (vaulttypes.NumShares, bool)); ok {
		return rf(ctx, vaultId)
	}
	if rf, ok := ret.Get(0).(func(types.Context, vaulttypes.VaultId) vaulttypes.NumShares); ok {
		r0 = rf(ctx, vaultId)
	} else {
		r0 = ret.Get(0).(vaulttypes.NumShares)
	}

	if rf, ok := ret.Get(1).(func(types.Context, vaulttypes.VaultId) bool); ok {
		r1 = rf(ctx, vaultId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetVaultClobOrderClientId provides a mock function with given fields: ctx, side, layer
func (_m *VaultKeeper) GetVaultClobOrderClientId(ctx types.Context, side clobtypes.Order_Side, layer uint8) uint32 {
	ret := _m.Called(ctx, side, layer)

	if len(ret) == 0 {
		panic("no return value specified for GetVaultClobOrderClientId")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func(types.Context, clobtypes.Order_Side, uint8) uint32); ok {
		r0 = rf(ctx, side, layer)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// GetVaultClobOrders provides a mock function with given fields: ctx, vaultId
func (_m *VaultKeeper) GetVaultClobOrders(ctx types.Context, vaultId vaulttypes.VaultId) ([]*clobtypes.Order, error) {
	ret := _m.Called(ctx, vaultId)

	if len(ret) == 0 {
		panic("no return value specified for GetVaultClobOrders")
	}

	var r0 []*clobtypes.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, vaulttypes.VaultId) ([]*clobtypes.Order, error)); ok {
		return rf(ctx, vaultId)
	}
	if rf, ok := ret.Get(0).(func(types.Context, vaulttypes.VaultId) []*clobtypes.Order); ok {
		r0 = rf(ctx, vaultId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clobtypes.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, vaulttypes.VaultId) error); ok {
		r1 = rf(ctx, vaultId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaultEquity provides a mock function with given fields: ctx, vaultId
func (_m *VaultKeeper) GetVaultEquity(ctx types.Context, vaultId vaulttypes.VaultId) (*big.Int, error) {
	ret := _m.Called(ctx, vaultId)

	if len(ret) == 0 {
		panic("no return value specified for GetVaultEquity")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, vaulttypes.VaultId) (*big.Int, error)); ok {
		return rf(ctx, vaultId)
	}
	if rf, ok := ret.Get(0).(func(types.Context, vaulttypes.VaultId) *big.Int); ok {
		r0 = rf(ctx, vaultId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, vaulttypes.VaultId) error); ok {
		r1 = rf(ctx, vaultId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MintShares provides a mock function with given fields: ctx, vaultId, owner, quantumsToDeposit
func (_m *VaultKeeper) MintShares(ctx types.Context, vaultId vaulttypes.VaultId, owner string, quantumsToDeposit *big.Int) error {
	ret := _m.Called(ctx, vaultId, owner, quantumsToDeposit)

	if len(ret) == 0 {
		panic("no return value specified for MintShares")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, vaulttypes.VaultId, string, *big.Int) error); ok {
		r0 = rf(ctx, vaultId, owner, quantumsToDeposit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshAllVaultOrders provides a mock function with given fields: ctx
func (_m *VaultKeeper) RefreshAllVaultOrders(ctx types.Context) {
	_m.Called(ctx)
}

// RefreshVaultClobOrders provides a mock function with given fields: ctx, vaultId
func (_m *VaultKeeper) RefreshVaultClobOrders(ctx types.Context, vaultId vaulttypes.VaultId) error {
	ret := _m.Called(ctx, vaultId)

	if len(ret) == 0 {
		panic("no return value specified for RefreshVaultClobOrders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, vaulttypes.VaultId) error); ok {
		r0 = rf(ctx, vaultId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTotalShares provides a mock function with given fields: ctx, vaultId, totalShares
func (_m *VaultKeeper) SetTotalShares(ctx types.Context, vaultId vaulttypes.VaultId, totalShares vaulttypes.NumShares) error {
	ret := _m.Called(ctx, vaultId, totalShares)

	if len(ret) == 0 {
		panic("no return value specified for SetTotalShares")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, vaulttypes.VaultId, vaulttypes.NumShares) error); ok {
		r0 = rf(ctx, vaultId, totalShares)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVaultKeeper creates a new instance of VaultKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVaultKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *VaultKeeper {
	mock := &VaultKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
