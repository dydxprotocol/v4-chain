// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	abcitypes "github.com/cometbft/cometbft/abci/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ExtendVoteHandler is an autogenerated mock type for the ExtendVoteHandler type
type ExtendVoteHandler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *ExtendVoteHandler) Execute(_a0 types.Context, _a1 *abcitypes.RequestExtendVote) (*abcitypes.ResponseExtendVote, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *abcitypes.ResponseExtendVote
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, *abcitypes.RequestExtendVote) (*abcitypes.ResponseExtendVote, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(types.Context, *abcitypes.RequestExtendVote) *abcitypes.ResponseExtendVote); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcitypes.ResponseExtendVote)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, *abcitypes.RequestExtendVote) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExtendVoteHandler creates a new instance of ExtendVoteHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExtendVoteHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExtendVoteHandler {
	mock := &ExtendVoteHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
