// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	api "github.com/dydxprotocol/v4-chain/protocol/daemons/bridge/api"
	clobtypes "github.com/dydxprotocol/v4-chain/protocol/x/clob/types"

	context "context"

	grpc "google.golang.org/grpc"

	liquidationapi "github.com/dydxprotocol/v4-chain/protocol/daemons/liquidation/api"

	mock "github.com/stretchr/testify/mock"

	pricefeedapi "github.com/dydxprotocol/v4-chain/protocol/daemons/pricefeed/api"

	pricestypes "github.com/dydxprotocol/v4-chain/protocol/x/prices/types"

	subaccountstypes "github.com/dydxprotocol/v4-chain/protocol/x/subaccounts/types"

	types "github.com/dydxprotocol/v4-chain/protocol/x/blocktime/types"
)

// QueryClient is an autogenerated mock type for the QueryClient type
type QueryClient struct {
	mock.Mock
}

// AddBridgeEvents provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) AddBridgeEvents(ctx context.Context, in *api.AddBridgeEventsRequest, opts ...grpc.CallOption) (*api.AddBridgeEventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.AddBridgeEventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *api.AddBridgeEventsRequest, ...grpc.CallOption) *api.AddBridgeEventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.AddBridgeEventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.AddBridgeEventsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllDowntimeInfo provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) AllDowntimeInfo(ctx context.Context, in *types.QueryAllDowntimeInfoRequest, opts ...grpc.CallOption) (*types.QueryAllDowntimeInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryAllDowntimeInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllDowntimeInfoRequest, ...grpc.CallOption) *types.QueryAllDowntimeInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAllDowntimeInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAllDowntimeInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllMarketParams provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) AllMarketParams(ctx context.Context, in *pricestypes.QueryAllMarketParamsRequest, opts ...grpc.CallOption) (*pricestypes.QueryAllMarketParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pricestypes.QueryAllMarketParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pricestypes.QueryAllMarketParamsRequest, ...grpc.CallOption) *pricestypes.QueryAllMarketParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricestypes.QueryAllMarketParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pricestypes.QueryAllMarketParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllMarketPrices provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) AllMarketPrices(ctx context.Context, in *pricestypes.QueryAllMarketPricesRequest, opts ...grpc.CallOption) (*pricestypes.QueryAllMarketPricesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pricestypes.QueryAllMarketPricesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pricestypes.QueryAllMarketPricesRequest, ...grpc.CallOption) *pricestypes.QueryAllMarketPricesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricestypes.QueryAllMarketPricesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pricestypes.QueryAllMarketPricesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AreSubaccountsLiquidatable provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) AreSubaccountsLiquidatable(ctx context.Context, in *clobtypes.AreSubaccountsLiquidatableRequest, opts ...grpc.CallOption) (*clobtypes.AreSubaccountsLiquidatableResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clobtypes.AreSubaccountsLiquidatableResponse
	if rf, ok := ret.Get(0).(func(context.Context, *clobtypes.AreSubaccountsLiquidatableRequest, ...grpc.CallOption) *clobtypes.AreSubaccountsLiquidatableResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clobtypes.AreSubaccountsLiquidatableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clobtypes.AreSubaccountsLiquidatableRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockRateLimitConfiguration provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) BlockRateLimitConfiguration(ctx context.Context, in *clobtypes.QueryBlockRateLimitConfigurationRequest, opts ...grpc.CallOption) (*clobtypes.QueryBlockRateLimitConfigurationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clobtypes.QueryBlockRateLimitConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *clobtypes.QueryBlockRateLimitConfigurationRequest, ...grpc.CallOption) *clobtypes.QueryBlockRateLimitConfigurationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clobtypes.QueryBlockRateLimitConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clobtypes.QueryBlockRateLimitConfigurationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClobPair provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) ClobPair(ctx context.Context, in *clobtypes.QueryGetClobPairRequest, opts ...grpc.CallOption) (*clobtypes.QueryClobPairResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clobtypes.QueryClobPairResponse
	if rf, ok := ret.Get(0).(func(context.Context, *clobtypes.QueryGetClobPairRequest, ...grpc.CallOption) *clobtypes.QueryClobPairResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clobtypes.QueryClobPairResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clobtypes.QueryGetClobPairRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClobPairAll provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) ClobPairAll(ctx context.Context, in *clobtypes.QueryAllClobPairRequest, opts ...grpc.CallOption) (*clobtypes.QueryClobPairAllResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clobtypes.QueryClobPairAllResponse
	if rf, ok := ret.Get(0).(func(context.Context, *clobtypes.QueryAllClobPairRequest, ...grpc.CallOption) *clobtypes.QueryClobPairAllResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clobtypes.QueryClobPairAllResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clobtypes.QueryAllClobPairRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DowntimeParams provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) DowntimeParams(ctx context.Context, in *types.QueryDowntimeParamsRequest, opts ...grpc.CallOption) (*types.QueryDowntimeParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryDowntimeParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryDowntimeParamsRequest, ...grpc.CallOption) *types.QueryDowntimeParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryDowntimeParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryDowntimeParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EquityTierLimitConfiguration provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) EquityTierLimitConfiguration(ctx context.Context, in *clobtypes.QueryEquityTierLimitConfigurationRequest, opts ...grpc.CallOption) (*clobtypes.QueryEquityTierLimitConfigurationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clobtypes.QueryEquityTierLimitConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *clobtypes.QueryEquityTierLimitConfigurationRequest, ...grpc.CallOption) *clobtypes.QueryEquityTierLimitConfigurationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clobtypes.QueryEquityTierLimitConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clobtypes.QueryEquityTierLimitConfigurationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LiquidateSubaccounts provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) LiquidateSubaccounts(ctx context.Context, in *liquidationapi.LiquidateSubaccountsRequest, opts ...grpc.CallOption) (*liquidationapi.LiquidateSubaccountsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *liquidationapi.LiquidateSubaccountsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *liquidationapi.LiquidateSubaccountsRequest, ...grpc.CallOption) *liquidationapi.LiquidateSubaccountsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidationapi.LiquidateSubaccountsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *liquidationapi.LiquidateSubaccountsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LiquidationsConfiguration provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) LiquidationsConfiguration(ctx context.Context, in *clobtypes.QueryLiquidationsConfigurationRequest, opts ...grpc.CallOption) (*clobtypes.QueryLiquidationsConfigurationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clobtypes.QueryLiquidationsConfigurationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *clobtypes.QueryLiquidationsConfigurationRequest, ...grpc.CallOption) *clobtypes.QueryLiquidationsConfigurationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clobtypes.QueryLiquidationsConfigurationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clobtypes.QueryLiquidationsConfigurationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketParam provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) MarketParam(ctx context.Context, in *pricestypes.QueryMarketParamRequest, opts ...grpc.CallOption) (*pricestypes.QueryMarketParamResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pricestypes.QueryMarketParamResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pricestypes.QueryMarketParamRequest, ...grpc.CallOption) *pricestypes.QueryMarketParamResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricestypes.QueryMarketParamResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pricestypes.QueryMarketParamRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarketPrice provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) MarketPrice(ctx context.Context, in *pricestypes.QueryMarketPriceRequest, opts ...grpc.CallOption) (*pricestypes.QueryMarketPriceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pricestypes.QueryMarketPriceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pricestypes.QueryMarketPriceRequest, ...grpc.CallOption) *pricestypes.QueryMarketPriceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricestypes.QueryMarketPriceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pricestypes.QueryMarketPriceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MevNodeToNodeCalculation provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) MevNodeToNodeCalculation(ctx context.Context, in *clobtypes.MevNodeToNodeCalculationRequest, opts ...grpc.CallOption) (*clobtypes.MevNodeToNodeCalculationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clobtypes.MevNodeToNodeCalculationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *clobtypes.MevNodeToNodeCalculationRequest, ...grpc.CallOption) *clobtypes.MevNodeToNodeCalculationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clobtypes.MevNodeToNodeCalculationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clobtypes.MevNodeToNodeCalculationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreviousBlockInfo provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) PreviousBlockInfo(ctx context.Context, in *types.QueryPreviousBlockInfoRequest, opts ...grpc.CallOption) (*types.QueryPreviousBlockInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryPreviousBlockInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryPreviousBlockInfoRequest, ...grpc.CallOption) *types.QueryPreviousBlockInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryPreviousBlockInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryPreviousBlockInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subaccount provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Subaccount(ctx context.Context, in *subaccountstypes.QueryGetSubaccountRequest, opts ...grpc.CallOption) (*subaccountstypes.QuerySubaccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *subaccountstypes.QuerySubaccountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *subaccountstypes.QueryGetSubaccountRequest, ...grpc.CallOption) *subaccountstypes.QuerySubaccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subaccountstypes.QuerySubaccountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subaccountstypes.QueryGetSubaccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubaccountAll provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) SubaccountAll(ctx context.Context, in *subaccountstypes.QueryAllSubaccountRequest, opts ...grpc.CallOption) (*subaccountstypes.QuerySubaccountAllResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *subaccountstypes.QuerySubaccountAllResponse
	if rf, ok := ret.Get(0).(func(context.Context, *subaccountstypes.QueryAllSubaccountRequest, ...grpc.CallOption) *subaccountstypes.QuerySubaccountAllResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subaccountstypes.QuerySubaccountAllResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subaccountstypes.QueryAllSubaccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMarketPrices provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) UpdateMarketPrices(ctx context.Context, in *pricefeedapi.UpdateMarketPricesRequest, opts ...grpc.CallOption) (*pricefeedapi.UpdateMarketPricesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pricefeedapi.UpdateMarketPricesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pricefeedapi.UpdateMarketPricesRequest, ...grpc.CallOption) *pricefeedapi.UpdateMarketPricesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricefeedapi.UpdateMarketPricesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pricefeedapi.UpdateMarketPricesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQueryClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryClient creates a new instance of QueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryClient(t mockConstructorTestingTNewQueryClient) *QueryClient {
	mock := &QueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
