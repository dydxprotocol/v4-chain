// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	types "github.com/skip-mev/slinky/service/servers/oracle/types"
)

// OracleClient is an autogenerated mock type for the OracleClient type
type OracleClient struct {
	mock.Mock
}

// MarketMap provides a mock function with given fields: ctx, in, opts
func (_m *OracleClient) MarketMap(ctx context.Context, in *types.QueryMarketMapRequest, opts ...grpc.CallOption) (*types.QueryMarketMapResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MarketMap")
	}

	var r0 *types.QueryMarketMapResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryMarketMapRequest, ...grpc.CallOption) (*types.QueryMarketMapResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryMarketMapRequest, ...grpc.CallOption) *types.QueryMarketMapResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryMarketMapResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryMarketMapRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Prices provides a mock function with given fields: ctx, in, opts
func (_m *OracleClient) Prices(ctx context.Context, in *types.QueryPricesRequest, opts ...grpc.CallOption) (*types.QueryPricesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Prices")
	}

	var r0 *types.QueryPricesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryPricesRequest, ...grpc.CallOption) (*types.QueryPricesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryPricesRequest, ...grpc.CallOption) *types.QueryPricesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryPricesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryPricesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: _a0
func (_m *OracleClient) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *OracleClient) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOracleClient creates a new instance of OracleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOracleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *OracleClient {
	mock := &OracleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
