// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	types "github.com/cosmos/cosmos-sdk/types"
	prices "github.com/dydxprotocol/v4-chain/protocol/app/process/prices"
	mock "github.com/stretchr/testify/mock"
)

// UpdateMarketPriceTxDecoder is an autogenerated mock type for the UpdateMarketPriceTxDecoder type
type UpdateMarketPriceTxDecoder struct {
	mock.Mock
}

// DecodeUpdateMarketPricesTx provides a mock function with given fields: ctx, txs
func (_m *UpdateMarketPriceTxDecoder) DecodeUpdateMarketPricesTx(ctx types.Context, txs [][]byte) (*prices.UpdateMarketPricesTx, error) {
	ret := _m.Called(ctx, txs)

	if len(ret) == 0 {
		panic("no return value specified for DecodeUpdateMarketPricesTx")
	}

	var r0 *prices.UpdateMarketPricesTx
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, [][]byte) (*prices.UpdateMarketPricesTx, error)); ok {
		return rf(ctx, txs)
	}
	if rf, ok := ret.Get(0).(func(types.Context, [][]byte) *prices.UpdateMarketPricesTx); ok {
		r0 = rf(ctx, txs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prices.UpdateMarketPricesTx)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, [][]byte) error); ok {
		r1 = rf(ctx, txs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxOffset provides a mock function with given fields: ctx
func (_m *UpdateMarketPriceTxDecoder) GetTxOffset(ctx types.Context) int {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTxOffset")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(types.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewUpdateMarketPriceTxDecoder creates a new instance of UpdateMarketPriceTxDecoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdateMarketPriceTxDecoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpdateMarketPriceTxDecoder {
	mock := &UpdateMarketPriceTxDecoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
