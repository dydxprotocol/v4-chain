// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/dydxprotocol/v4-chain/protocol/daemons/liquidation/client"

	flags "github.com/dydxprotocol/v4-chain/protocol/daemons/flags"

	mock "github.com/stretchr/testify/mock"
)

// LiquidationDaemonTaskRunner is an autogenerated mock type for the SubTaskRunner type
type LiquidationDaemonTaskRunner struct {
	mock.Mock
}

// RunLiquidationDaemonTaskLoop provides a mock function with given fields: ctx, _a1, liqFlags
func (_m *LiquidationDaemonTaskRunner) RunLiquidationDaemonTaskLoop(ctx context.Context, _a1 *client.Client, liqFlags flags.LiquidationFlags) error {
	ret := _m.Called(ctx, _a1, liqFlags)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.Client, flags.LiquidationFlags) error); ok {
		r0 = rf(ctx, _a1, liqFlags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewLiquidationDaemonTaskRunner interface {
	mock.TestingT
	Cleanup(func())
}

// NewLiquidationDaemonTaskRunner creates a new instance of LiquidationDaemonTaskRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLiquidationDaemonTaskRunner(t mockConstructorTestingTNewLiquidationDaemonTaskRunner) *LiquidationDaemonTaskRunner {
	mock := &LiquidationDaemonTaskRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
