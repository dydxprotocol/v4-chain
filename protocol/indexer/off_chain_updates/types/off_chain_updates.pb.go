// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/indexer/off_chain_updates/off_chain_updates.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/dydxprotocol/v4-chain/protocol/indexer/protocol/v1/types"
	types2 "github.com/dydxprotocol/v4-chain/protocol/indexer/shared/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OrderPlacementStatus is an enum for the resulting status after an order is
// placed.
type OrderPlaceV1_OrderPlacementStatus int32

const (
	// Default value, this is invalid and unused.
	OrderPlaceV1_ORDER_PLACEMENT_STATUS_UNSPECIFIED OrderPlaceV1_OrderPlacementStatus = 0
	// A best effort opened order is one that has only been confirmed to be
	// placed on the dYdX node sending the off-chain update message.
	// The cases where this happens includes:
	// - The dYdX node places an order in it's in-memory orderbook during the
	//   CheckTx flow.
	// A best effort placed order may not have been placed on other dYdX
	// nodes including other dYdX validator nodes and may still be excluded in
	// future order matches.
	OrderPlaceV1_ORDER_PLACEMENT_STATUS_BEST_EFFORT_OPENED OrderPlaceV1_OrderPlacementStatus = 1
	// An opened order is one that is confirmed to be placed on all dYdX nodes
	// (discounting dishonest dYdX nodes) and will be included in any future
	// order matches.
	// This status is used internally by the indexer and will not be sent
	// out by protocol.
	OrderPlaceV1_ORDER_PLACEMENT_STATUS_OPENED OrderPlaceV1_OrderPlacementStatus = 2
)

var OrderPlaceV1_OrderPlacementStatus_name = map[int32]string{
	0: "ORDER_PLACEMENT_STATUS_UNSPECIFIED",
	1: "ORDER_PLACEMENT_STATUS_BEST_EFFORT_OPENED",
	2: "ORDER_PLACEMENT_STATUS_OPENED",
}

var OrderPlaceV1_OrderPlacementStatus_value = map[string]int32{
	"ORDER_PLACEMENT_STATUS_UNSPECIFIED":        0,
	"ORDER_PLACEMENT_STATUS_BEST_EFFORT_OPENED": 1,
	"ORDER_PLACEMENT_STATUS_OPENED":             2,
}

func (x OrderPlaceV1_OrderPlacementStatus) String() string {
	return proto.EnumName(OrderPlaceV1_OrderPlacementStatus_name, int32(x))
}

func (OrderPlaceV1_OrderPlacementStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a3058c1b66f59e98, []int{0, 0}
}

// OrderRemovalStatus is an enum for the resulting status after an order is
// removed.
type OrderRemoveV1_OrderRemovalStatus int32

const (
	// Default value, this is invalid and unused.
	OrderRemoveV1_ORDER_REMOVAL_STATUS_UNSPECIFIED OrderRemoveV1_OrderRemovalStatus = 0
	// A best effort canceled order is one that has only been confirmed to be
	// removed on the dYdX node sending the off-chain update message.
	// The cases where this happens includes:
	// - the order was removed due to the dYdX node receiving a CancelOrder
	//   transaction for the order.
	// - the order was removed due to being undercollateralized during
	//   optimistic matching.
	// A best effort canceled order may not have been removed on other dYdX
	// nodes including other dYdX validator nodes and may still be included in
	// future order matches.
	OrderRemoveV1_ORDER_REMOVAL_STATUS_BEST_EFFORT_CANCELED OrderRemoveV1_OrderRemovalStatus = 1
	// A canceled order is one that is confirmed to be removed on all dYdX nodes
	// (discounting dishonest dYdX nodes) and will not be included in any future
	// order matches.
	// The cases where this happens includes:
	// - the order is expired.
	OrderRemoveV1_ORDER_REMOVAL_STATUS_CANCELED OrderRemoveV1_OrderRemovalStatus = 2
	// An order was fully-filled. Only sent by the Indexer for stateful orders.
	OrderRemoveV1_ORDER_REMOVAL_STATUS_FILLED OrderRemoveV1_OrderRemovalStatus = 3
)

var OrderRemoveV1_OrderRemovalStatus_name = map[int32]string{
	0: "ORDER_REMOVAL_STATUS_UNSPECIFIED",
	1: "ORDER_REMOVAL_STATUS_BEST_EFFORT_CANCELED",
	2: "ORDER_REMOVAL_STATUS_CANCELED",
	3: "ORDER_REMOVAL_STATUS_FILLED",
}

var OrderRemoveV1_OrderRemovalStatus_value = map[string]int32{
	"ORDER_REMOVAL_STATUS_UNSPECIFIED":          0,
	"ORDER_REMOVAL_STATUS_BEST_EFFORT_CANCELED": 1,
	"ORDER_REMOVAL_STATUS_CANCELED":             2,
	"ORDER_REMOVAL_STATUS_FILLED":               3,
}

func (x OrderRemoveV1_OrderRemovalStatus) String() string {
	return proto.EnumName(OrderRemoveV1_OrderRemovalStatus_name, int32(x))
}

func (OrderRemoveV1_OrderRemovalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a3058c1b66f59e98, []int{1, 0}
}

// OrderPlace messages contain the order placed/replaced.
type OrderPlaceV1 struct {
	Order           *types.IndexerOrder               `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	PlacementStatus OrderPlaceV1_OrderPlacementStatus `protobuf:"varint,2,opt,name=placement_status,json=placementStatus,proto3,enum=dydxprotocol.indexer.off_chain_updates.OrderPlaceV1_OrderPlacementStatus" json:"placement_status,omitempty"`
	// The timestamp of the order placement.
	TimeStamp *time.Time `protobuf:"bytes,3,opt,name=time_stamp,json=timeStamp,proto3,stdtime" json:"time_stamp,omitempty"`
}

func (m *OrderPlaceV1) Reset()         { *m = OrderPlaceV1{} }
func (m *OrderPlaceV1) String() string { return proto.CompactTextString(m) }
func (*OrderPlaceV1) ProtoMessage()    {}
func (*OrderPlaceV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3058c1b66f59e98, []int{0}
}
func (m *OrderPlaceV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderPlaceV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderPlaceV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderPlaceV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderPlaceV1.Merge(m, src)
}
func (m *OrderPlaceV1) XXX_Size() int {
	return m.Size()
}
func (m *OrderPlaceV1) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderPlaceV1.DiscardUnknown(m)
}

var xxx_messageInfo_OrderPlaceV1 proto.InternalMessageInfo

func (m *OrderPlaceV1) GetOrder() *types.IndexerOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *OrderPlaceV1) GetPlacementStatus() OrderPlaceV1_OrderPlacementStatus {
	if m != nil {
		return m.PlacementStatus
	}
	return OrderPlaceV1_ORDER_PLACEMENT_STATUS_UNSPECIFIED
}

func (m *OrderPlaceV1) GetTimeStamp() *time.Time {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

// OrderRemove messages contain the id of the order removed, the reason for the
// removal and the resulting status from the removal.
type OrderRemoveV1 struct {
	RemovedOrderId *types.IndexerOrderId            `protobuf:"bytes,1,opt,name=removed_order_id,json=removedOrderId,proto3" json:"removed_order_id,omitempty"`
	Reason         types2.OrderRemovalReason        `protobuf:"varint,2,opt,name=reason,proto3,enum=dydxprotocol.indexer.shared.OrderRemovalReason" json:"reason,omitempty"`
	RemovalStatus  OrderRemoveV1_OrderRemovalStatus `protobuf:"varint,3,opt,name=removal_status,json=removalStatus,proto3,enum=dydxprotocol.indexer.off_chain_updates.OrderRemoveV1_OrderRemovalStatus" json:"removal_status,omitempty"`
	// The timestamp of the order removal.
	TimeStamp *time.Time `protobuf:"bytes,4,opt,name=time_stamp,json=timeStamp,proto3,stdtime" json:"time_stamp,omitempty"`
}

func (m *OrderRemoveV1) Reset()         { *m = OrderRemoveV1{} }
func (m *OrderRemoveV1) String() string { return proto.CompactTextString(m) }
func (*OrderRemoveV1) ProtoMessage()    {}
func (*OrderRemoveV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3058c1b66f59e98, []int{1}
}
func (m *OrderRemoveV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderRemoveV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderRemoveV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderRemoveV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderRemoveV1.Merge(m, src)
}
func (m *OrderRemoveV1) XXX_Size() int {
	return m.Size()
}
func (m *OrderRemoveV1) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderRemoveV1.DiscardUnknown(m)
}

var xxx_messageInfo_OrderRemoveV1 proto.InternalMessageInfo

func (m *OrderRemoveV1) GetRemovedOrderId() *types.IndexerOrderId {
	if m != nil {
		return m.RemovedOrderId
	}
	return nil
}

func (m *OrderRemoveV1) GetReason() types2.OrderRemovalReason {
	if m != nil {
		return m.Reason
	}
	return types2.OrderRemovalReason_ORDER_REMOVAL_REASON_UNSPECIFIED
}

func (m *OrderRemoveV1) GetRemovalStatus() OrderRemoveV1_OrderRemovalStatus {
	if m != nil {
		return m.RemovalStatus
	}
	return OrderRemoveV1_ORDER_REMOVAL_STATUS_UNSPECIFIED
}

func (m *OrderRemoveV1) GetTimeStamp() *time.Time {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

// OrderUpdate messages contain the id of the order being updated, and the
// updated total filled quantums of the order.
type OrderUpdateV1 struct {
	OrderId             *types.IndexerOrderId `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	TotalFilledQuantums uint64                `protobuf:"varint,2,opt,name=total_filled_quantums,json=totalFilledQuantums,proto3" json:"total_filled_quantums,omitempty"`
}

func (m *OrderUpdateV1) Reset()         { *m = OrderUpdateV1{} }
func (m *OrderUpdateV1) String() string { return proto.CompactTextString(m) }
func (*OrderUpdateV1) ProtoMessage()    {}
func (*OrderUpdateV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3058c1b66f59e98, []int{2}
}
func (m *OrderUpdateV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderUpdateV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderUpdateV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderUpdateV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderUpdateV1.Merge(m, src)
}
func (m *OrderUpdateV1) XXX_Size() int {
	return m.Size()
}
func (m *OrderUpdateV1) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderUpdateV1.DiscardUnknown(m)
}

var xxx_messageInfo_OrderUpdateV1 proto.InternalMessageInfo

func (m *OrderUpdateV1) GetOrderId() *types.IndexerOrderId {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *OrderUpdateV1) GetTotalFilledQuantums() uint64 {
	if m != nil {
		return m.TotalFilledQuantums
	}
	return 0
}

// OrderReplace messages contain the old order ID and the replacement order.
type OrderReplaceV1 struct {
	OldOrderId      *types.IndexerOrderId             `protobuf:"bytes,1,opt,name=old_order_id,json=oldOrderId,proto3" json:"old_order_id,omitempty"`
	Order           *types.IndexerOrder               `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	PlacementStatus OrderPlaceV1_OrderPlacementStatus `protobuf:"varint,3,opt,name=placement_status,json=placementStatus,proto3,enum=dydxprotocol.indexer.off_chain_updates.OrderPlaceV1_OrderPlacementStatus" json:"placement_status,omitempty"`
	TimeStamp       *time.Time                        `protobuf:"bytes,4,opt,name=time_stamp,json=timeStamp,proto3,stdtime" json:"time_stamp,omitempty"`
}

func (m *OrderReplaceV1) Reset()         { *m = OrderReplaceV1{} }
func (m *OrderReplaceV1) String() string { return proto.CompactTextString(m) }
func (*OrderReplaceV1) ProtoMessage()    {}
func (*OrderReplaceV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3058c1b66f59e98, []int{3}
}
func (m *OrderReplaceV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderReplaceV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderReplaceV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderReplaceV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderReplaceV1.Merge(m, src)
}
func (m *OrderReplaceV1) XXX_Size() int {
	return m.Size()
}
func (m *OrderReplaceV1) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderReplaceV1.DiscardUnknown(m)
}

var xxx_messageInfo_OrderReplaceV1 proto.InternalMessageInfo

func (m *OrderReplaceV1) GetOldOrderId() *types.IndexerOrderId {
	if m != nil {
		return m.OldOrderId
	}
	return nil
}

func (m *OrderReplaceV1) GetOrder() *types.IndexerOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *OrderReplaceV1) GetPlacementStatus() OrderPlaceV1_OrderPlacementStatus {
	if m != nil {
		return m.PlacementStatus
	}
	return OrderPlaceV1_ORDER_PLACEMENT_STATUS_UNSPECIFIED
}

func (m *OrderReplaceV1) GetTimeStamp() *time.Time {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

// An OffChainUpdate message is the message type which will be sent on Kafka to
// the Indexer.
type OffChainUpdateV1 struct {
	// Contains one of an OrderPlaceV1, OrderRemoveV1, OrderUpdateV1, and
	// OrderReplaceV1 message.
	//
	// Types that are valid to be assigned to UpdateMessage:
	//
	//	*OffChainUpdateV1_OrderPlace
	//	*OffChainUpdateV1_OrderRemove
	//	*OffChainUpdateV1_OrderUpdate
	//	*OffChainUpdateV1_OrderReplace
	UpdateMessage isOffChainUpdateV1_UpdateMessage `protobuf_oneof:"update_message"`
}

func (m *OffChainUpdateV1) Reset()         { *m = OffChainUpdateV1{} }
func (m *OffChainUpdateV1) String() string { return proto.CompactTextString(m) }
func (*OffChainUpdateV1) ProtoMessage()    {}
func (*OffChainUpdateV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3058c1b66f59e98, []int{4}
}
func (m *OffChainUpdateV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OffChainUpdateV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OffChainUpdateV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OffChainUpdateV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffChainUpdateV1.Merge(m, src)
}
func (m *OffChainUpdateV1) XXX_Size() int {
	return m.Size()
}
func (m *OffChainUpdateV1) XXX_DiscardUnknown() {
	xxx_messageInfo_OffChainUpdateV1.DiscardUnknown(m)
}

var xxx_messageInfo_OffChainUpdateV1 proto.InternalMessageInfo

type isOffChainUpdateV1_UpdateMessage interface {
	isOffChainUpdateV1_UpdateMessage()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OffChainUpdateV1_OrderPlace struct {
	OrderPlace *OrderPlaceV1 `protobuf:"bytes,1,opt,name=order_place,json=orderPlace,proto3,oneof" json:"order_place,omitempty"`
}
type OffChainUpdateV1_OrderRemove struct {
	OrderRemove *OrderRemoveV1 `protobuf:"bytes,2,opt,name=order_remove,json=orderRemove,proto3,oneof" json:"order_remove,omitempty"`
}
type OffChainUpdateV1_OrderUpdate struct {
	OrderUpdate *OrderUpdateV1 `protobuf:"bytes,3,opt,name=order_update,json=orderUpdate,proto3,oneof" json:"order_update,omitempty"`
}
type OffChainUpdateV1_OrderReplace struct {
	OrderReplace *OrderReplaceV1 `protobuf:"bytes,4,opt,name=order_replace,json=orderReplace,proto3,oneof" json:"order_replace,omitempty"`
}

func (*OffChainUpdateV1_OrderPlace) isOffChainUpdateV1_UpdateMessage()   {}
func (*OffChainUpdateV1_OrderRemove) isOffChainUpdateV1_UpdateMessage()  {}
func (*OffChainUpdateV1_OrderUpdate) isOffChainUpdateV1_UpdateMessage()  {}
func (*OffChainUpdateV1_OrderReplace) isOffChainUpdateV1_UpdateMessage() {}

func (m *OffChainUpdateV1) GetUpdateMessage() isOffChainUpdateV1_UpdateMessage {
	if m != nil {
		return m.UpdateMessage
	}
	return nil
}

func (m *OffChainUpdateV1) GetOrderPlace() *OrderPlaceV1 {
	if x, ok := m.GetUpdateMessage().(*OffChainUpdateV1_OrderPlace); ok {
		return x.OrderPlace
	}
	return nil
}

func (m *OffChainUpdateV1) GetOrderRemove() *OrderRemoveV1 {
	if x, ok := m.GetUpdateMessage().(*OffChainUpdateV1_OrderRemove); ok {
		return x.OrderRemove
	}
	return nil
}

func (m *OffChainUpdateV1) GetOrderUpdate() *OrderUpdateV1 {
	if x, ok := m.GetUpdateMessage().(*OffChainUpdateV1_OrderUpdate); ok {
		return x.OrderUpdate
	}
	return nil
}

func (m *OffChainUpdateV1) GetOrderReplace() *OrderReplaceV1 {
	if x, ok := m.GetUpdateMessage().(*OffChainUpdateV1_OrderReplace); ok {
		return x.OrderReplace
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OffChainUpdateV1) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OffChainUpdateV1_OrderPlace)(nil),
		(*OffChainUpdateV1_OrderRemove)(nil),
		(*OffChainUpdateV1_OrderUpdate)(nil),
		(*OffChainUpdateV1_OrderReplace)(nil),
	}
}

func init() {
	proto.RegisterEnum("dydxprotocol.indexer.off_chain_updates.OrderPlaceV1_OrderPlacementStatus", OrderPlaceV1_OrderPlacementStatus_name, OrderPlaceV1_OrderPlacementStatus_value)
	proto.RegisterEnum("dydxprotocol.indexer.off_chain_updates.OrderRemoveV1_OrderRemovalStatus", OrderRemoveV1_OrderRemovalStatus_name, OrderRemoveV1_OrderRemovalStatus_value)
	proto.RegisterType((*OrderPlaceV1)(nil), "dydxprotocol.indexer.off_chain_updates.OrderPlaceV1")
	proto.RegisterType((*OrderRemoveV1)(nil), "dydxprotocol.indexer.off_chain_updates.OrderRemoveV1")
	proto.RegisterType((*OrderUpdateV1)(nil), "dydxprotocol.indexer.off_chain_updates.OrderUpdateV1")
	proto.RegisterType((*OrderReplaceV1)(nil), "dydxprotocol.indexer.off_chain_updates.OrderReplaceV1")
	proto.RegisterType((*OffChainUpdateV1)(nil), "dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1")
}

func init() {
	proto.RegisterFile("dydxprotocol/indexer/off_chain_updates/off_chain_updates.proto", fileDescriptor_a3058c1b66f59e98)
}

var fileDescriptor_a3058c1b66f59e98 = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdf, 0x4f, 0x1a, 0x4b,
	0x14, 0x66, 0xc1, 0xeb, 0xf5, 0x1e, 0x91, 0x4b, 0xe6, 0x7a, 0x13, 0x63, 0x53, 0xb0, 0xa4, 0x31,
	0x36, 0x8d, 0xbb, 0x62, 0x6d, 0x1f, 0x9b, 0xf0, 0x63, 0xa9, 0xa4, 0x08, 0x74, 0x40, 0x9b, 0x98,
	0x34, 0x93, 0x85, 0x1d, 0x90, 0x64, 0x61, 0xb6, 0xbb, 0x0b, 0xd1, 0xff, 0xc2, 0x87, 0x3e, 0xf5,
	0xb1, 0xef, 0xfd, 0x3f, 0x7c, 0xf4, 0xb1, 0x4f, 0x6d, 0xa3, 0xe9, 0xff, 0xd1, 0xec, 0xcc, 0xb0,
	0x82, 0x62, 0x2a, 0xd4, 0xf4, 0x8d, 0x39, 0xf3, 0x9d, 0x6f, 0xce, 0xf9, 0xce, 0xb7, 0x47, 0xe1,
	0xa5, 0x79, 0x62, 0x1e, 0xdb, 0x0e, 0xf3, 0x58, 0x93, 0x59, 0x5a, 0xa7, 0x67, 0xd2, 0x63, 0xea,
	0x68, 0xac, 0xd5, 0x22, 0xcd, 0x23, 0xa3, 0xd3, 0x23, 0x7d, 0xdb, 0x34, 0x3c, 0xea, 0xde, 0x8c,
	0xa8, 0x3c, 0x09, 0xad, 0x8f, 0xe6, 0xab, 0x32, 0x5f, 0xbd, 0x81, 0x5e, 0xdd, 0x9a, 0xf8, 0x8e,
	0x7b, 0x64, 0x38, 0xd4, 0xd4, 0x1c, 0xda, 0x65, 0x03, 0xc3, 0x22, 0x0e, 0x35, 0x5c, 0xd6, 0x13,
	0xcc, 0xab, 0x4f, 0x27, 0x66, 0x04, 0x81, 0x41, 0x5a, 0x6b, 0x5a, 0xac, 0x21, 0xc1, 0xc9, 0x36,
	0x63, 0x6d, 0x8b, 0x8a, 0xeb, 0x46, 0xbf, 0xa5, 0x79, 0x9d, 0x2e, 0x75, 0x3d, 0xa3, 0x6b, 0x4b,
	0xc0, 0x72, 0x9b, 0xb5, 0x19, 0xff, 0xa9, 0xf9, 0xbf, 0x44, 0x34, 0xf5, 0x29, 0x02, 0xd1, 0x8a,
	0x63, 0x52, 0xa7, 0x6a, 0x19, 0x4d, 0x7a, 0x90, 0x46, 0x79, 0xf8, 0x8b, 0xf9, 0xe7, 0x15, 0x65,
	0x4d, 0xd9, 0x58, 0xdc, 0x56, 0xd5, 0x89, 0xed, 0x05, 0x81, 0x41, 0x5a, 0x2d, 0x8a, 0x18, 0x67,
	0xc1, 0x22, 0x19, 0x79, 0x10, 0xb7, 0x7d, 0xc2, 0x2e, 0xed, 0x79, 0xc4, 0xf5, 0x0c, 0xaf, 0xef,
	0xae, 0x84, 0xd7, 0x94, 0x8d, 0xd8, 0x76, 0x51, 0xbd, 0x9b, 0x5e, 0xea, 0x68, 0x55, 0x23, 0x07,
	0x9f, 0xb1, 0xc6, 0x09, 0xf1, 0xbf, 0xf6, 0x78, 0x00, 0xe5, 0x00, 0xfc, 0xae, 0x09, 0x6f, 0x7b,
	0x25, 0xc2, 0x1b, 0x58, 0x55, 0x85, 0x30, 0xea, 0x50, 0x18, 0xb5, 0x3e, 0x14, 0x26, 0xbb, 0x70,
	0xf6, 0x35, 0xa9, 0x9c, 0x7e, 0x4b, 0x2a, 0xf8, 0x1f, 0x3f, 0xaf, 0xe6, 0x07, 0x53, 0xa7, 0x0a,
	0x2c, 0x4f, 0x7a, 0x0e, 0xad, 0x43, 0xaa, 0x82, 0xf3, 0x3a, 0x26, 0xd5, 0x52, 0x26, 0xa7, 0xef,
	0xe9, 0xe5, 0x3a, 0xa9, 0xd5, 0x33, 0xf5, 0xfd, 0x1a, 0xd9, 0x2f, 0xd7, 0xaa, 0x7a, 0xae, 0x58,
	0x28, 0xea, 0xf9, 0x78, 0x08, 0x6d, 0xc2, 0x93, 0x5b, 0x70, 0x59, 0xbd, 0x56, 0x27, 0x7a, 0xa1,
	0x50, 0xc1, 0x75, 0x52, 0xa9, 0xea, 0x65, 0x3d, 0x1f, 0x57, 0xd0, 0x23, 0x78, 0x78, 0x0b, 0x5c,
	0x42, 0xc2, 0xa9, 0x8f, 0x73, 0xb0, 0x24, 0xe4, 0xf5, 0x6d, 0xe2, 0x4f, 0xe9, 0x10, 0xe2, 0xdc,
	0x32, 0xd4, 0x24, 0x5c, 0x70, 0xd2, 0x31, 0xe5, 0xc0, 0xb6, 0xa6, 0x1b, 0x58, 0xd1, 0xc4, 0x31,
	0xc9, 0x24, 0xcf, 0xe8, 0x15, 0xcc, 0x0b, 0x1b, 0xca, 0x89, 0x69, 0x93, 0x19, 0x85, 0x73, 0xd5,
	0xab, 0xba, 0x0c, 0x0b, 0xf3, 0x34, 0x2c, 0xd3, 0x11, 0x83, 0xd8, 0xd0, 0xd7, 0xd2, 0x02, 0x11,
	0x4e, 0xb8, 0x3b, 0x95, 0x05, 0x86, 0x3d, 0x8f, 0xbd, 0x24, 0x1d, 0xb0, 0xe4, 0x8c, 0x1e, 0xaf,
	0xcd, 0x7f, 0x6e, 0xb6, 0xf9, 0x7f, 0x56, 0x00, 0xdd, 0x7c, 0x0a, 0x3d, 0x86, 0x35, 0x31, 0x26,
	0xac, 0xef, 0x55, 0x0e, 0x32, 0xa5, 0x5f, 0xcc, 0xfe, 0x1a, 0x6a, 0x74, 0xf2, 0xb9, 0x4c, 0x39,
	0xa7, 0x97, 0xc6, 0x67, 0x7f, 0x0d, 0x1e, 0x40, 0xc2, 0x28, 0x09, 0x0f, 0x26, 0x42, 0x0a, 0xc5,
	0x92, 0x0f, 0x88, 0xf8, 0x7e, 0x15, 0xe6, 0xd8, 0xe7, 0xaa, 0x1d, 0xa4, 0xd1, 0x6b, 0x58, 0xf8,
	0x6d, 0x53, 0xfc, 0xcd, 0xa4, 0x1b, 0xb6, 0xe1, 0x7f, 0x8f, 0x79, 0x86, 0x45, 0x5a, 0x1d, 0xcb,
	0xa2, 0x26, 0x79, 0xdf, 0x37, 0x7a, 0x5e, 0xbf, 0x2b, 0x3e, 0xe7, 0x39, 0xfc, 0x1f, 0xbf, 0x2c,
	0xf0, 0xbb, 0x37, 0xf2, 0x2a, 0xf5, 0x23, 0x0c, 0x31, 0x29, 0xa1, 0x2d, 0xd7, 0x0a, 0x86, 0x28,
	0xb3, 0xee, 0xc1, 0xac, 0xc0, 0xac, 0xc0, 0xa8, 0xc1, 0xaa, 0x0a, 0xdf, 0xf7, 0xaa, 0x8a, 0xfc,
	0xe1, 0x55, 0x35, 0xa3, 0x55, 0x3f, 0x44, 0x20, 0x5e, 0x69, 0xb5, 0x72, 0x7e, 0x31, 0xc1, 0xf4,
	0xdf, 0xc2, 0xa2, 0x50, 0x99, 0x3f, 0x29, 0x85, 0xde, 0x99, 0xa5, 0x95, 0xdd, 0x10, 0x06, 0x16,
	0x9c, 0xd1, 0x21, 0x44, 0x05, 0xb1, 0xd8, 0x17, 0x52, 0xf5, 0xe7, 0x33, 0x7d, 0xcc, 0xbb, 0x21,
	0x2c, 0xaa, 0x14, 0x81, 0x2b, 0x6e, 0x81, 0x96, 0xbb, 0x7b, 0x3a, 0xee, 0xa1, 0x02, 0x01, 0xb7,
	0x08, 0xa0, 0x77, 0xb0, 0x34, 0xac, 0x5b, 0x48, 0x22, 0xd4, 0x7e, 0x31, 0x65, 0xe1, 0x76, 0x20,
	0x4a, 0x94, 0x8d, 0x44, 0xb2, 0x71, 0x88, 0x09, 0x24, 0xe9, 0x52, 0xd7, 0x35, 0xda, 0x34, 0xdb,
	0x3c, 0xbb, 0x48, 0x28, 0xe7, 0x17, 0x09, 0xe5, 0xfb, 0x45, 0x42, 0x39, 0xbd, 0x4c, 0x84, 0xce,
	0x2f, 0x13, 0xa1, 0x2f, 0x97, 0x89, 0xd0, 0x61, 0xb1, 0xdd, 0xf1, 0x8e, 0xfa, 0x0d, 0xb5, 0xc9,
	0xba, 0xda, 0xd8, 0x1f, 0xf7, 0xc1, 0xce, 0x26, 0x7f, 0x54, 0xbb, 0xc3, 0x3f, 0x22, 0xde, 0x89,
	0x4d, 0xdd, 0xc6, 0x3c, 0x47, 0x3e, 0xfb, 0x19, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x4c, 0xe4, 0xe6,
	0xbf, 0x08, 0x00, 0x00,
}

func (m *OrderPlaceV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderPlaceV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderPlaceV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeStamp != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.TimeStamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.TimeStamp):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintOffChainUpdates(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1a
	}
	if m.PlacementStatus != 0 {
		i = encodeVarintOffChainUpdates(dAtA, i, uint64(m.PlacementStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOffChainUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderRemoveV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderRemoveV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderRemoveV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeStamp != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.TimeStamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.TimeStamp):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintOffChainUpdates(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x22
	}
	if m.RemovalStatus != 0 {
		i = encodeVarintOffChainUpdates(dAtA, i, uint64(m.RemovalStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.Reason != 0 {
		i = encodeVarintOffChainUpdates(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x10
	}
	if m.RemovedOrderId != nil {
		{
			size, err := m.RemovedOrderId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOffChainUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderUpdateV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderUpdateV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderUpdateV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalFilledQuantums != 0 {
		i = encodeVarintOffChainUpdates(dAtA, i, uint64(m.TotalFilledQuantums))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderId != nil {
		{
			size, err := m.OrderId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOffChainUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderReplaceV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderReplaceV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderReplaceV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeStamp != nil {
		n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.TimeStamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.TimeStamp):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintOffChainUpdates(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x22
	}
	if m.PlacementStatus != 0 {
		i = encodeVarintOffChainUpdates(dAtA, i, uint64(m.PlacementStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOffChainUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OldOrderId != nil {
		{
			size, err := m.OldOrderId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOffChainUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OffChainUpdateV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OffChainUpdateV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffChainUpdateV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateMessage != nil {
		{
			size := m.UpdateMessage.Size()
			i -= size
			if _, err := m.UpdateMessage.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OffChainUpdateV1_OrderPlace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffChainUpdateV1_OrderPlace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OrderPlace != nil {
		{
			size, err := m.OrderPlace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOffChainUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *OffChainUpdateV1_OrderRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffChainUpdateV1_OrderRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OrderRemove != nil {
		{
			size, err := m.OrderRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOffChainUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OffChainUpdateV1_OrderUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffChainUpdateV1_OrderUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OrderUpdate != nil {
		{
			size, err := m.OrderUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOffChainUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *OffChainUpdateV1_OrderReplace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffChainUpdateV1_OrderReplace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OrderReplace != nil {
		{
			size, err := m.OrderReplace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOffChainUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintOffChainUpdates(dAtA []byte, offset int, v uint64) int {
	offset -= sovOffChainUpdates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderPlaceV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	if m.PlacementStatus != 0 {
		n += 1 + sovOffChainUpdates(uint64(m.PlacementStatus))
	}
	if m.TimeStamp != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.TimeStamp)
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	return n
}

func (m *OrderRemoveV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemovedOrderId != nil {
		l = m.RemovedOrderId.Size()
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovOffChainUpdates(uint64(m.Reason))
	}
	if m.RemovalStatus != 0 {
		n += 1 + sovOffChainUpdates(uint64(m.RemovalStatus))
	}
	if m.TimeStamp != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.TimeStamp)
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	return n
}

func (m *OrderUpdateV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		l = m.OrderId.Size()
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	if m.TotalFilledQuantums != 0 {
		n += 1 + sovOffChainUpdates(uint64(m.TotalFilledQuantums))
	}
	return n
}

func (m *OrderReplaceV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OldOrderId != nil {
		l = m.OldOrderId.Size()
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	if m.PlacementStatus != 0 {
		n += 1 + sovOffChainUpdates(uint64(m.PlacementStatus))
	}
	if m.TimeStamp != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.TimeStamp)
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	return n
}

func (m *OffChainUpdateV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateMessage != nil {
		n += m.UpdateMessage.Size()
	}
	return n
}

func (m *OffChainUpdateV1_OrderPlace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderPlace != nil {
		l = m.OrderPlace.Size()
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	return n
}
func (m *OffChainUpdateV1_OrderRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderRemove != nil {
		l = m.OrderRemove.Size()
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	return n
}
func (m *OffChainUpdateV1_OrderUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderUpdate != nil {
		l = m.OrderUpdate.Size()
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	return n
}
func (m *OffChainUpdateV1_OrderReplace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderReplace != nil {
		l = m.OrderReplace.Size()
		n += 1 + l + sovOffChainUpdates(uint64(l))
	}
	return n
}

func sovOffChainUpdates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOffChainUpdates(x uint64) (n int) {
	return sovOffChainUpdates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderPlaceV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffChainUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderPlaceV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderPlaceV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &types.IndexerOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementStatus", wireType)
			}
			m.PlacementStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlacementStatus |= OrderPlaceV1_OrderPlacementStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeStamp == nil {
				m.TimeStamp = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.TimeStamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOffChainUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderRemoveV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffChainUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderRemoveV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderRemoveV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedOrderId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedOrderId == nil {
				m.RemovedOrderId = &types.IndexerOrderId{}
			}
			if err := m.RemovedOrderId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= types2.OrderRemovalReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovalStatus", wireType)
			}
			m.RemovalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemovalStatus |= OrderRemoveV1_OrderRemovalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeStamp == nil {
				m.TimeStamp = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.TimeStamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOffChainUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderUpdateV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffChainUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderUpdateV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderUpdateV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrderId == nil {
				m.OrderId = &types.IndexerOrderId{}
			}
			if err := m.OrderId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFilledQuantums", wireType)
			}
			m.TotalFilledQuantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFilledQuantums |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOffChainUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderReplaceV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffChainUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderReplaceV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderReplaceV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldOrderId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OldOrderId == nil {
				m.OldOrderId = &types.IndexerOrderId{}
			}
			if err := m.OldOrderId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &types.IndexerOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementStatus", wireType)
			}
			m.PlacementStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlacementStatus |= OrderPlaceV1_OrderPlacementStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeStamp == nil {
				m.TimeStamp = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.TimeStamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOffChainUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OffChainUpdateV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffChainUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OffChainUpdateV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OffChainUpdateV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderPlace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrderPlaceV1{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpdateMessage = &OffChainUpdateV1_OrderPlace{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrderRemoveV1{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpdateMessage = &OffChainUpdateV1_OrderRemove{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrderUpdateV1{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpdateMessage = &OffChainUpdateV1_OrderUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderReplace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrderReplaceV1{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpdateMessage = &OffChainUpdateV1_OrderReplace{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOffChainUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffChainUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOffChainUpdates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOffChainUpdates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOffChainUpdates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOffChainUpdates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOffChainUpdates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOffChainUpdates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOffChainUpdates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOffChainUpdates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOffChainUpdates = fmt.Errorf("proto: unexpected end of group")
)
