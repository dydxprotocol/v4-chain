version: '3'
services:
  kafka:
    image: blacktop/kafka:2.6
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS:
        "to-ender:1:1,\
        to-vulcan:1:1,\
        to-websockets-orderbooks:1:1,\
        to-websockets-subaccounts:1:1,\
        to-websockets-trades:1:1,\
        to-websockets-markets:1:1,\
        to-websockets-candles:1:1,\
        to-websockets-block-height:1:1"
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL_SAME_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      DD_AGENT_HOST: datadog-agent
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic to-websockets-candles --describe"]
      interval: 5s
      timeout: 20s
      retries: 50
    labels:
      com.datadoghq.ad.logs: '[{"source": "indexer", "service": "kafka"}]'
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres.local
    ports:
      - 5435:5432
    environment:
      POSTGRES_PASSWORD: dydxserver123
      POSTGRES_USER: dydx_dev
      DATADOG_POSTGRES_PASSWORD: dydxserver123
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dydx_dev"]
      interval: 5s
      timeout: 20s
      retries: 10
    labels:
      com.datadoghq.ad.logs: '[{"source": "indexer", "service": "postgres"}]'
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port":5432,"username":"datadog","password":"dydxserver123"}]'
  redis:
    image: redis:5.0.6-alpine
    ports:
      - 6382:6379
    labels:
      com.datadoghq.ad.logs: '[{"source": "indexer", "service": "redis"}]'
      com.datadoghq.ad.check_names: '["redisdb"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host": "%%host%%","port":"6379","password":"%%env_REDIS_PASSWORD%%"}]'
  datadog-agent:
    build: datadog
    links:
      - redis
      - vulcan
      - comlink
      - ender
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_LOGS_ENABLED=true
      - DD_TAGS="service:local-indexer dev:${USER}"
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    profiles: ["export-to-datadog"]
  postgres-package:
    build:
      context: .
      dockerfile: Dockerfile.postgres-package.local
    links:
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
  ender:
    build:
      context: .
      dockerfile: Dockerfile.service.local
      args:
        service: ender
    ports:
      - 3001:3001
    links:
      - postgres
    environment:
      # See https://docs.datadoghq.com/profiler/enabling/nodejs/ for DD_ specific environment variables.
      # Note that DD_SERVICE and DD_VERSION are read by default from package.json
      - DD_PROFILING_ENABLED=true
      - DD_ENV=localnet_${USER}
      - DD_AGENT_HOST=datadog-agent
      - REDIS_URL=redis://redis:6379
    labels:
      com.datadoghq.ad.logs: '[{"source": "indexer", "service": "ender"}]'
    depends_on:
      kafka:
        condition: service_healthy
      postgres-package:
        condition: service_completed_successfully
  comlink:
    build:
      context: .
      dockerfile: Dockerfile.service.local
      args:
        service: comlink
    environment:
      # See https://docs.datadoghq.com/profiler/enabling/nodejs/ for DD_ specific environment variables.
      # Note that DD_SERVICE and DD_VERSION are read by default from package.json
      - DD_PROFILING_ENABLED=true
      - DD_ENV=localnet_${USER}
      - DD_AGENT_HOST=datadog-agent
      - REDIS_URL=redis://redis:6379
      - RATE_LIMIT_REDIS_URL=redis://redis:6379
      - PORT=3002
      - RATE_LIMIT_ENABLED=false
      - INDEXER_LEVEL_GEOBLOCKING_ENABLED=false
      - COMPLIANCE_DATA_CLIENT=PLACEHOLDER
    labels:
      com.datadoghq.ad.logs: '[{"source": "indexer", "service": "comlink"}]'
    ports:
      - 3002:3002
    links:
      - postgres
    depends_on:
      postgres-package:
        condition: service_completed_successfully
  socks:
    build:
      context: .
      dockerfile: Dockerfile.service.local
      args:
        service: socks
    ports:
      - 3003:3003
    links:
      - postgres
    environment:
      - WS_PORT=3003
      # See https://docs.datadoghq.com/profiler/enabling/nodejs/ for DD_ specific environment variables.
      # Note that DD_SERVICE and DD_VERSION are read by default from package.json
      - DD_PROFILING_ENABLED=true
      - DD_ENV=localnet_${USER}
      - DD_AGENT_HOST=datadog-agent
      - COMLINK_URL=host.docker.internal:3002
    labels:
      com.datadoghq.ad.logs: '[{"source": "indexer", "service": "socks"}]'
    depends_on:
      kafka:
        condition: service_healthy
      postgres-package:
        condition: service_completed_successfully
  roundtable:
    build:
      context: .
      dockerfile: Dockerfile.service.local
      args:
        service: roundtable
    ports:
      - 3004:3004
    links:
      - postgres
    environment:
      # See https://docs.datadoghq.com/profiler/enabling/nodejs/ for DD_ specific environment variables.
      # Note that DD_SERVICE and DD_VERSION are read by default from package.json
      - DD_PROFILING_ENABLED=true
      - DD_ENV=localnet_${USER}
      - DD_AGENT_HOST=datadog-agent
    labels:
      com.datadoghq.ad.logs: '[{"source": "indexer", "service": "roundtable"}]'
    depends_on:
      kafka:
        condition: service_healthy
      postgres-package:
        condition: service_completed_successfully
  vulcan:
    build:
      context: .
      dockerfile: Dockerfile.service.local
      args:
        service: vulcan
    environment:
      # See https://docs.datadoghq.com/profiler/enabling/nodejs/ for DD_ specific environment variables.
      # Note that DD_SERVICE and DD_VERSION are read by default from package.json
      - DD_PROFILING_ENABLED=true
      - DD_ENV=localnet_${USER}
      - DD_AGENT_HOST=datadog-agent
      - REDIS_URL=redis://redis:6379
    labels:
      com.datadoghq.ad.logs: '[{"source": "indexer", "service": "vulcan"}]'
    ports:
      - 3005:3005
    depends_on:
      kafka:
        condition: service_healthy
